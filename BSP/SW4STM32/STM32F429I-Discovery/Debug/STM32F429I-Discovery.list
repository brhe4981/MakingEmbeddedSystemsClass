
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007760  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006414  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd24  0800dd24  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd2c  0800dd2c  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd30  0800dd30  0001dd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000260  20000000  0800dd34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
  8 .bss          00004008  20000260  20000260  00020260  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004268  20004268  00020260  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f3b3  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004cf5  00000000  00000000  0003f643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000118b9  00000000  00000000  00044338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00055bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  00056f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028649  00000000  00000000  00058a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c8b  00000000  00000000  00081079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ae0  00000000  00000000  000a3d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001867e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  00186834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000260 	.word	0x20000260
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078f8 	.word	0x080078f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000264 	.word	0x20000264
 80001ec:	080078f8 	.word	0x080078f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4770      	bx	lr

08000598 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000598:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800059c:	4770      	bx	lr

0800059e <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 800059e:	2029      	movs	r0, #41	; 0x29
 80005a0:	f000 bf54 	b.w	800144c <LCD_IO_WriteReg>

080005a4 <ili9341_DisplayOff>:
 80005a4:	2028      	movs	r0, #40	; 0x28
 80005a6:	f000 bf51 	b.w	800144c <LCD_IO_WriteReg>

080005aa <ili9341_Init>:
{
 80005aa:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80005ac:	f000 fed4 	bl	8001358 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80005b0:	20ca      	movs	r0, #202	; 0xca
 80005b2:	f000 ff4b 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b6:	20c3      	movs	r0, #195	; 0xc3
 80005b8:	f000 ff2c 	bl	8001414 <LCD_IO_WriteData>
 80005bc:	2008      	movs	r0, #8
 80005be:	f000 ff29 	bl	8001414 <LCD_IO_WriteData>
 80005c2:	2050      	movs	r0, #80	; 0x50
 80005c4:	f000 ff26 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c8:	20cf      	movs	r0, #207	; 0xcf
 80005ca:	f000 ff3f 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 ff20 	bl	8001414 <LCD_IO_WriteData>
 80005d4:	20c1      	movs	r0, #193	; 0xc1
 80005d6:	f000 ff1d 	bl	8001414 <LCD_IO_WriteData>
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 ff1a 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e0:	20ed      	movs	r0, #237	; 0xed
 80005e2:	f000 ff33 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f000 ff14 	bl	8001414 <LCD_IO_WriteData>
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 ff11 	bl	8001414 <LCD_IO_WriteData>
 80005f2:	2012      	movs	r0, #18
 80005f4:	f000 ff0e 	bl	8001414 <LCD_IO_WriteData>
 80005f8:	2081      	movs	r0, #129	; 0x81
 80005fa:	f000 ff0b 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005fe:	20e8      	movs	r0, #232	; 0xe8
 8000600:	f000 ff24 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000604:	2085      	movs	r0, #133	; 0x85
 8000606:	f000 ff05 	bl	8001414 <LCD_IO_WriteData>
 800060a:	2000      	movs	r0, #0
 800060c:	f000 ff02 	bl	8001414 <LCD_IO_WriteData>
 8000610:	2078      	movs	r0, #120	; 0x78
 8000612:	f000 feff 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000616:	20cb      	movs	r0, #203	; 0xcb
 8000618:	f000 ff18 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800061c:	2039      	movs	r0, #57	; 0x39
 800061e:	f000 fef9 	bl	8001414 <LCD_IO_WriteData>
 8000622:	202c      	movs	r0, #44	; 0x2c
 8000624:	f000 fef6 	bl	8001414 <LCD_IO_WriteData>
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fef3 	bl	8001414 <LCD_IO_WriteData>
 800062e:	2034      	movs	r0, #52	; 0x34
 8000630:	f000 fef0 	bl	8001414 <LCD_IO_WriteData>
 8000634:	2002      	movs	r0, #2
 8000636:	f000 feed 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063a:	20f7      	movs	r0, #247	; 0xf7
 800063c:	f000 ff06 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000640:	2020      	movs	r0, #32
 8000642:	f000 fee7 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000646:	20ea      	movs	r0, #234	; 0xea
 8000648:	f000 ff00 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fee1 	bl	8001414 <LCD_IO_WriteData>
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fede 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000658:	20b1      	movs	r0, #177	; 0xb1
 800065a:	f000 fef7 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fed8 	bl	8001414 <LCD_IO_WriteData>
 8000664:	201b      	movs	r0, #27
 8000666:	f000 fed5 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800066a:	20b6      	movs	r0, #182	; 0xb6
 800066c:	f000 feee 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fecf 	bl	8001414 <LCD_IO_WriteData>
 8000676:	20a2      	movs	r0, #162	; 0xa2
 8000678:	f000 fecc 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800067c:	20c0      	movs	r0, #192	; 0xc0
 800067e:	f000 fee5 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000682:	2010      	movs	r0, #16
 8000684:	f000 fec6 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000688:	20c1      	movs	r0, #193	; 0xc1
 800068a:	f000 fedf 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800068e:	2010      	movs	r0, #16
 8000690:	f000 fec0 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000694:	20c5      	movs	r0, #197	; 0xc5
 8000696:	f000 fed9 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800069a:	2045      	movs	r0, #69	; 0x45
 800069c:	f000 feba 	bl	8001414 <LCD_IO_WriteData>
 80006a0:	2015      	movs	r0, #21
 80006a2:	f000 feb7 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a6:	20c7      	movs	r0, #199	; 0xc7
 80006a8:	f000 fed0 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ac:	2090      	movs	r0, #144	; 0x90
 80006ae:	f000 feb1 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b2:	2036      	movs	r0, #54	; 0x36
 80006b4:	f000 feca 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b8:	20c8      	movs	r0, #200	; 0xc8
 80006ba:	f000 feab 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006be:	20f2      	movs	r0, #242	; 0xf2
 80006c0:	f000 fec4 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fea5 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006ca:	20b0      	movs	r0, #176	; 0xb0
 80006cc:	f000 febe 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006d0:	20c2      	movs	r0, #194	; 0xc2
 80006d2:	f000 fe9f 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006d6:	20b6      	movs	r0, #182	; 0xb6
 80006d8:	f000 feb8 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fe99 	bl	8001414 <LCD_IO_WriteData>
 80006e2:	20a7      	movs	r0, #167	; 0xa7
 80006e4:	f000 fe96 	bl	8001414 <LCD_IO_WriteData>
 80006e8:	2027      	movs	r0, #39	; 0x27
 80006ea:	f000 fe93 	bl	8001414 <LCD_IO_WriteData>
 80006ee:	2004      	movs	r0, #4
 80006f0:	f000 fe90 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006f4:	202a      	movs	r0, #42	; 0x2a
 80006f6:	f000 fea9 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fe8a 	bl	8001414 <LCD_IO_WriteData>
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fe87 	bl	8001414 <LCD_IO_WriteData>
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fe84 	bl	8001414 <LCD_IO_WriteData>
 800070c:	20ef      	movs	r0, #239	; 0xef
 800070e:	f000 fe81 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000712:	202b      	movs	r0, #43	; 0x2b
 8000714:	f000 fe9a 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe7b 	bl	8001414 <LCD_IO_WriteData>
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fe78 	bl	8001414 <LCD_IO_WriteData>
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fe75 	bl	8001414 <LCD_IO_WriteData>
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f000 fe72 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000730:	20f6      	movs	r0, #246	; 0xf6
 8000732:	f000 fe8b 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 fe6c 	bl	8001414 <LCD_IO_WriteData>
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fe69 	bl	8001414 <LCD_IO_WriteData>
 8000742:	2006      	movs	r0, #6
 8000744:	f000 fe66 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000748:	202c      	movs	r0, #44	; 0x2c
 800074a:	f000 fe7f 	bl	800144c <LCD_IO_WriteReg>
  LCD_Delay(200);
 800074e:	20c8      	movs	r0, #200	; 0xc8
 8000750:	f000 fece 	bl	80014f0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000754:	2026      	movs	r0, #38	; 0x26
 8000756:	f000 fe79 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fe5a 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000760:	20e0      	movs	r0, #224	; 0xe0
 8000762:	f000 fe73 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 fe54 	bl	8001414 <LCD_IO_WriteData>
 800076c:	2029      	movs	r0, #41	; 0x29
 800076e:	f000 fe51 	bl	8001414 <LCD_IO_WriteData>
 8000772:	2024      	movs	r0, #36	; 0x24
 8000774:	f000 fe4e 	bl	8001414 <LCD_IO_WriteData>
 8000778:	200c      	movs	r0, #12
 800077a:	f000 fe4b 	bl	8001414 <LCD_IO_WriteData>
 800077e:	200e      	movs	r0, #14
 8000780:	f000 fe48 	bl	8001414 <LCD_IO_WriteData>
 8000784:	2009      	movs	r0, #9
 8000786:	f000 fe45 	bl	8001414 <LCD_IO_WriteData>
 800078a:	204e      	movs	r0, #78	; 0x4e
 800078c:	f000 fe42 	bl	8001414 <LCD_IO_WriteData>
 8000790:	2078      	movs	r0, #120	; 0x78
 8000792:	f000 fe3f 	bl	8001414 <LCD_IO_WriteData>
 8000796:	203c      	movs	r0, #60	; 0x3c
 8000798:	f000 fe3c 	bl	8001414 <LCD_IO_WriteData>
 800079c:	2009      	movs	r0, #9
 800079e:	f000 fe39 	bl	8001414 <LCD_IO_WriteData>
 80007a2:	2013      	movs	r0, #19
 80007a4:	f000 fe36 	bl	8001414 <LCD_IO_WriteData>
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 fe33 	bl	8001414 <LCD_IO_WriteData>
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 fe30 	bl	8001414 <LCD_IO_WriteData>
 80007b4:	2011      	movs	r0, #17
 80007b6:	f000 fe2d 	bl	8001414 <LCD_IO_WriteData>
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fe2a 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80007c0:	20e1      	movs	r0, #225	; 0xe1
 80007c2:	f000 fe43 	bl	800144c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fe24 	bl	8001414 <LCD_IO_WriteData>
 80007cc:	2016      	movs	r0, #22
 80007ce:	f000 fe21 	bl	8001414 <LCD_IO_WriteData>
 80007d2:	201b      	movs	r0, #27
 80007d4:	f000 fe1e 	bl	8001414 <LCD_IO_WriteData>
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 fe1b 	bl	8001414 <LCD_IO_WriteData>
 80007de:	2011      	movs	r0, #17
 80007e0:	f000 fe18 	bl	8001414 <LCD_IO_WriteData>
 80007e4:	2007      	movs	r0, #7
 80007e6:	f000 fe15 	bl	8001414 <LCD_IO_WriteData>
 80007ea:	2031      	movs	r0, #49	; 0x31
 80007ec:	f000 fe12 	bl	8001414 <LCD_IO_WriteData>
 80007f0:	2033      	movs	r0, #51	; 0x33
 80007f2:	f000 fe0f 	bl	8001414 <LCD_IO_WriteData>
 80007f6:	2042      	movs	r0, #66	; 0x42
 80007f8:	f000 fe0c 	bl	8001414 <LCD_IO_WriteData>
 80007fc:	2005      	movs	r0, #5
 80007fe:	f000 fe09 	bl	8001414 <LCD_IO_WriteData>
 8000802:	200c      	movs	r0, #12
 8000804:	f000 fe06 	bl	8001414 <LCD_IO_WriteData>
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fe03 	bl	8001414 <LCD_IO_WriteData>
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f000 fe00 	bl	8001414 <LCD_IO_WriteData>
 8000814:	202f      	movs	r0, #47	; 0x2f
 8000816:	f000 fdfd 	bl	8001414 <LCD_IO_WriteData>
 800081a:	200f      	movs	r0, #15
 800081c:	f000 fdfa 	bl	8001414 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000820:	2011      	movs	r0, #17
 8000822:	f000 fe13 	bl	800144c <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000826:	20c8      	movs	r0, #200	; 0xc8
 8000828:	f000 fe62 	bl	80014f0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800082c:	2029      	movs	r0, #41	; 0x29
 800082e:	f000 fe0d 	bl	800144c <LCD_IO_WriteReg>
}
 8000832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000836:	202c      	movs	r0, #44	; 0x2c
 8000838:	f000 be08 	b.w	800144c <LCD_IO_WriteReg>

0800083c <ili9341_ReadID>:
{
 800083c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800083e:	f000 fd8b 	bl	8001358 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000842:	2103      	movs	r1, #3
 8000844:	20d3      	movs	r0, #211	; 0xd3
 8000846:	f000 fe1d 	bl	8001484 <LCD_IO_ReadData>
}
 800084a:	b280      	uxth	r0, r0
 800084c:	bd08      	pop	{r3, pc}

0800084e <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800084e:	4770      	bx	lr

08000850 <L3GD20_Init>:
{  
 8000850:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000852:	2300      	movs	r3, #0
{  
 8000854:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000856:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800085a:	f000 fec9 	bl	80015f0 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800085e:	f10d 0007 	add.w	r0, sp, #7
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 8000866:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800086a:	f000 fef9 	bl	8001660 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800086e:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	2123      	movs	r1, #35	; 0x23
 8000874:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8000878:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800087c:	f000 fef0 	bl	8001660 <GYRO_IO_Write>
}
 8000880:	b002      	add	sp, #8
 8000882:	bd10      	pop	{r4, pc}

08000884 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000884:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000886:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 8000888:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800088c:	2120      	movs	r1, #32
 800088e:	f10d 0007 	add.w	r0, sp, #7
 8000892:	f000 fee5 	bl	8001660 <GYRO_IO_Write>
}
 8000896:	b003      	add	sp, #12
 8000898:	f85d fb04 	ldr.w	pc, [sp], #4

0800089c <L3GD20_ReadID>:
{
 800089c:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800089e:	f000 fea7 	bl	80015f0 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80008a2:	f10d 0007 	add.w	r0, sp, #7
 80008a6:	2201      	movs	r2, #1
 80008a8:	210f      	movs	r1, #15
 80008aa:	f000 fefb 	bl	80016a4 <GYRO_IO_Read>
}
 80008ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80008b2:	b003      	add	sp, #12
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4

080008b8 <L3GD20_RebootCmd>:
{
 80008b8:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f10d 0007 	add.w	r0, sp, #7
 80008c0:	2124      	movs	r1, #36	; 0x24
 80008c2:	f000 feef 	bl	80016a4 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ca:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008d0:	2124      	movs	r1, #36	; 0x24
 80008d2:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008d6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008da:	f000 fec1 	bl	8001660 <GYRO_IO_Write>
}
 80008de:	b003      	add	sp, #12
 80008e0:	f85d fb04 	ldr.w	pc, [sp], #4

080008e4 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80008e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008e6:	2300      	movs	r3, #0
{
 80008e8:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f10d 0006 	add.w	r0, sp, #6
 80008f0:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008f2:	f88d 3006 	strb.w	r3, [sp, #6]
 80008f6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008fa:	f000 fed3 	bl	80016a4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80008fe:	f10d 0007 	add.w	r0, sp, #7
 8000902:	2201      	movs	r2, #1
 8000904:	2122      	movs	r1, #34	; 0x22
 8000906:	f000 fecd 	bl	80016a4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800090a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800090e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000912:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8000916:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800091a:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800091e:	ea43 0004 	orr.w	r0, r3, r4
 8000922:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	f10d 0006 	add.w	r0, sp, #6
 800092c:	2130      	movs	r1, #48	; 0x30
 800092e:	f000 fe97 	bl	8001660 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	2122      	movs	r1, #34	; 0x22
 8000936:	f10d 0007 	add.w	r0, sp, #7
 800093a:	f000 fe91 	bl	8001660 <GYRO_IO_Write>
}
 800093e:	b002      	add	sp, #8
 8000940:	bd10      	pop	{r4, pc}

08000942 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000942:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000944:	2201      	movs	r2, #1
{  
 8000946:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000948:	2122      	movs	r1, #34	; 0x22
 800094a:	f10d 0007 	add.w	r0, sp, #7
 800094e:	f000 fea9 	bl	80016a4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000952:	b96c      	cbnz	r4, 8000970 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000958:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800095c:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	2122      	movs	r1, #34	; 0x22
 8000964:	f10d 0007 	add.w	r0, sp, #7
 8000968:	f000 fe7a 	bl	8001660 <GYRO_IO_Write>
}
 800096c:	b002      	add	sp, #8
 800096e:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 8000970:	2c01      	cmp	r4, #1
 8000972:	d1f5      	bne.n	8000960 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 8000974:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000978:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	e7ec      	b.n	800095c <L3GD20_EnableIT+0x1a>

08000982 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000982:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000984:	2201      	movs	r2, #1
{  
 8000986:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000988:	2122      	movs	r1, #34	; 0x22
 800098a:	f10d 0007 	add.w	r0, sp, #7
 800098e:	f000 fe89 	bl	80016a4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000992:	b96c      	cbnz	r4, 80009b0 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000994:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800099c:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2122      	movs	r1, #34	; 0x22
 80009a4:	f10d 0007 	add.w	r0, sp, #7
 80009a8:	f000 fe5a 	bl	8001660 <GYRO_IO_Write>
}
 80009ac:	b002      	add	sp, #8
 80009ae:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 80009b0:	2c01      	cmp	r4, #1
 80009b2:	d1f5      	bne.n	80009a0 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 80009b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009b8:	f023 0308 	bic.w	r3, r3, #8
 80009bc:	e7ee      	b.n	800099c <L3GD20_DisableIT+0x1a>

080009be <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80009be:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009c0:	2201      	movs	r2, #1
{
 80009c2:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009c4:	2121      	movs	r1, #33	; 0x21
 80009c6:	f10d 0007 	add.w	r0, sp, #7
 80009ca:	f000 fe6b 	bl	80016a4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80009ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009d2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80009d6:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	2121      	movs	r1, #33	; 0x21
 80009dc:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 80009e0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009e4:	f000 fe3c 	bl	8001660 <GYRO_IO_Write>
}
 80009e8:	b002      	add	sp, #8
 80009ea:	bd10      	pop	{r4, pc}

080009ec <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80009ec:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009ee:	2201      	movs	r2, #1
{
 80009f0:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009f2:	2124      	movs	r1, #36	; 0x24
 80009f4:	f10d 0007 	add.w	r0, sp, #7
 80009f8:	f000 fe54 	bl	80016a4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80009fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000a00:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8000a04:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2124      	movs	r1, #36	; 0x24
 8000a0a:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 8000a0e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a12:	f000 fe25 	bl	8001660 <GYRO_IO_Write>
}
 8000a16:	b002      	add	sp, #8
 8000a18:	bd10      	pop	{r4, pc}
	...

08000a1c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 8000a20:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2123      	movs	r1, #35	; 0x23
{
 8000a26:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a28:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 8000a32:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a36:	f000 fe35 	bl	80016a4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	2128      	movs	r1, #40	; 0x28
 8000a3e:	a802      	add	r0, sp, #8
 8000a40:	f000 fe30 	bl	80016a4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a48:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8000a4c:	f89d 7009 	ldrb.w	r7, [sp, #9]
 8000a50:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000a54:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8000a58:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000a5c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8000a60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000a64:	d039      	beq.n	8000ada <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000a66:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8000a6a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8000a6e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000a72:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000a76:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8000a7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a7e:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000a80:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a84:	d034      	beq.n	8000af0 <L3GD20_ReadXYZAngRate+0xd4>
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d035      	beq.n	8000af6 <L3GD20_ReadXYZAngRate+0xda>
 8000a8a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000afc <L3GD20_ReadXYZAngRate+0xe0>
 8000a8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000b00 <L3GD20_ReadXYZAngRate+0xe4>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf08      	it	eq
 8000a96:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000a9a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8000a9e:	ee07 3a10 	vmov	s14, r3
 8000aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aa6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8000aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aae:	ed84 7a00 	vstr	s14, [r4]
 8000ab2:	ee07 3a10 	vmov	s14, r3
 8000ab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac2:	ed84 7a01 	vstr	s14, [r4, #4]
 8000ac6:	ee07 3a10 	vmov	s14, r3
 8000aca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad2:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8000ad6:	b007      	add	sp, #28
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000ada:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8000ade:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8000ae2:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000ae6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000aea:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000aee:	e7c4      	b.n	8000a7a <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000af0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000b04 <L3GD20_ReadXYZAngRate+0xe8>
 8000af4:	e7d1      	b.n	8000a9a <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000af6:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000b08 <L3GD20_ReadXYZAngRate+0xec>
 8000afa:	e7ce      	b.n	8000a9a <L3GD20_ReadXYZAngRate+0x7e>
 8000afc:	00000000 	.word	0x00000000
 8000b00:	410c0000 	.word	0x410c0000
 8000b04:	418c0000 	.word	0x418c0000
 8000b08:	428c0000 	.word	0x428c0000

08000b0c <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8000b0c:	4613      	mov	r3, r2
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8000b0e:	b2c0      	uxtb	r0, r0
 8000b10:	b2ca      	uxtb	r2, r1
  if (PinState != 0)
 8000b12:	b113      	cbz	r3, 8000b1a <stmpe811_IO_WritePin+0xe>
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8000b14:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 8000b16:	f000 bd19 	b.w	800154c <IOE_Write>
 8000b1a:	2111      	movs	r1, #17
 8000b1c:	e7fb      	b.n	8000b16 <stmpe811_IO_WritePin+0xa>

08000b1e <stmpe811_Reset>:
{
 8000b1e:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8000b20:	b2c4      	uxtb	r4, r0
 8000b22:	2202      	movs	r2, #2
 8000b24:	2103      	movs	r1, #3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f000 fd10 	bl	800154c <IOE_Write>
  IOE_Delay(10); 
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f000 fd5d 	bl	80015ec <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8000b32:	4620      	mov	r0, r4
 8000b34:	2200      	movs	r2, #0
 8000b36:	2103      	movs	r1, #3
 8000b38:	f000 fd08 	bl	800154c <IOE_Write>
}
 8000b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 bd53 	b.w	80015ec <IOE_Delay>

08000b46 <stmpe811_ReadID>:
{
 8000b46:	b538      	push	{r3, r4, r5, lr}
 8000b48:	4604      	mov	r4, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b4a:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8000b4c:	f000 fcd2 	bl	80014f4 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b50:	2100      	movs	r1, #0
 8000b52:	4620      	mov	r0, r4
 8000b54:	f000 fd14 	bl	8001580 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b58:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b5a:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 fd0f 	bl	8001580 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b62:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8000b66:	b280      	uxth	r0, r0
 8000b68:	bd38      	pop	{r3, r4, r5, pc}

08000b6a <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b6a:	b510      	push	{r4, lr}
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b6c:	b2c0      	uxtb	r0, r0
{
 8000b6e:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b70:	2112      	movs	r1, #18
 8000b72:	f000 fd05 	bl	8001580 <IOE_Read>
 8000b76:	4020      	ands	r0, r4
}
 8000b78:	b2c0      	uxtb	r0, r0
 8000b7a:	bd10      	pop	{r4, pc}

08000b7c <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b7c:	b510      	push	{r4, lr}
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b7e:	b2c0      	uxtb	r0, r0
{
 8000b80:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b82:	210d      	movs	r1, #13
 8000b84:	f000 fcfc 	bl	8001580 <IOE_Read>
 8000b88:	4020      	ands	r0, r4
}
 8000b8a:	b2c0      	uxtb	r0, r0
 8000b8c:	bd10      	pop	{r4, pc}

08000b8e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000b8e:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8000b90:	b2c4      	uxtb	r4, r0
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 fcf3 	bl	8001580 <IOE_Read>
  
  if(state > 0)
 8000b9a:	0603      	lsls	r3, r0, #24
 8000b9c:	d507      	bpl.n	8000bae <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000b9e:	214c      	movs	r1, #76	; 0x4c
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f000 fced 	bl	8001580 <IOE_Read>
    {
      ret = 1;
 8000ba6:	3800      	subs	r0, #0
 8000ba8:	bf18      	it	ne
 8000baa:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8000bac:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	214b      	movs	r1, #75	; 0x4b
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 fcca 	bl	800154c <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bb8:	4620      	mov	r0, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	214b      	movs	r1, #75	; 0x4b
 8000bbe:	f000 fcc5 	bl	800154c <IOE_Write>
  uint8_t ret = 0;
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e7f2      	b.n	8000bac <stmpe811_TS_DetectTouch+0x1e>

08000bc6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	b2c4      	uxtb	r4, r0
{
 8000bcc:	460e      	mov	r6, r1
 8000bce:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bd0:	21d7      	movs	r1, #215	; 0xd7
 8000bd2:	eb0d 0203 	add.w	r2, sp, r3
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 fcf0 	bl	80015bc <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000bdc:	9b01      	ldr	r3, [sp, #4]
 8000bde:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000be0:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000be2:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000be6:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000be8:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000bea:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bec:	2201      	movs	r2, #1
 8000bee:	214b      	movs	r1, #75	; 0x4b
 8000bf0:	f000 fcac 	bl	800154c <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	214b      	movs	r1, #75	; 0x4b
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f000 fca7 	bl	800154c <IOE_Write>
}
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c04 <stmpe811_Init>:
{
 8000c04:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <stmpe811_Init+0x2c>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4290      	cmp	r0, r2
{
 8000c0c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8000c0e:	d00d      	beq.n	8000c2c <stmpe811_Init+0x28>
 8000c10:	7859      	ldrb	r1, [r3, #1]
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d00a      	beq.n	8000c2c <stmpe811_Init+0x28>
 8000c16:	b10a      	cbz	r2, 8000c1c <stmpe811_Init+0x18>
 8000c18:	b941      	cbnz	r1, 8000c2c <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000c1a:	2201      	movs	r2, #1
      stmpe811[empty] = DeviceAddr;
 8000c1c:	549c      	strb	r4, [r3, r2]
      IOE_Init(); 
 8000c1e:	f000 fc69 	bl	80014f4 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8000c22:	4620      	mov	r0, r4
}
 8000c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8000c28:	f7ff bf79 	b.w	8000b1e <stmpe811_Reset>
}
 8000c2c:	bd10      	pop	{r4, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000027c 	.word	0x2000027c

08000c34 <stmpe811_EnableGlobalIT>:
{
 8000c34:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c36:	b2c4      	uxtb	r4, r0
 8000c38:	2109      	movs	r1, #9
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fca0 	bl	8001580 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000c40:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c44:	b2c2      	uxtb	r2, r0
 8000c46:	2109      	movs	r1, #9
 8000c48:	4620      	mov	r0, r4
}
 8000c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c4e:	f000 bc7d 	b.w	800154c <IOE_Write>

08000c52 <stmpe811_DisableGlobalIT>:
{
 8000c52:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c54:	b2c4      	uxtb	r4, r0
 8000c56:	2109      	movs	r1, #9
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f000 fc91 	bl	8001580 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c5e:	2109      	movs	r1, #9
 8000c60:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8000c64:	4620      	mov	r0, r4
}
 8000c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c6a:	f000 bc6f 	b.w	800154c <IOE_Write>

08000c6e <stmpe811_EnableITSource>:
{
 8000c6e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c70:	b2c4      	uxtb	r4, r0
{
 8000c72:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c74:	4620      	mov	r0, r4
 8000c76:	210a      	movs	r1, #10
 8000c78:	f000 fc82 	bl	8001580 <IOE_Read>
  tmp |= Source; 
 8000c7c:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c7e:	b2c2      	uxtb	r2, r0
 8000c80:	210a      	movs	r1, #10
 8000c82:	4620      	mov	r0, r4
}
 8000c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c88:	f000 bc60 	b.w	800154c <IOE_Write>

08000c8c <stmpe811_IO_EnableIT>:
{ 
 8000c8c:	b507      	push	{r0, r1, r2, lr}
 8000c8e:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000c90:	f000 fc32 	bl	80014f8 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8000c94:	9801      	ldr	r0, [sp, #4]
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	f7ff ffe9 	bl	8000c6e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000c9c:	9801      	ldr	r0, [sp, #4]
}
 8000c9e:	b003      	add	sp, #12
 8000ca0:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000ca4:	f7ff bfc6 	b.w	8000c34 <stmpe811_EnableGlobalIT>

08000ca8 <stmpe811_TS_EnableIT>:
{
 8000ca8:	b507      	push	{r0, r1, r2, lr}
 8000caa:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000cac:	f000 fc24 	bl	80014f8 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cb0:	9801      	ldr	r0, [sp, #4]
 8000cb2:	211f      	movs	r1, #31
 8000cb4:	f7ff ffdb 	bl	8000c6e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cb8:	9801      	ldr	r0, [sp, #4]
}
 8000cba:	b003      	add	sp, #12
 8000cbc:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cc0:	f7ff bfb8 	b.w	8000c34 <stmpe811_EnableGlobalIT>

08000cc4 <stmpe811_DisableITSource>:
{
 8000cc4:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cc6:	b2c4      	uxtb	r4, r0
{
 8000cc8:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	210a      	movs	r1, #10
 8000cce:	f000 fc57 	bl	8001580 <IOE_Read>
  tmp &= ~Source; 
 8000cd2:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000cd6:	b2c2      	uxtb	r2, r0
 8000cd8:	210a      	movs	r1, #10
 8000cda:	4620      	mov	r0, r4
}
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000ce0:	f000 bc34 	b.w	800154c <IOE_Write>

08000ce4 <stmpe811_IO_DisableIT>:
{
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000ce8:	f7ff ffb3 	bl	8000c52 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000cec:	4620      	mov	r0, r4
 8000cee:	2180      	movs	r1, #128	; 0x80
}
 8000cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000cf4:	f7ff bfe6 	b.w	8000cc4 <stmpe811_DisableITSource>

08000cf8 <stmpe811_TS_DisableIT>:
{
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000cfc:	f7ff ffa9 	bl	8000c52 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d00:	4620      	mov	r0, r4
 8000d02:	211f      	movs	r1, #31
}
 8000d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d08:	f7ff bfdc 	b.w	8000cc4 <stmpe811_DisableITSource>

08000d0c <stmpe811_SetITPolarity>:
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d0e:	b2c4      	uxtb	r4, r0
{
 8000d10:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d12:	4620      	mov	r0, r4
 8000d14:	2109      	movs	r1, #9
 8000d16:	f000 fc33 	bl	8001580 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 8000d1a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d1e:	ea40 0205 	orr.w	r2, r0, r5
 8000d22:	2109      	movs	r1, #9
 8000d24:	4620      	mov	r0, r4
}
 8000d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d2a:	f000 bc0f 	b.w	800154c <IOE_Write>

08000d2e <stmpe811_SetITType>:
{
 8000d2e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d30:	b2c4      	uxtb	r4, r0
{
 8000d32:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d34:	4620      	mov	r0, r4
 8000d36:	2109      	movs	r1, #9
 8000d38:	f000 fc22 	bl	8001580 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 8000d3c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d40:	ea40 0205 	orr.w	r2, r0, r5
 8000d44:	2109      	movs	r1, #9
 8000d46:	4620      	mov	r0, r4
}
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d4c:	f000 bbfe 	b.w	800154c <IOE_Write>

08000d50 <stmpe811_ReadGITStatus>:
{
 8000d50:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d52:	b2c0      	uxtb	r0, r0
{
 8000d54:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d56:	210b      	movs	r1, #11
 8000d58:	f000 fc12 	bl	8001580 <IOE_Read>
}
 8000d5c:	4020      	ands	r0, r4
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000d60:	211f      	movs	r1, #31
 8000d62:	f7ff bff5 	b.w	8000d50 <stmpe811_ReadGITStatus>

08000d66 <stmpe811_ClearGlobalIT>:
{
 8000d66:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000d68:	b2c0      	uxtb	r0, r0
 8000d6a:	210b      	movs	r1, #11
 8000d6c:	f000 bbee 	b.w	800154c <IOE_Write>

08000d70 <stmpe811_IO_ClearIT>:
{
 8000d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	f7ff fff5 	bl	8000d66 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8000d7c:	b2e0      	uxtb	r0, r4
 8000d7e:	b2ea      	uxtb	r2, r5
 8000d80:	210d      	movs	r1, #13
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9000      	str	r0, [sp, #0]
 8000d86:	f000 fbe1 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	9800      	ldr	r0, [sp, #0]
 8000d8e:	2114      	movs	r1, #20
 8000d90:	f000 fbdc 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8000d94:	9a01      	ldr	r2, [sp, #4]
 8000d96:	9800      	ldr	r0, [sp, #0]
 8000d98:	2115      	movs	r1, #21
 8000d9a:	f000 fbd7 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000d9e:	9a01      	ldr	r2, [sp, #4]
 8000da0:	9800      	ldr	r0, [sp, #0]
 8000da2:	2116      	movs	r1, #22
}
 8000da4:	b003      	add	sp, #12
 8000da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000daa:	f000 bbcf 	b.w	800154c <IOE_Write>

08000dae <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000dae:	211f      	movs	r1, #31
 8000db0:	f7ff bfd9 	b.w	8000d66 <stmpe811_ClearGlobalIT>

08000db4 <stmpe811_IO_InitPin>:
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000db6:	b2c4      	uxtb	r4, r0
{
 8000db8:	460d      	mov	r5, r1
 8000dba:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000dbc:	2113      	movs	r1, #19
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 fbde 	bl	8001580 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8000dc4:	b146      	cbz	r6, 8000dd8 <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 8000dc6:	ea40 0105 	orr.w	r1, r0, r5
 8000dca:	b2ca      	uxtb	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dcc:	4620      	mov	r0, r4
 8000dce:	2113      	movs	r1, #19
}
 8000dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dd4:	f000 bbba 	b.w	800154c <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 8000dd8:	ea20 0205 	bic.w	r2, r0, r5
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	e7f5      	b.n	8000dcc <stmpe811_IO_InitPin+0x18>

08000de0 <stmpe811_IO_DisableAF>:
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000de2:	b2c4      	uxtb	r4, r0
{
 8000de4:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000de6:	4620      	mov	r0, r4
 8000de8:	2117      	movs	r1, #23
 8000dea:	f000 fbc9 	bl	8001580 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000dee:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000df0:	b2c2      	uxtb	r2, r0
 8000df2:	2117      	movs	r1, #23
 8000df4:	4620      	mov	r0, r4
}
 8000df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000dfa:	f000 bba7 	b.w	800154c <IOE_Write>

08000dfe <stmpe811_IO_Start>:
{
 8000dfe:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e00:	b2c6      	uxtb	r6, r0
{
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e06:	4630      	mov	r0, r6
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f000 fbb9 	bl	8001580 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e0e:	2104      	movs	r1, #4
 8000e10:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 fb99 	bl	800154c <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e1a:	b2e9      	uxtb	r1, r5
 8000e1c:	4620      	mov	r0, r4
}
 8000e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e22:	f7ff bfdd 	b.w	8000de0 <stmpe811_IO_DisableAF>

08000e26 <stmpe811_IO_EnableAF>:
{
 8000e26:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e28:	b2c4      	uxtb	r4, r0
{
 8000e2a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	2117      	movs	r1, #23
 8000e30:	f000 fba6 	bl	8001580 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8000e34:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e38:	b2c2      	uxtb	r2, r0
 8000e3a:	2117      	movs	r1, #23
 8000e3c:	4620      	mov	r0, r4
}
 8000e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e42:	f000 bb83 	b.w	800154c <IOE_Write>

08000e46 <stmpe811_TS_Start>:
{
 8000e46:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e48:	b2c4      	uxtb	r4, r0
{
 8000e4a:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f000 fb96 	bl	8001580 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e54:	2104      	movs	r1, #4
 8000e56:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e5a:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f000 fb75 	bl	800154c <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000e62:	4630      	mov	r0, r6
 8000e64:	21f0      	movs	r1, #240	; 0xf0
 8000e66:	f7ff ffde 	bl	8000e26 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e6a:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8000e6e:	4620      	mov	r0, r4
 8000e70:	2104      	movs	r1, #4
 8000e72:	f000 fb6b 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000e76:	2249      	movs	r2, #73	; 0x49
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 fb66 	bl	800154c <IOE_Write>
  IOE_Delay(2); 
 8000e80:	2002      	movs	r0, #2
 8000e82:	f000 fbb3 	bl	80015ec <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000e86:	4620      	mov	r0, r4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2121      	movs	r1, #33	; 0x21
 8000e8c:	f000 fb5e 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000e90:	4620      	mov	r0, r4
 8000e92:	229a      	movs	r2, #154	; 0x9a
 8000e94:	2141      	movs	r1, #65	; 0x41
 8000e96:	f000 fb59 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	214a      	movs	r1, #74	; 0x4a
 8000ea0:	f000 fb54 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	214b      	movs	r1, #75	; 0x4b
 8000eaa:	f000 fb4f 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	214b      	movs	r1, #75	; 0x4b
 8000eb4:	f000 fb4a 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2156      	movs	r1, #86	; 0x56
 8000ebe:	f000 fb45 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2158      	movs	r1, #88	; 0x58
 8000ec8:	f000 fb40 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000ecc:	4620      	mov	r0, r4
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	f000 fb3b 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	210b      	movs	r1, #11
 8000edc:	f000 fb36 	bl	800154c <IOE_Write>
}
 8000ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f000 bb81 	b.w	80015ec <IOE_Delay>

08000eea <stmpe811_IO_SetEdgeMode>:
{
 8000eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000eee:	b2c7      	uxtb	r7, r0
{
 8000ef0:	4688      	mov	r8, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	2116      	movs	r1, #22
{
 8000ef6:	4691      	mov	r9, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ef8:	f000 fb42 	bl	8001580 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000efc:	ea6f 0508 	mvn.w	r5, r8
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000f00:	4606      	mov	r6, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8000f02:	2115      	movs	r1, #21
 8000f04:	4638      	mov	r0, r7
 8000f06:	f000 fb3b 	bl	8001580 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000f0a:	b26b      	sxtb	r3, r5
 8000f0c:	401e      	ands	r6, r3
 8000f0e:	b2f2      	uxtb	r2, r6
  if (Edge & STMPE811_EDGE_FALLING)
 8000f10:	f019 0f01 	tst.w	r9, #1
    tmp1 |= (uint8_t)IO_Pin;
 8000f14:	bf18      	it	ne
 8000f16:	ea42 0208 	orrne.w	r2, r2, r8
  tmp2 &= ~(uint8_t)IO_Pin;
 8000f1a:	ea00 0003 	and.w	r0, r0, r3
 8000f1e:	b2c4      	uxtb	r4, r0
    tmp1 |= (uint8_t)IO_Pin;
 8000f20:	bf18      	it	ne
 8000f22:	b2d2      	uxtbne	r2, r2
  if (Edge & STMPE811_EDGE_RISING)
 8000f24:	f019 0f02 	tst.w	r9, #2
    tmp2 |= (uint8_t)IO_Pin;
 8000f28:	bf1c      	itt	ne
 8000f2a:	ea44 0408 	orrne.w	r4, r4, r8
 8000f2e:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 8000f30:	4638      	mov	r0, r7
 8000f32:	2116      	movs	r1, #22
 8000f34:	f000 fb0a 	bl	800154c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f38:	4622      	mov	r2, r4
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	2115      	movs	r1, #21
}
 8000f3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f42:	f000 bb03 	b.w	800154c <IOE_Write>

08000f46 <stmpe811_IO_EnablePinIT>:
{
 8000f46:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f48:	b2c4      	uxtb	r4, r0
{
 8000f4a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	210c      	movs	r1, #12
 8000f50:	f000 fb16 	bl	8001580 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000f54:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f56:	b2c2      	uxtb	r2, r0
 8000f58:	210c      	movs	r1, #12
 8000f5a:	4620      	mov	r0, r4
}
 8000f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f60:	f000 baf4 	b.w	800154c <IOE_Write>

08000f64 <stmpe811_IO_Config>:
{
 8000f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f66:	460c      	mov	r4, r1
 8000f68:	4615      	mov	r5, r2
  switch(IO_Mode)
 8000f6a:	2a05      	cmp	r2, #5
 8000f6c:	d807      	bhi.n	8000f7e <stmpe811_IO_Config+0x1a>
 8000f6e:	e8df f002 	tbb	[pc, r2]
 8000f72:	0903      	.short	0x0903
 8000f74:	4b36240e 	.word	0x4b36240e
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f7ff ff1b 	bl	8000db4 <stmpe811_IO_InitPin>
}
 8000f7e:	4628      	mov	r0, r5
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f7ff ff15 	bl	8000db4 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8000f8a:	2500      	movs	r5, #0
    break;    
 8000f8c:	e7f7      	b.n	8000f7e <stmpe811_IO_Config+0x1a>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000f8e:	9001      	str	r0, [sp, #4]
 8000f90:	f7ff fe7c 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000f94:	9801      	ldr	r0, [sp, #4]
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff ffd5 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	9801      	ldr	r0, [sp, #4]
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff ff07 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8000fa6:	9801      	ldr	r0, [sp, #4]
 8000fa8:	2102      	movs	r1, #2
 8000faa:	f7ff fec0 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 8000fae:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fb0:	9801      	ldr	r0, [sp, #4]
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f7ff ff99 	bl	8000eea <stmpe811_IO_SetEdgeMode>
    break;
 8000fb8:	e7e7      	b.n	8000f8a <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fba:	9001      	str	r0, [sp, #4]
 8000fbc:	f7ff fe66 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fc0:	9801      	ldr	r0, [sp, #4]
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f7ff ffbf 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9801      	ldr	r0, [sp, #4]
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f7ff fef1 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 8000fd2:	9801      	ldr	r0, [sp, #4]
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	f7ff feaa 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fda:	2201      	movs	r2, #1
 8000fdc:	e7e8      	b.n	8000fb0 <stmpe811_IO_Config+0x4c>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fde:	9001      	str	r0, [sp, #4]
 8000fe0:	f7ff fe54 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fe4:	9801      	ldr	r0, [sp, #4]
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f7ff ffad 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fec:	9801      	ldr	r0, [sp, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fedf 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	9801      	ldr	r0, [sp, #4]
 8000ffa:	f7ff fe98 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8000ffe:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	f7ff fe83 	bl	8000d0c <stmpe811_SetITPolarity>
 8001006:	e7c0      	b.n	8000f8a <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8001008:	9001      	str	r0, [sp, #4]
 800100a:	f7ff fe3f 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800100e:	9801      	ldr	r0, [sp, #4]
 8001010:	4621      	mov	r1, r4
 8001012:	f7ff ff98 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8001016:	9801      	ldr	r0, [sp, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	4621      	mov	r1, r4
 800101c:	f7ff feca 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8001020:	2100      	movs	r1, #0
 8001022:	9801      	ldr	r0, [sp, #4]
 8001024:	f7ff fe83 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001028:	2104      	movs	r1, #4
 800102a:	e7e9      	b.n	8001000 <stmpe811_IO_Config+0x9c>

0800102c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800102c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800102e:	4c22      	ldr	r4, [pc, #136]	; (80010b8 <SPIx_Init+0x8c>)
{
 8001030:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001032:	4620      	mov	r0, r4
 8001034:	f003 fe9f 	bl	8004d76 <HAL_SPI_GetState>
 8001038:	2800      	cmp	r0, #0
 800103a:	d13b      	bne.n	80010b4 <SPIx_Init+0x88>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SPIx_Init+0x90>)
 800103e:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001040:	2318      	movs	r3, #24
 8001042:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8001044:	2307      	movs	r3, #7
 8001046:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001048:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800104c:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001050:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001052:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001056:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <SPIx_Init+0x94>)
 800105a:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800105c:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800105e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001060:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001062:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001064:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
 800106e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001070:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001078:	9002      	str	r0, [sp, #8]
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f042 0220 	orr.w	r2, r2, #32
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800108c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001090:	2302      	movs	r3, #2
 8001092:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001096:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001098:	2001      	movs	r0, #1
 800109a:	2305      	movs	r3, #5
 800109c:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80010a0:	a903      	add	r1, sp, #12
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <SPIx_Init+0x98>)
 80010a4:	f001 ff78 	bl	8002f98 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80010a8:	4620      	mov	r0, r4
}
 80010aa:	b008      	add	sp, #32
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 80010b0:	f003 baeb 	b.w	800468a <HAL_SPI_Init>
}
 80010b4:	b008      	add	sp, #32
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	20000280 	.word	0x20000280
 80010bc:	40015000 	.word	0x40015000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021400 	.word	0x40021400

080010c8 <SPIx_Write>:
{
 80010c8:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <SPIx_Write+0x28>)
{
 80010cc:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <SPIx_Write+0x2c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f10d 0106 	add.w	r1, sp, #6
 80010da:	f003 fb4e 	bl	800477a <HAL_SPI_Transmit>
  if(status != HAL_OK)
 80010de:	b120      	cbz	r0, 80010ea <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <SPIx_Write+0x2c>)
 80010e2:	f003 fb34 	bl	800474e <HAL_SPI_DeInit>
  SPIx_Init();
 80010e6:	f7ff ffa1 	bl	800102c <SPIx_Init>
}
 80010ea:	b003      	add	sp, #12
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	200000c0 	.word	0x200000c0
 80010f4:	20000280 	.word	0x20000280

080010f8 <I2Cx_Init>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fa:	4e35      	ldr	r6, [pc, #212]	; (80011d0 <I2Cx_Init+0xd8>)
{
 80010fc:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fe:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8001102:	f002 fc87 	bl	8003a14 <HAL_I2C_GetState>
 8001106:	4604      	mov	r4, r0
 8001108:	2800      	cmp	r0, #0
 800110a:	d15f      	bne.n	80011cc <I2Cx_Init+0xd4>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800110c:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <I2Cx_Init+0xdc>)
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <I2Cx_Init+0xe0>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001110:	4d32      	ldr	r5, [pc, #200]	; (80011dc <I2Cx_Init+0xe4>)
 8001112:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001114:	e9c6 2316 	strd	r2, r3, [r6, #88]	; 0x58
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.OwnAddress1      = 0;
 800111c:	e9c6 0018 	strd	r0, r0, [r6, #96]	; 0x60
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001120:	e9c6 301a 	strd	r3, r0, [r6, #104]	; 0x68
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001124:	e9c6 001c 	strd	r0, r0, [r6, #112]	; 0x70
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001128:	67b0      	str	r0, [r6, #120]	; 0x78
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800112a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	632b      	str	r3, [r5, #48]	; 0x30
 8001132:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800113c:	9001      	str	r0, [sp, #4]
 800113e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	632b      	str	r3, [r5, #48]	; 0x30
 8001146:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001148:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	2312      	movs	r3, #18
 8001158:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800115c:	2002      	movs	r0, #2
 800115e:	2304      	movs	r3, #4
 8001160:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001164:	a903      	add	r1, sp, #12
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <I2Cx_Init+0xe8>)
 8001168:	f001 ff16 	bl	8002f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001170:	a903      	add	r1, sp, #12
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <I2Cx_Init+0xec>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001174:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001176:	f001 ff0f 	bl	8002f98 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800117a:	9402      	str	r4, [sp, #8]
 800117c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800117e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001182:	642b      	str	r3, [r5, #64]	; 0x40
 8001184:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 800118e:	6a2b      	ldr	r3, [r5, #32]
 8001190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001194:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001196:	6a2b      	ldr	r3, [r5, #32]
 8001198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119c:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800119e:	4622      	mov	r2, r4
 80011a0:	210f      	movs	r1, #15
 80011a2:	2048      	movs	r0, #72	; 0x48
 80011a4:	f001 fc96 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011a8:	2048      	movs	r0, #72	; 0x48
 80011aa:	f001 fcc5 	bl	8002b38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011ae:	4622      	mov	r2, r4
 80011b0:	210f      	movs	r1, #15
 80011b2:	2049      	movs	r0, #73	; 0x49
 80011b4:	f001 fc8e 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80011b8:	2049      	movs	r0, #73	; 0x49
 80011ba:	f001 fcbd 	bl	8002b38 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80011be:	f106 0058 	add.w	r0, r6, #88	; 0x58
}
 80011c2:	b008      	add	sp, #32
 80011c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&I2cHandle);
 80011c8:	f002 b9ca 	b.w	8003560 <HAL_I2C_Init>
}
 80011cc:	b008      	add	sp, #32
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
 80011d0:	20000280 	.word	0x20000280
 80011d4:	40005c00 	.word	0x40005c00
 80011d8:	000186a0 	.word	0x000186a0
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800

080011e8 <I2Cx_Error>:
{
 80011e8:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <I2Cx_Error+0x10>)
 80011ec:	f002 fa61 	bl	80036b2 <HAL_I2C_DeInit>
}
 80011f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 80011f4:	f7ff bf80 	b.w	80010f8 <I2Cx_Init>
 80011f8:	200002d8 	.word	0x200002d8

080011fc <SPIx_WriteRead>:
{
 80011fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SPIx_WriteRead+0x38>)
{
 8001206:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <SPIx_WriteRead+0x3c>)
 8001210:	2301      	movs	r3, #1
 8001212:	f10d 0217 	add.w	r2, sp, #23
 8001216:	f10d 010f 	add.w	r1, sp, #15
 800121a:	f003 fb74 	bl	8004906 <HAL_SPI_TransmitReceive>
 800121e:	b120      	cbz	r0, 800122a <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <SPIx_WriteRead+0x3c>)
 8001222:	f003 fa94 	bl	800474e <HAL_SPI_DeInit>
  SPIx_Init();
 8001226:	f7ff ff01 	bl	800102c <SPIx_Init>
}
 800122a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800122e:	b007      	add	sp, #28
 8001230:	f85d fb04 	ldr.w	pc, [sp], #4
 8001234:	200000c0 	.word	0x200000c0
 8001238:	20000280 	.word	0x20000280

0800123c <BSP_LED_Init>:
{
 800123c:	b530      	push	{r4, r5, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8001240:	bb08      	cbnz	r0, 8001286 <BSP_LED_Init+0x4a>
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <BSP_LED_Init+0x68>)
 8001244:	9001      	str	r0, [sp, #4]
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001258:	4c13      	ldr	r4, [pc, #76]	; (80012a8 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800125c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001260:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001264:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001266:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800126e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001270:	2302      	movs	r3, #2
 8001272:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001274:	f001 fe90 	bl	8002f98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001278:	6860      	ldr	r0, [r4, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	4629      	mov	r1, r5
 800127e:	f001 ff77 	bl	8003170 <HAL_GPIO_WritePin>
}
 8001282:	b009      	add	sp, #36	; 0x24
 8001284:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001286:	2801      	cmp	r0, #1
 8001288:	d1e6      	bne.n	8001258 <BSP_LED_Init+0x1c>
 800128a:	2300      	movs	r3, #0
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <BSP_LED_Init+0x68>)
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	9b02      	ldr	r3, [sp, #8]
 80012a2:	e7d9      	b.n	8001258 <BSP_LED_Init+0x1c>
 80012a4:	40023800 	.word	0x40023800
 80012a8:	200000c0 	.word	0x200000c0
 80012ac:	08007910 	.word	0x08007910

080012b0 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <BSP_LED_Toggle+0x14>)
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <BSP_LED_Toggle+0x18>)
 80012b4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012b8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80012bc:	6858      	ldr	r0, [r3, #4]
 80012be:	f001 bf5c 	b.w	800317a <HAL_GPIO_TogglePin>
 80012c2:	bf00      	nop
 80012c4:	200000c0 	.word	0x200000c0
 80012c8:	08007910 	.word	0x08007910

080012cc <BSP_PB_Init>:
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80012d0:	b950      	cbnz	r0, 80012e8 <BSP_PB_Init+0x1c>
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <BSP_PB_Init+0x6c>)
 80012d4:	9000      	str	r0, [sp, #0]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 80012e8:	b971      	cbnz	r1, 8001308 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80012ea:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012f2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <BSP_PB_Init+0x70>)
 80012f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80012fc:	a901      	add	r1, sp, #4
 80012fe:	68c0      	ldr	r0, [r0, #12]
 8001300:	f001 fe4a 	bl	8002f98 <HAL_GPIO_Init>
}
 8001304:	b006      	add	sp, #24
 8001306:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001308:	2901      	cmp	r1, #1
 800130a:	d1fb      	bne.n	8001304 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800130c:	2400      	movs	r4, #0
 800130e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001312:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001318:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800131a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800131e:	a901      	add	r1, sp, #4
 8001320:	68c0      	ldr	r0, [r0, #12]
 8001322:	f001 fe39 	bl	8002f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001326:	4622      	mov	r2, r4
 8001328:	210f      	movs	r1, #15
 800132a:	2006      	movs	r0, #6
 800132c:	f001 fbd2 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001330:	2006      	movs	r0, #6
 8001332:	f001 fc01 	bl	8002b38 <HAL_NVIC_EnableIRQ>
}
 8001336:	e7e5      	b.n	8001304 <BSP_PB_Init+0x38>
 8001338:	40023800 	.word	0x40023800
 800133c:	200000c0 	.word	0x200000c0

08001340 <BSP_PB_GetState>:
{
 8001340:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <BSP_PB_GetState+0x14>)
 8001344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001348:	2101      	movs	r1, #1
 800134a:	68c0      	ldr	r0, [r0, #12]
 800134c:	f001 ff0a 	bl	8003164 <HAL_GPIO_ReadPin>
}
 8001350:	bd08      	pop	{r3, pc}
 8001352:	bf00      	nop
 8001354:	200000c0 	.word	0x200000c0

08001358 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <LCD_IO_Init+0xac>)
 800135c:	f893 50ac 	ldrb.w	r5, [r3, #172]	; 0xac
{
 8001360:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8001362:	2d00      	cmp	r5, #0
 8001364:	d14b      	bne.n	80013fe <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001366:	4c28      	ldr	r4, [pc, #160]	; (8001408 <LCD_IO_Init+0xb0>)
 8001368:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 800136a:	2601      	movs	r6, #1
 800136c:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
    LCD_WRX_GPIO_CLK_ENABLE();
 8001370:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001372:	4826      	ldr	r0, [pc, #152]	; (800140c <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6323      	str	r3, [r4, #48]	; 0x30
 800137a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800137c:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001384:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8001386:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001388:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800138e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001390:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001394:	f001 fe00 	bl	8002f98 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001398:	9501      	str	r5, [sp, #4]
 800139a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800139c:	481b      	ldr	r0, [pc, #108]	; (800140c <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6323      	str	r3, [r4, #48]	; 0x30
 80013a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013ae:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013b4:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013b8:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013bc:	f001 fdec 	bl	8002f98 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013c0:	9502      	str	r5, [sp, #8]
 80013c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6323      	str	r3, [r4, #48]	; 0x30
 80013cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013d2:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80013d4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013d6:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80013d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013da:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013de:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013e2:	f001 fdd9 	bl	8002f98 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <LCD_IO_Init+0xb8>)
 80013e8:	462a      	mov	r2, r5
 80013ea:	4621      	mov	r1, r4
 80013ec:	f001 fec0 	bl	8003170 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <LCD_IO_Init+0xb8>)
 80013f2:	4632      	mov	r2, r6
 80013f4:	4621      	mov	r1, r4
 80013f6:	f001 febb 	bl	8003170 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80013fa:	f7ff fe17 	bl	800102c <SPIx_Init>
  }
}
 80013fe:	b009      	add	sp, #36	; 0x24
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000280 	.word	0x20000280
 8001408:	40023800 	.word	0x40023800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40020800 	.word	0x40020800

08001414 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001414:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001416:	4d0b      	ldr	r5, [pc, #44]	; (8001444 <LCD_IO_WriteData+0x30>)
{
 8001418:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 800141a:	2201      	movs	r2, #1
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <LCD_IO_WriteData+0x34>)
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	f001 fea5 	bl	8003170 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4628      	mov	r0, r5
 800142c:	f001 fea0 	bl	8003170 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff fe49 	bl	80010c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001436:	4628      	mov	r0, r5
 8001438:	2201      	movs	r2, #1
}
 800143a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800143e:	2104      	movs	r1, #4
 8001440:	f001 be96 	b.w	8003170 <HAL_GPIO_WritePin>
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00

0800144c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800144c:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800144e:	4d0b      	ldr	r5, [pc, #44]	; (800147c <LCD_IO_WriteReg+0x30>)
{
 8001450:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 8001452:	2200      	movs	r2, #0
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <LCD_IO_WriteReg+0x34>)
 8001456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145a:	f001 fe89 	bl	8003170 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800145e:	2200      	movs	r2, #0
 8001460:	2104      	movs	r1, #4
 8001462:	4628      	mov	r0, r5
 8001464:	f001 fe84 	bl	8003170 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fe2d 	bl	80010c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800146e:	4628      	mov	r0, r5
 8001470:	2201      	movs	r2, #1
}
 8001472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001476:	2104      	movs	r1, #4
 8001478:	f001 be7a 	b.w	8003170 <HAL_GPIO_WritePin>
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00

08001484 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001486:	4605      	mov	r5, r0
 8001488:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <LCD_IO_ReadData+0x5c>)
 800148c:	2200      	movs	r2, #0
 800148e:	2104      	movs	r1, #4
 8001490:	f001 fe6e 	bl	8003170 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <LCD_IO_ReadData+0x60>)
 800149c:	f001 fe68 	bl	8003170 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80014a0:	4628      	mov	r0, r5
 80014a2:	f7ff fe11 	bl	80010c8 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <LCD_IO_ReadData+0x64>)
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <LCD_IO_ReadData+0x68>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4622      	mov	r2, r4
 80014ae:	a901      	add	r1, sp, #4
 80014b0:	f003 fb74 	bl	8004b9c <HAL_SPI_Receive>
  if(status != HAL_OK)
 80014b4:	b120      	cbz	r0, 80014c0 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <LCD_IO_ReadData+0x68>)
 80014b8:	f003 f949 	bl	800474e <HAL_SPI_DeInit>
  SPIx_Init();
 80014bc:	f7ff fdb6 	bl	800102c <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80014c2:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ca:	f001 fe51 	bl	8003170 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <LCD_IO_ReadData+0x5c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	2104      	movs	r1, #4
 80014d4:	f001 fe4c 	bl	8003170 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80014d8:	4620      	mov	r0, r4
 80014da:	b003      	add	sp, #12
 80014dc:	bd30      	pop	{r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	200000c0 	.word	0x200000c0
 80014ec:	20000280 	.word	0x20000280

080014f0 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80014f0:	f001 baca 	b.w	8002a88 <HAL_Delay>

080014f4 <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 80014f4:	f7ff be00 	b.w	80010f8 <I2Cx_Init>

080014f8 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 80014fc:	2400      	movs	r4, #0
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <IOE_ITConfig+0x4c>)
 8001500:	9400      	str	r4, [sp, #0]
 8001502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001504:	4810      	ldr	r0, [pc, #64]	; (8001548 <IOE_ITConfig+0x50>)
  STMPE811_INT_CLK_ENABLE();
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800151e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001522:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001524:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001528:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800152a:	f001 fd35 	bl	8002f98 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800152e:	4622      	mov	r2, r4
 8001530:	210f      	movs	r1, #15
 8001532:	2028      	movs	r0, #40	; 0x28
 8001534:	f001 face 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f001 fafd 	bl	8002b38 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 800153e:	b006      	add	sp, #24
 8001540:	bd10      	pop	{r4, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800154c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <IOE_Write+0x2c>)
 8001550:	f88d 2017 	strb.w	r2, [sp, #23]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	f10d 0217 	add.w	r2, sp, #23
 800155c:	2301      	movs	r3, #1
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	460a      	mov	r2, r1
 8001564:	4601      	mov	r1, r0
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <IOE_Write+0x30>)
 8001568:	f002 f8bc 	bl	80036e4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800156c:	b108      	cbz	r0, 8001572 <IOE_Write+0x26>
    I2Cx_Error();
 800156e:	f7ff fe3b 	bl	80011e8 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8001572:	b007      	add	sp, #28
 8001574:	f85d fb04 	ldr.w	pc, [sp], #4
 8001578:	200000c0 	.word	0x200000c0
 800157c:	200002d8 	.word	0x200002d8

08001580 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <IOE_Read+0x34>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	9302      	str	r3, [sp, #8]
{
 800158e:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001590:	2301      	movs	r3, #1
 8001592:	f10d 0117 	add.w	r1, sp, #23
 8001596:	9100      	str	r1, [sp, #0]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	4601      	mov	r1, r0
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <IOE_Read+0x38>)
 800159e:	f002 f931 	bl	8003804 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015a2:	b108      	cbz	r0, 80015a8 <IOE_Read+0x28>
    I2Cx_Error();
 80015a4:	f7ff fe20 	bl	80011e8 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 80015a8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80015ac:	b007      	add	sp, #28
 80015ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80015b2:	bf00      	nop
 80015b4:	200000c0 	.word	0x200000c0
 80015b8:	200002d8 	.word	0x200002d8

080015bc <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80015bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80015be:	4c09      	ldr	r4, [pc, #36]	; (80015e4 <IOE_ReadMultiple+0x28>)
 80015c0:	6924      	ldr	r4, [r4, #16]
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015c8:	460a      	mov	r2, r1
 80015ca:	2301      	movs	r3, #1
 80015cc:	4601      	mov	r1, r0
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <IOE_ReadMultiple+0x2c>)
 80015d0:	f002 f918 	bl	8003804 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80015d4:	b110      	cbz	r0, 80015dc <IOE_ReadMultiple+0x20>
    I2Cx_Error();
 80015d6:	f7ff fe07 	bl	80011e8 <I2Cx_Error>
    return 1;
 80015da:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 80015dc:	b280      	uxth	r0, r0
 80015de:	b004      	add	sp, #16
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	200002d8 	.word	0x200002d8

080015ec <IOE_Delay>:
 80015ec:	f001 ba4c 	b.w	8002a88 <HAL_Delay>

080015f0 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80015f4:	4c17      	ldr	r4, [pc, #92]	; (8001654 <GYRO_IO_Init+0x64>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <GYRO_IO_Init+0x68>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 80015f8:	2500      	movs	r5, #0
 80015fa:	9501      	str	r5, [sp, #4]
 80015fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6323      	str	r3, [r4, #48]	; 0x30
 8001604:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2701      	movs	r7, #1
 800160c:	2602      	movs	r6, #2
  GYRO_CS_GPIO_CLK_ENABLE();  
 800160e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001610:	a903      	add	r1, sp, #12
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001612:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	e9cd 6703 	strd	r6, r7, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001618:	e9cd 5705 	strd	r5, r7, [sp, #20]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800161c:	f001 fcbc 	bl	8002f98 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001620:	463a      	mov	r2, r7
 8001622:	4631      	mov	r1, r6
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <GYRO_IO_Init+0x68>)
 8001626:	f001 fda3 	bl	8003170 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800162a:	9502      	str	r5, [sp, #8]
 800162c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <GYRO_IO_Init+0x6c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 8001630:	433b      	orrs	r3, r7
 8001632:	6323      	str	r3, [r4, #48]	; 0x30
 8001634:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001636:	403b      	ands	r3, r7
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800163c:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800163e:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001640:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001644:	e9cd 5605 	strd	r5, r6, [sp, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001648:	f001 fca6 	bl	8002f98 <HAL_GPIO_Init>

  SPIx_Init();
 800164c:	f7ff fcee 	bl	800102c <SPIx_Init>
}
 8001650:	b009      	add	sp, #36	; 0x24
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800
 800165c:	40020000 	.word	0x40020000

08001660 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001660:	2a01      	cmp	r2, #1
{
 8001662:	b570      	push	{r4, r5, r6, lr}
 8001664:	460e      	mov	r6, r1
 8001666:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001668:	bf88      	it	hi
 800166a:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800166e:	480c      	ldr	r0, [pc, #48]	; (80016a0 <GYRO_IO_Write+0x40>)
{
 8001670:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 8001672:	2102      	movs	r1, #2
 8001674:	2200      	movs	r2, #0
 8001676:	f001 fd7b 	bl	8003170 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800167a:	4630      	mov	r0, r6
 800167c:	f7ff fdbe 	bl	80011fc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001680:	442c      	add	r4, r5
 8001682:	42a5      	cmp	r5, r4
 8001684:	d106      	bne.n	8001694 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 8001686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <GYRO_IO_Write+0x40>)
 800168c:	2201      	movs	r2, #1
 800168e:	2102      	movs	r1, #2
 8001690:	f001 bd6e 	b.w	8003170 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8001694:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001698:	f7ff fdb0 	bl	80011fc <SPIx_WriteRead>
    pBuffer++;
 800169c:	e7f1      	b.n	8001682 <GYRO_IO_Write+0x22>
 800169e:	bf00      	nop
 80016a0:	40020800 	.word	0x40020800

080016a4 <GYRO_IO_Read>:
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80016a4:	2a01      	cmp	r2, #1
{  
 80016a6:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80016a8:	bf8c      	ite	hi
 80016aa:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80016ae:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 80016b2:	4606      	mov	r6, r0
 80016b4:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <GYRO_IO_Read+0x44>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	2102      	movs	r1, #2
 80016bc:	f001 fd58 	bl	8003170 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fd9b 	bl	80011fc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80016c6:	4435      	add	r5, r6
 80016c8:	42ae      	cmp	r6, r5
 80016ca:	d106      	bne.n	80016da <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 80016cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <GYRO_IO_Read+0x44>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	2102      	movs	r1, #2
 80016d6:	f001 bd4b 	b.w	8003170 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fd8e 	bl	80011fc <SPIx_WriteRead>
 80016e0:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 80016e4:	e7f0      	b.n	80016c8 <GYRO_IO_Read+0x24>
 80016e6:	bf00      	nop
 80016e8:	40020800 	.word	0x40020800

080016ec <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80016ec:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80016ee:	4c0d      	ldr	r4, [pc, #52]	; (8001724 <BSP_GYRO_Init+0x38>)
 80016f0:	68a3      	ldr	r3, [r4, #8]
 80016f2:	4798      	blx	r3
 80016f4:	28d4      	cmp	r0, #212	; 0xd4
 80016f6:	d10f      	bne.n	8001718 <BSP_GYRO_Init+0x2c>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80016f8:	4d0b      	ldr	r5, [pc, #44]	; (8001728 <BSP_GYRO_Init+0x3c>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80016fa:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 80016fc:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 80016fe:	f241 003f 	movw	r0, #4159	; 0x103f
 8001702:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	2000      	movs	r0, #0
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800170c:	682b      	ldr	r3, [r5, #0]
 800170e:	2010      	movs	r0, #16
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	4798      	blx	r3

    ret = GYRO_OK;
 8001714:	2000      	movs	r0, #0

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
}
 8001716:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001718:	68a3      	ldr	r3, [r4, #8]
 800171a:	4798      	blx	r3
 800171c:	28d5      	cmp	r0, #213	; 0xd5
 800171e:	d0eb      	beq.n	80016f8 <BSP_GYRO_Init+0xc>
  uint8_t ret = GYRO_ERROR;
 8001720:	2001      	movs	r0, #1
 8001722:	e7f8      	b.n	8001716 <BSP_GYRO_Init+0x2a>
 8001724:	20000038 	.word	0x20000038
 8001728:	20000330 	.word	0x20000330

0800172c <BSP_GYRO_Reset>:
/**
  * @brief  Reboot memory content of Gyroscope.
  */
void BSP_GYRO_Reset(void)
{
  if(GyroscopeDrv->Reset != NULL)
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <BSP_GYRO_Reset+0xc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	b103      	cbz	r3, 8001736 <BSP_GYRO_Reset+0xa>
  {
    GyroscopeDrv->Reset();
 8001734:	4718      	bx	r3
  }
}
 8001736:	4770      	bx	lr
 8001738:	20000330 	.word	0x20000330

0800173c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <BSP_GYRO_GetXYZ+0xc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	b103      	cbz	r3, 8001746 <BSP_GYRO_GetXYZ+0xa>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001744:	4718      	bx	r3
  }
}
 8001746:	4770      	bx	lr
 8001748:	20000330 	.word	0x20000330

0800174c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800174c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001750:	4c15      	ldr	r4, [pc, #84]	; (80017a8 <FillBuffer+0x5c>)
{
 8001752:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8001756:	4616      	mov	r6, r2
 8001758:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800175a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800175e:	2300      	movs	r3, #0
 8001760:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001766:	60e3      	str	r3, [r4, #12]
{
 8001768:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <FillBuffer+0x60>)
 800176c:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800176e:	4620      	mov	r0, r4
{
 8001770:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001772:	f001 fb06 	bl	8002d82 <HAL_DMA2D_Init>
 8001776:	b998      	cbnz	r0, 80017a0 <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001778:	4641      	mov	r1, r8
 800177a:	4620      	mov	r0, r4
 800177c:	f001 fbc8 	bl	8002f10 <HAL_DMA2D_ConfigLayer>
 8001780:	b970      	cbnz	r0, 80017a0 <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001782:	9700      	str	r7, [sp, #0]
 8001784:	4633      	mov	r3, r6
 8001786:	462a      	mov	r2, r5
 8001788:	4649      	mov	r1, r9
 800178a:	4620      	mov	r0, r4
 800178c:	f001 fb25 	bl	8002dda <HAL_DMA2D_Start>
 8001790:	b930      	cbnz	r0, 80017a0 <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001792:	210a      	movs	r1, #10
 8001794:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001796:	b003      	add	sp, #12
 8001798:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800179c:	f001 bb37 	b.w	8002e0e <HAL_DMA2D_PollForTransfer>
}
 80017a0:	b003      	add	sp, #12
 80017a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017a6:	bf00      	nop
 80017a8:	20000334 	.word	0x20000334
 80017ac:	4002b000 	.word	0x4002b000

080017b0 <BSP_LCD_GetXSize>:
{
 80017b0:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 80017b2:	4b02      	ldr	r3, [pc, #8]	; (80017bc <BSP_LCD_GetXSize+0xc>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	4798      	blx	r3
}
 80017ba:	bd08      	pop	{r3, pc}
 80017bc:	20000334 	.word	0x20000334

080017c0 <BSP_LCD_GetYSize>:
{
 80017c0:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 80017c2:	4b02      	ldr	r3, [pc, #8]	; (80017cc <BSP_LCD_GetYSize+0xc>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	4798      	blx	r3
}
 80017ca:	bd08      	pop	{r3, pc}
 80017cc:	20000334 	.word	0x20000334

080017d0 <BSP_LCD_LayerDefaultInit>:
{     
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 80017d4:	2400      	movs	r4, #0
{     
 80017d6:	460e      	mov	r6, r1
 80017d8:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 80017da:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80017dc:	f7ff ffe8 	bl	80017b0 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 80017e0:	e9cd 0402 	strd	r0, r4, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80017e4:	f7ff ffec 	bl	80017c0 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 80017e8:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 80017ea:	e9cd 3406 	strd	r3, r4, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80017f2:	2307      	movs	r3, #7
 80017f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80017f8:	e9cd 0404 	strd	r0, r4, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 80017fc:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Backcolor.Blue = 0;
 80017fe:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8001802:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001806:	f7ff ffd3 	bl	80017b0 <BSP_LCD_GetXSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800180a:	4c0f      	ldr	r4, [pc, #60]	; (8001848 <BSP_LCD_LayerDefaultInit+0x78>)
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800180c:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800180e:	f7ff ffd7 	bl	80017c0 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001812:	f104 0644 	add.w	r6, r4, #68	; 0x44
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001816:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001818:	462a      	mov	r2, r5
 800181a:	a901      	add	r1, sp, #4
 800181c:	4630      	mov	r0, r6
 800181e:	f002 f9ef 	bl	8003c00 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001822:	200c      	movs	r0, #12
 8001824:	fb00 4005 	mla	r0, r0, r5, r4
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <BSP_LCD_LayerDefaultInit+0x7c>)
 8001832:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001836:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800183a:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  HAL_LTDC_EnableDither(&LtdcHandler);
 800183e:	4630      	mov	r0, r6
 8001840:	f002 fa0c 	bl	8003c5c <HAL_LTDC_EnableDither>
}
 8001844:	b00e      	add	sp, #56	; 0x38
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	20000334 	.word	0x20000334
 800184c:	200000d4 	.word	0x200000d4

08001850 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <BSP_LCD_SelectLayer+0x8>)
 8001852:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 8001856:	4770      	bx	lr
 8001858:	20000334 	.word	0x20000334

0800185c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <BSP_LCD_SetTextColor+0x14>)
 800185e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001862:	210c      	movs	r1, #12
 8001864:	fb01 3302 	mla	r3, r1, r2, r3
 8001868:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000334 	.word	0x20000334

08001874 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <BSP_LCD_SetBackColor+0x14>)
 8001876:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800187a:	210c      	movs	r1, #12
 800187c:	fb01 3302 	mla	r3, r1, r2, r3
 8001880:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000334 	.word	0x20000334

0800188c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <BSP_LCD_SetFont+0x14>)
 800188e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001892:	210c      	movs	r1, #12
 8001894:	fb01 3302 	mla	r3, r1, r2, r3
 8001898:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000334 	.word	0x20000334

080018a4 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <BSP_LCD_GetFont+0x14>)
 80018a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018aa:	210c      	movs	r1, #12
 80018ac:	fb01 3302 	mla	r3, r1, r2, r3
}
 80018b0:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000334 	.word	0x20000334

080018bc <BSP_LCD_Clear>:
{ 
 80018bc:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <BSP_LCD_Clear+0x38>)
 80018c0:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 80018c4:	2234      	movs	r2, #52	; 0x34
 80018c6:	fb02 3305 	mla	r3, r2, r5, r3
{ 
 80018ca:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018cc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80018d0:	9103      	str	r1, [sp, #12]
{ 
 80018d2:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018d4:	f7ff ff6c 	bl	80017b0 <BSP_LCD_GetXSize>
 80018d8:	9002      	str	r0, [sp, #8]
 80018da:	f7ff ff71 	bl	80017c0 <BSP_LCD_GetYSize>
 80018de:	4603      	mov	r3, r0
 80018e0:	2000      	movs	r0, #0
 80018e2:	9000      	str	r0, [sp, #0]
 80018e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80018e8:	9401      	str	r4, [sp, #4]
 80018ea:	4628      	mov	r0, r5
 80018ec:	f7ff ff2e 	bl	800174c <FillBuffer>
}
 80018f0:	b005      	add	sp, #20
 80018f2:	bd30      	pop	{r4, r5, pc}
 80018f4:	20000334 	.word	0x20000334

080018f8 <BSP_LCD_DrawHLine>:
{
 80018f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80018fc:	4c11      	ldr	r4, [pc, #68]	; (8001944 <BSP_LCD_DrawHLine+0x4c>)
{
 80018fe:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001900:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
{
 8001904:	460e      	mov	r6, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001906:	2134      	movs	r1, #52	; 0x34
 8001908:	fb01 4303 	mla	r3, r1, r3, r4
{
 800190c:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800190e:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 8001912:	f7ff ff4d 	bl	80017b0 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001916:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 800191a:	9a03      	ldr	r2, [sp, #12]
 800191c:	230c      	movs	r3, #12
 800191e:	fb03 4407 	mla	r4, r3, r7, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001922:	fb00 5506 	mla	r5, r0, r6, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001926:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8001934:	2301      	movs	r3, #1
 8001936:	4638      	mov	r0, r7
 8001938:	f7ff ff08 	bl	800174c <FillBuffer>
}
 800193c:	b004      	add	sp, #16
 800193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001942:	bf00      	nop
 8001944:	20000334 	.word	0x20000334

08001948 <BSP_LCD_DrawVLine>:
{
 8001948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800194c:	4c14      	ldr	r4, [pc, #80]	; (80019a0 <BSP_LCD_DrawVLine+0x58>)
{
 800194e:	b085      	sub	sp, #20
 8001950:	4688      	mov	r8, r1
 8001952:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001954:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001958:	2134      	movs	r1, #52	; 0x34
 800195a:	fb01 4202 	mla	r2, r1, r2, r4
{
 800195e:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001960:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8001964:	f7ff ff24 	bl	80017b0 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001968:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800196c:	4681      	mov	r9, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800196e:	f7ff ff1f 	bl	80017b0 <BSP_LCD_GetXSize>
 8001972:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001976:	9b03      	ldr	r3, [sp, #12]
 8001978:	210c      	movs	r1, #12
 800197a:	fb01 4402 	mla	r4, r1, r2, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800197e:	fb09 5508 	mla	r5, r9, r8, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001982:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8001986:	9201      	str	r2, [sp, #4]
 8001988:	3801      	subs	r0, #1
 800198a:	9000      	str	r0, [sp, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
 8001992:	4630      	mov	r0, r6
 8001994:	f7ff feda 	bl	800174c <FillBuffer>
}
 8001998:	b005      	add	sp, #20
 800199a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800199e:	bf00      	nop
 80019a0:	20000334 	.word	0x20000334

080019a4 <BSP_LCD_DrawRect>:
{
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	461e      	mov	r6, r3
 80019a8:	460d      	mov	r5, r1
 80019aa:	4604      	mov	r4, r0
 80019ac:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80019ae:	f7ff ffa3 	bl	80018f8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80019b2:	19a9      	adds	r1, r5, r6
 80019b4:	463a      	mov	r2, r7
 80019b6:	4620      	mov	r0, r4
 80019b8:	b289      	uxth	r1, r1
 80019ba:	f7ff ff9d 	bl	80018f8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80019be:	4632      	mov	r2, r6
 80019c0:	4629      	mov	r1, r5
 80019c2:	4620      	mov	r0, r4
 80019c4:	f7ff ffc0 	bl	8001948 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80019c8:	19e0      	adds	r0, r4, r7
 80019ca:	4632      	mov	r2, r6
 80019cc:	4629      	mov	r1, r5
 80019ce:	b280      	uxth	r0, r0
}
 80019d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80019d4:	f7ff bfb8 	b.w	8001948 <BSP_LCD_DrawVLine>

080019d8 <BSP_LCD_DrawBitmap>:
{
 80019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 80019dc:	7ad3      	ldrb	r3, [r2, #11]
 80019de:	f892 a00a 	ldrb.w	sl, [r2, #10]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80019e2:	7c97      	ldrb	r7, [r2, #18]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80019e4:	7d96      	ldrb	r6, [r2, #22]
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 80019e6:	f892 901c 	ldrb.w	r9, [r2, #28]
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80019ea:	4d40      	ldr	r5, [pc, #256]	; (8001aec <BSP_LCD_DrawBitmap+0x114>)
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 80019ec:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
 80019f0:	7b13      	ldrb	r3, [r2, #12]
 80019f2:	eb0a 4a03 	add.w	sl, sl, r3, lsl #16
 80019f6:	7b53      	ldrb	r3, [r2, #13]
 80019f8:	eb0a 6a03 	add.w	sl, sl, r3, lsl #24
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80019fc:	7cd3      	ldrb	r3, [r2, #19]
 80019fe:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8001a02:	7d13      	ldrb	r3, [r2, #20]
 8001a04:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 8001a08:	7d53      	ldrb	r3, [r2, #21]
 8001a0a:	eb07 6703 	add.w	r7, r7, r3, lsl #24
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a0e:	7dd3      	ldrb	r3, [r2, #23]
 8001a10:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8001a14:	7e13      	ldrb	r3, [r2, #24]
 8001a16:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8001a1a:	7e53      	ldrb	r3, [r2, #25]
 8001a1c:	eb06 6603 	add.w	r6, r6, r3, lsl #24
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a20:	7f53      	ldrb	r3, [r2, #29]
 8001a22:	eb09 2903 	add.w	r9, r9, r3, lsl #8
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a26:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
 8001a2a:	4614      	mov	r4, r2
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a2c:	2234      	movs	r2, #52	; 0x34
 8001a2e:	fb02 5303 	mla	r3, r2, r3, r5
{
 8001a32:	b085      	sub	sp, #20
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a38:	9303      	str	r3, [sp, #12]
{
 8001a3a:	4688      	mov	r8, r1
 8001a3c:	4683      	mov	fp, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a3e:	f7ff feb7 	bl	80017b0 <BSP_LCD_GetXSize>
 8001a42:	9b03      	ldr	r3, [sp, #12]
 8001a44:	fb08 b000 	mla	r0, r8, r0, fp
 8001a48:	eb03 0880 	add.w	r8, r3, r0, lsl #2
  if ((bitpixel/8) == 4)
 8001a4c:	f1a9 0320 	sub.w	r3, r9, #32
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d91b      	bls.n	8001a8c <BSP_LCD_DrawBitmap+0xb4>
  else if ((bitpixel/8) == 2)
 8001a54:	f1a9 0310 	sub.w	r3, r9, #16
    inputcolormode = CM_RGB888;
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	bf34      	ite	cc
 8001a5c:	f04f 0b02 	movcc.w	fp, #2
 8001a60:	f04f 0b01 	movcs.w	fp, #1
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001a64:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8001a68:	fb07 f909 	mul.w	r9, r7, r9
 8001a6c:	1e72      	subs	r2, r6, #1
 8001a6e:	fb09 aa02 	mla	sl, r9, r2, sl
  pBmp -= width*(bitpixel/8);
 8001a72:	f1c9 0300 	rsb	r3, r9, #0
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
  
  Dma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001a76:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001aec <BSP_LCD_DrawBitmap+0x114>
  pBmp -= width*(bitpixel/8);
 8001a7a:	9303      	str	r3, [sp, #12]
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001a7c:	4454      	add	r4, sl
  for(index=0; index < height; index++)
 8001a7e:	f04f 0a00 	mov.w	sl, #0
 8001a82:	45b2      	cmp	sl, r6
 8001a84:	d105      	bne.n	8001a92 <BSP_LCD_DrawBitmap+0xba>
}
 8001a86:	b005      	add	sp, #20
 8001a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inputcolormode = CM_ARGB8888;
 8001a8c:	f04f 0b00 	mov.w	fp, #0
 8001a90:	e7e8      	b.n	8001a64 <BSP_LCD_DrawBitmap+0x8c>
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a98:	e9c5 2301 	strd	r2, r3, [r5, #4]
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 8001a9c:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  Dma2dHandler.Init.OutputOffset = 0;     
 8001aa0:	60eb      	str	r3, [r5, #12]
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001aa2:	632b      	str	r3, [r5, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001aa4:	22ff      	movs	r2, #255	; 0xff
  Dma2dHandler.Instance = DMA2D; 
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <BSP_LCD_DrawBitmap+0x118>)
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001aa8:	636a      	str	r2, [r5, #52]	; 0x34
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001aaa:	4648      	mov	r0, r9
  Dma2dHandler.Instance = DMA2D; 
 8001aac:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001aae:	f001 f968 	bl	8002d82 <HAL_DMA2D_Init>
 8001ab2:	b988      	cbnz	r0, 8001ad8 <BSP_LCD_DrawBitmap+0x100>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4648      	mov	r0, r9
 8001ab8:	f001 fa2a 	bl	8002f10 <HAL_DMA2D_ConfigLayer>
 8001abc:	b960      	cbnz	r0, 8001ad8 <BSP_LCD_DrawBitmap+0x100>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4642      	mov	r2, r8
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	4648      	mov	r0, r9
 8001aca:	f001 f986 	bl	8002dda <HAL_DMA2D_Start>
 8001ace:	b918      	cbnz	r0, 8001ad8 <BSP_LCD_DrawBitmap+0x100>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	f001 f99b 	bl	8002e0e <HAL_DMA2D_PollForTransfer>
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001ad8:	f7ff fe6a 	bl	80017b0 <BSP_LCD_GetXSize>
  pBmp -= width*(bitpixel/8);
 8001adc:	9b03      	ldr	r3, [sp, #12]
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001ade:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  pBmp -= width*(bitpixel/8);
 8001ae2:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 8001ae4:	f10a 0a01 	add.w	sl, sl, #1
 8001ae8:	e7cb      	b.n	8001a82 <BSP_LCD_DrawBitmap+0xaa>
 8001aea:	bf00      	nop
 8001aec:	20000334 	.word	0x20000334
 8001af0:	4002b000 	.word	0x4002b000

08001af4 <BSP_LCD_FillRect>:
{
 8001af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001af8:	4c18      	ldr	r4, [pc, #96]	; (8001b5c <BSP_LCD_FillRect+0x68>)
 8001afa:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
 8001afe:	f04f 0a0c 	mov.w	sl, #12
{
 8001b02:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b04:	fb0a 4206 	mla	r2, sl, r6, r4
{
 8001b08:	b085      	sub	sp, #20
 8001b0a:	4605      	mov	r5, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b0c:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
{
 8001b10:	9303      	str	r3, [sp, #12]
 8001b12:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b14:	f7ff fea2 	bl	800185c <BSP_LCD_SetTextColor>
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b18:	2234      	movs	r2, #52	; 0x34
 8001b1a:	fb02 4606 	mla	r6, r2, r6, r4
 8001b1e:	f8d6 80a0 	ldr.w	r8, [r6, #160]	; 0xa0
 8001b22:	f7ff fe45 	bl	80017b0 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b26:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b2a:	4683      	mov	fp, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b2c:	f7ff fe40 	bl	80017b0 <BSP_LCD_GetXSize>
 8001b30:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001b34:	9b03      	ldr	r3, [sp, #12]
 8001b36:	fb0a 4402 	mla	r4, sl, r2, r4
 8001b3a:	1bc0      	subs	r0, r0, r7
 8001b3c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8001b40:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b42:	fb0b 5509 	mla	r5, fp, r9, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b46:	9000      	str	r0, [sp, #0]
 8001b48:	463a      	mov	r2, r7
 8001b4a:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f7ff fdfc 	bl	800174c <FillBuffer>
}
 8001b54:	b005      	add	sp, #20
 8001b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000334 	.word	0x20000334

08001b60 <BSP_LCD_ClearStringLine>:
{
 8001b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001b62:	4c15      	ldr	r4, [pc, #84]	; (8001bb8 <BSP_LCD_ClearStringLine+0x58>)
 8001b64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001b68:	250c      	movs	r5, #12
 8001b6a:	fb05 4303 	mla	r3, r5, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001b6e:	e9d3 623b 	ldrd	r6, r2, [r3, #236]	; 0xec
 8001b72:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7a:	88db      	ldrh	r3, [r3, #6]
 8001b7c:	fb13 f000 	smulbb	r0, r3, r0
 8001b80:	b281      	uxth	r1, r0
 8001b82:	9101      	str	r1, [sp, #4]
 8001b84:	f7ff fe14 	bl	80017b0 <BSP_LCD_GetXSize>
 8001b88:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001b8c:	9901      	ldr	r1, [sp, #4]
 8001b8e:	fb05 4303 	mla	r3, r5, r3, r4
 8001b92:	b282      	uxth	r2, r0
 8001b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b98:	2000      	movs	r0, #0
 8001b9a:	88db      	ldrh	r3, [r3, #6]
 8001b9c:	f7ff ffaa 	bl	8001af4 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001ba0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001ba4:	fb05 4403 	mla	r4, r5, r3, r4
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001ba8:	4630      	mov	r0, r6
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001baa:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
}
 8001bae:	b002      	add	sp, #8
 8001bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001bb4:	f7ff be52 	b.w	800185c <BSP_LCD_SetTextColor>
 8001bb8:	20000334 	.word	0x20000334

08001bbc <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 8001bbc:	ee07 3a90 	vmov	s15, r3
{
 8001bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rad2 = YRadius;
 8001bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8001bc8:	ee07 2a90 	vmov	s15, r2
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8001bd0:	ed2d 8b02 	vpush	{d8}
  K = (float)(rad2/rad1);
 8001bd4:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001bd8:	f1c2 0401 	rsb	r4, r2, #1
{
 8001bdc:	b083      	sub	sp, #12
 8001bde:	4680      	mov	r8, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001be0:	425d      	negs	r5, r3
 8001be2:	0064      	lsls	r4, r4, #1
 8001be4:	2600      	movs	r6, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1));
 8001be6:	b28f      	uxth	r7, r1
 8001be8:	fa17 f185 	uxtah	r1, r7, r5
 8001bec:	b289      	uxth	r1, r1
 8001bee:	fa1f f985 	uxth.w	r9, r5
 8001bf2:	ee07 6a90 	vmov	s15, r6
 8001bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	eba8 0002 	sub.w	r0, r8, r2
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	3201      	adds	r2, #1
 8001c10:	b280      	uxth	r0, r0
 8001c12:	b292      	uxth	r2, r2
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9000      	str	r0, [sp, #0]
 8001c18:	f7ff fe6e 	bl	80018f8 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1));
 8001c1c:	eba7 0109 	sub.w	r1, r7, r9
 8001c20:	9a01      	ldr	r2, [sp, #4]
 8001c22:	9800      	ldr	r0, [sp, #0]
 8001c24:	b289      	uxth	r1, r1
 8001c26:	f7ff fe67 	bl	80018f8 <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 8001c2a:	42a6      	cmp	r6, r4
 8001c2c:	db16      	blt.n	8001c5c <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 8001c2e:	3601      	adds	r6, #1
 8001c30:	eb04 0346 	add.w	r3, r4, r6, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8001c34:	42ee      	cmn	r6, r5
      err += ++x*2+1;
 8001c36:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8001c3a:	d102      	bne.n	8001c42 <BSP_LCD_FillEllipse+0x86>
 8001c3c:	42a5      	cmp	r5, r4
 8001c3e:	db02      	blt.n	8001c46 <BSP_LCD_FillEllipse+0x8a>
 8001c40:	2400      	movs	r4, #0
    if (e2 > y) err += ++y*2+1;
 8001c42:	42a5      	cmp	r5, r4
 8001c44:	da0c      	bge.n	8001c60 <BSP_LCD_FillEllipse+0xa4>
 8001c46:	3501      	adds	r5, #1
 8001c48:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8001c4c:	1c5c      	adds	r4, r3, #1
  while (y <= 0);
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	ddca      	ble.n	8001be8 <BSP_LCD_FillEllipse+0x2c>
}
 8001c52:	b003      	add	sp, #12
 8001c54:	ecbd 8b02 	vpop	{d8}
 8001c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	e7f0      	b.n	8001c42 <BSP_LCD_FillEllipse+0x86>
 8001c60:	461c      	mov	r4, r3
 8001c62:	e7f4      	b.n	8001c4e <BSP_LCD_FillEllipse+0x92>

08001c64 <BSP_LCD_MspInit>:
{
 8001c64:	b530      	push	{r4, r5, lr}
 8001c66:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c6a:	4d4a      	ldr	r5, [pc, #296]	; (8001d94 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c6c:	484a      	ldr	r0, [pc, #296]	; (8001d98 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001c6e:	4c4b      	ldr	r4, [pc, #300]	; (8001d9c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c70:	2200      	movs	r2, #0
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c76:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001c7a:	6459      	str	r1, [r3, #68]	; 0x44
 8001c7c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c7e:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001c82:	9101      	str	r1, [sp, #4]
 8001c84:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001c86:	9202      	str	r2, [sp, #8]
 8001c88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001c8e:	6319      	str	r1, [r3, #48]	; 0x30
 8001c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c92:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001c96:	9102      	str	r1, [sp, #8]
 8001c98:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	9203      	str	r2, [sp, #12]
 8001c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9e:	f041 0101 	orr.w	r1, r1, #1
 8001ca2:	6319      	str	r1, [r3, #48]	; 0x30
 8001ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca6:	f001 0101 	and.w	r1, r1, #1
 8001caa:	9103      	str	r1, [sp, #12]
 8001cac:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	9204      	str	r2, [sp, #16]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb2:	f041 0102 	orr.w	r1, r1, #2
 8001cb6:	6319      	str	r1, [r3, #48]	; 0x30
 8001cb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cba:	f001 0102 	and.w	r1, r1, #2
 8001cbe:	9104      	str	r1, [sp, #16]
 8001cc0:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	9205      	str	r2, [sp, #20]
 8001cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc6:	f041 0104 	orr.w	r1, r1, #4
 8001cca:	6319      	str	r1, [r3, #48]	; 0x30
 8001ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cce:	f001 0104 	and.w	r1, r1, #4
 8001cd2:	9105      	str	r1, [sp, #20]
 8001cd4:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	9206      	str	r2, [sp, #24]
 8001cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cda:	f041 0108 	orr.w	r1, r1, #8
 8001cde:	6319      	str	r1, [r3, #48]	; 0x30
 8001ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce2:	f001 0108 	and.w	r1, r1, #8
 8001ce6:	9106      	str	r1, [sp, #24]
 8001ce8:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cea:	9207      	str	r2, [sp, #28]
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	f041 0120 	orr.w	r1, r1, #32
 8001cf2:	6319      	str	r1, [r3, #48]	; 0x30
 8001cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf6:	f001 0120 	and.w	r1, r1, #32
 8001cfa:	9107      	str	r1, [sp, #28]
 8001cfc:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cfe:	9208      	str	r2, [sp, #32]
 8001d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d02:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d06:	6319      	str	r1, [r3, #48]	; 0x30
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	9308      	str	r3, [sp, #32]
 8001d10:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d12:	f641 0158 	movw	r1, #6232	; 0x1858
 8001d16:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d18:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d1c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d20:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d22:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d24:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d26:	f001 f937 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d2a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d2e:	a909      	add	r1, sp, #36	; 0x24
 8001d30:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d32:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d34:	f001 f930 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d38:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d3c:	a909      	add	r1, sp, #36	; 0x24
 8001d3e:	4818      	ldr	r0, [pc, #96]	; (8001da0 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d40:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d42:	f001 f929 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d46:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d48:	a909      	add	r1, sp, #36	; 0x24
 8001d4a:	4816      	ldr	r0, [pc, #88]	; (8001da4 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d4c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d4e:	f001 f923 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001d56:	a909      	add	r1, sp, #36	; 0x24
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d5a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001d5c:	f001 f91c 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d60:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d64:	a909      	add	r1, sp, #36	; 0x24
 8001d66:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d68:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d6a:	f001 f915 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d72:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001d74:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d76:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001d78:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d7a:	f001 f90d 	bl	8002f98 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001d7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d82:	a909      	add	r1, sp, #36	; 0x24
 8001d84:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001d86:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d88:	f001 f906 	bl	8002f98 <HAL_GPIO_Init>
}
 8001d8c:	b00f      	add	sp, #60	; 0x3c
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021400 	.word	0x40021400

08001dac <BSP_LCD_Init>:
{ 
 8001dac:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8001dae:	4c21      	ldr	r4, [pc, #132]	; (8001e34 <BSP_LCD_Init+0x88>)
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <BSP_LCD_Init+0x8c>)
 8001db2:	6463      	str	r3, [r4, #68]	; 0x44
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001db4:	2109      	movs	r1, #9
 8001db6:	2301      	movs	r3, #1
 8001db8:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001dbc:	201d      	movs	r0, #29
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001dc4:	f240 150d 	movw	r5, #269	; 0x10d
 8001dc8:	f240 1343 	movw	r3, #323	; 0x143
    LtdcHandler.Init.TotalHeigh = 327;
 8001dcc:	f240 1c17 	movw	ip, #279	; 0x117
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001dd0:	e9c4 531a 	strd	r5, r3, [r4, #104]	; 0x68
    LtdcHandler.Init.TotalHeigh = 327;
 8001dd4:	f240 1347 	movw	r3, #327	; 0x147
 8001dd8:	e9c4 c31c 	strd	ip, r3, [r4, #112]	; 0x70
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001de8:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001dea:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001dec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001df0:	f504 7084 	add.w	r0, r4, #264	; 0x108
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001dfc:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
    LtdcHandler.Init.Backcolor.Red= 0;
 8001e00:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001e04:	f002 fa06 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e0c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    BSP_LCD_MspInit();
 8001e10:	f7ff ff28 	bl	8001c64 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001e14:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001e18:	f001 fe86 	bl	8003b28 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <BSP_LCD_Init+0x90>)
 8001e1e:	6423      	str	r3, [r4, #64]	; 0x40
    LcdDrv->Init();
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4798      	blx	r3
    BSP_SDRAM_Init();
 8001e24:	f000 fd08 	bl	8002838 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <BSP_LCD_Init+0x94>)
 8001e2a:	f7ff fd2f 	bl	800188c <BSP_LCD_SetFont>
}  
 8001e2e:	4628      	mov	r0, r5
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
 8001e32:	bf00      	nop
 8001e34:	20000334 	.word	0x20000334
 8001e38:	40016800 	.word	0x40016800
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	200000d4 	.word	0x200000d4

08001e44 <BSP_LCD_DrawPixel>:
{
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <BSP_LCD_DrawPixel+0x28>)
{
 8001e48:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 8001e4e:	460e      	mov	r6, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e50:	2134      	movs	r1, #52	; 0x34
 8001e52:	fb01 3302 	mla	r3, r1, r2, r3
{
 8001e56:	4604      	mov	r4, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e58:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8001e5c:	f7ff fca8 	bl	80017b0 <BSP_LCD_GetXSize>
 8001e60:	fb00 4006 	mla	r0, r0, r6, r4
 8001e64:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000334 	.word	0x20000334

08001e70 <BSP_LCD_DisplayChar>:
{
 8001e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e74:	4f31      	ldr	r7, [pc, #196]	; (8001f3c <BSP_LCD_DisplayChar+0xcc>)
{
 8001e76:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
{
 8001e7c:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e80:	210c      	movs	r1, #12
 8001e82:	fb01 7303 	mla	r3, r1, r3, r7
 8001e86:	3a20      	subs	r2, #32
 8001e88:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e8c:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001e90:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001e94:	680d      	ldr	r5, [r1, #0]
 8001e96:	f10b 0607 	add.w	r6, fp, #7
 8001e9a:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 8001e9c:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8001ea0:	b2c3      	uxtb	r3, r0
 8001ea2:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ea4:	fb0a f202 	mul.w	r2, sl, r2
      if(line & (1 << (width- j + offset- 1))) 
 8001ea8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001eac:	fb06 5502 	mla	r5, r6, r2, r5
  for(i = 0; i < height; i++)
 8001eb0:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001eb8:	45d1      	cmp	r9, sl
 8001eba:	eb03 0109 	add.w	r1, r3, r9
 8001ebe:	b289      	uxth	r1, r1
 8001ec0:	d302      	bcc.n	8001ec8 <BSP_LCD_DisplayChar+0x58>
}
 8001ec2:	b007      	add	sp, #28
 8001ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001ec8:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8001eca:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8001ecc:	d004      	beq.n	8001ed8 <BSP_LCD_DisplayChar+0x68>
 8001ece:	2e02      	cmp	r6, #2
 8001ed0:	d10e      	bne.n	8001ef0 <BSP_LCD_DisplayChar+0x80>
      line =  (pchar[0]<< 8) | pchar[1];
 8001ed2:	882c      	ldrh	r4, [r5, #0]
 8001ed4:	ba64      	rev16	r4, r4
 8001ed6:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 8001ed8:	9b04      	ldr	r3, [sp, #16]
 8001eda:	9a00      	ldr	r2, [sp, #0]
 8001edc:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 8001ede:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001ee2:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 8001ee4:	45c3      	cmp	fp, r8
 8001ee6:	d80a      	bhi.n	8001efe <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 8001ee8:	f109 0901 	add.w	r9, r9, #1
 8001eec:	4435      	add	r5, r6
 8001eee:	e7e2      	b.n	8001eb6 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001ef0:	786a      	ldrb	r2, [r5, #1]
 8001ef2:	0424      	lsls	r4, r4, #16
 8001ef4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001ef8:	78aa      	ldrb	r2, [r5, #2]
 8001efa:	4314      	orrs	r4, r2
      break;
 8001efc:	e7ec      	b.n	8001ed8 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8001efe:	9b01      	ldr	r3, [sp, #4]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f00:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f04:	9105      	str	r1, [sp, #20]
 8001f06:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 8001f0a:	9b03      	ldr	r3, [sp, #12]
 8001f0c:	f04f 0c01 	mov.w	ip, #1
 8001f10:	eba3 0e08 	sub.w	lr, r3, r8
 8001f14:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f18:	ea1c 0f04 	tst.w	ip, r4
 8001f1c:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f20:	fb0c 7202 	mla	r2, ip, r2, r7
 8001f24:	b280      	uxth	r0, r0
 8001f26:	bf14      	ite	ne
 8001f28:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f2c:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 8001f30:	f7ff ff88 	bl	8001e44 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001f34:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f38:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8001f3a:	e7d3      	b.n	8001ee4 <BSP_LCD_DisplayChar+0x74>
 8001f3c:	20000334 	.word	0x20000334

08001f40 <BSP_LCD_DisplayStringAt>:
{
 8001f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f44:	4699      	mov	r9, r3
 8001f46:	4680      	mov	r8, r0
 8001f48:	460e      	mov	r6, r1
 8001f4a:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d1fa      	bne.n	8001f4e <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f58:	4f27      	ldr	r7, [pc, #156]	; (8001ff8 <BSP_LCD_DisplayStringAt+0xb8>)
 8001f5a:	f7ff fc29 	bl	80017b0 <BSP_LCD_GetXSize>
 8001f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f62:	220c      	movs	r2, #12
 8001f64:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 8001f68:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 8001f76:	d01d      	beq.n	8001fb4 <BSP_LCD_DisplayStringAt+0x74>
 8001f78:	f1b9 0f02 	cmp.w	r9, #2
 8001f7c:	d022      	beq.n	8001fc4 <BSP_LCD_DisplayStringAt+0x84>
 8001f7e:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8001f80:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001f84:	f04f 0a0c 	mov.w	sl, #12
 8001f88:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001f8c:	3c00      	subs	r4, #0
 8001f8e:	bf18      	it	ne
 8001f90:	2401      	movne	r4, #1
 8001f92:	f7ff fc0d 	bl	80017b0 <BSP_LCD_GetXSize>
 8001f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f9a:	fb0a 7303 	mla	r3, sl, r3, r7
 8001f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	fb03 0019 	mls	r0, r3, r9, r0
 8001fa8:	b280      	uxth	r0, r0
 8001faa:	4298      	cmp	r0, r3
 8001fac:	d300      	bcc.n	8001fb0 <BSP_LCD_DisplayStringAt+0x70>
 8001fae:	b974      	cbnz	r4, 8001fce <BSP_LCD_DisplayStringAt+0x8e>
}
 8001fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001fb4:	1b2c      	subs	r4, r5, r4
 8001fb6:	4420      	add	r0, r4
 8001fb8:	4343      	muls	r3, r0
 8001fba:	eb08 0053 	add.w	r0, r8, r3, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001fbe:	fa1f f880 	uxth.w	r8, r0
      break;
 8001fc2:	e7dc      	b.n	8001f7e <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001fc4:	1b2c      	subs	r4, r5, r4
 8001fc6:	4404      	add	r4, r0
 8001fc8:	fb14 8003 	smlabb	r0, r4, r3, r8
 8001fcc:	e7f7      	b.n	8001fbe <BSP_LCD_DisplayStringAt+0x7e>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001fce:	4640      	mov	r0, r8
 8001fd0:	782a      	ldrb	r2, [r5, #0]
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	f7ff ff4c 	bl	8001e70 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fdc:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 8001fe0:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe8:	8898      	ldrh	r0, [r3, #4]
 8001fea:	4440      	add	r0, r8
 8001fec:	fa1f f880 	uxth.w	r8, r0
    i++;
 8001ff0:	fa1f f989 	uxth.w	r9, r9
 8001ff4:	e7c8      	b.n	8001f88 <BSP_LCD_DisplayStringAt+0x48>
 8001ff6:	bf00      	nop
 8001ff8:	20000334 	.word	0x20000334

08001ffc <BSP_LCD_DisplayStringAtLine>:
{
 8001ffc:	b513      	push	{r0, r1, r4, lr}
 8001ffe:	4604      	mov	r4, r0
 8002000:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002002:	f7ff fc4f 	bl	80018a4 <BSP_LCD_GetFont>
 8002006:	88c3      	ldrh	r3, [r0, #6]
 8002008:	9a01      	ldr	r2, [sp, #4]
 800200a:	fb13 f104 	smulbb	r1, r3, r4
 800200e:	b289      	uxth	r1, r1
 8002010:	2303      	movs	r3, #3
 8002012:	2000      	movs	r0, #0
}
 8002014:	b002      	add	sp, #8
 8002016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800201a:	f7ff bf91 	b.w	8001f40 <BSP_LCD_DisplayStringAt>
	...

08002020 <BSP_LCD_DrawLine>:
{
 8002020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002024:	1a14      	subs	r4, r2, r0
 8002026:	2c00      	cmp	r4, #0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002028:	eba3 0601 	sub.w	r6, r3, r1
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800202c:	bfb8      	it	lt
 800202e:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002030:	2e00      	cmp	r6, #0
 8002032:	bfb8      	it	lt
 8002034:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002036:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002038:	b236      	sxth	r6, r6
    xinc1 = -1;
 800203a:	4282      	cmp	r2, r0
 800203c:	bf2c      	ite	cs
 800203e:	2701      	movcs	r7, #1
 8002040:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002044:	428b      	cmp	r3, r1
 8002046:	bf2c      	ite	cs
 8002048:	f04f 0801 	movcs.w	r8, #1
 800204c:	f04f 38ff 	movcc.w	r8, #4294967295
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002050:	42b4      	cmp	r4, r6
{
 8002052:	b085      	sub	sp, #20
  x = X1;                       /* Start x off at the first pixel */
 8002054:	fa0f f980 	sxth.w	r9, r0
  y = Y1;                       /* Start y off at the first pixel */
 8002058:	fa0f fa81 	sxth.w	sl, r1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800205c:	db0f      	blt.n	800207e <BSP_LCD_DrawLine+0x5e>
    num = deltax / 2;
 800205e:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002062:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002064:	2700      	movs	r7, #0
    num = deltax / 2;
 8002066:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002068:	9701      	str	r7, [sp, #4]
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800206c:	f04f 0b00 	mov.w	fp, #0
 8002070:	fa0f f28b 	sxth.w	r2, fp
 8002074:	4294      	cmp	r4, r2
 8002076:	da10      	bge.n	800209a <BSP_LCD_DrawLine+0x7a>
}
 8002078:	b005      	add	sp, #20
 800207a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800207e:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002082:	4623      	mov	r3, r4
 8002084:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002088:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 800208c:	4634      	mov	r4, r6
 800208e:	f345 054f 	sbfx	r5, r5, #1, #16
 8002092:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002094:	f8cd 8000 	str.w	r8, [sp]
 8002098:	e7e7      	b.n	800206a <BSP_LCD_DrawLine+0x4a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800209a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800209e:	f04f 0c0c 	mov.w	ip, #12
 80020a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80020a6:	fa1f f089 	uxth.w	r0, r9
 80020aa:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80020ae:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80020b2:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80020b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020b8:	f7ff fec4 	bl	8001e44 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80020bc:	b2aa      	uxth	r2, r5
 80020be:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 80020c0:	42ac      	cmp	r4, r5
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <BSP_LCD_DrawLine+0xd0>)
 80020c4:	dc09      	bgt.n	80020da <BSP_LCD_DrawLine+0xba>
      x += xinc1;                             /* Change the x as appropriate */
 80020c6:	9802      	ldr	r0, [sp, #8]
      y += yinc1;                             /* Change the y as appropriate */
 80020c8:	9903      	ldr	r1, [sp, #12]
      num -= den;                             /* Calculate the new numerator value */
 80020ca:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 80020cc:	4438      	add	r0, r7
      y += yinc1;                             /* Change the y as appropriate */
 80020ce:	4441      	add	r1, r8
      num -= den;                             /* Calculate the new numerator value */
 80020d0:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 80020d2:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 80020d6:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 80020da:	9a00      	ldr	r2, [sp, #0]
 80020dc:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 80020de:	9a01      	ldr	r2, [sp, #4]
 80020e0:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 80020e2:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 80020e6:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80020ea:	f10b 0b01 	add.w	fp, fp, #1
 80020ee:	e7bf      	b.n	8002070 <BSP_LCD_DrawLine+0x50>
 80020f0:	20000334 	.word	0x20000334

080020f4 <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 80020f4:	2901      	cmp	r1, #1
{
 80020f6:	b538      	push	{r3, r4, r5, lr}
 80020f8:	460d      	mov	r5, r1
  if(PointCount < 2)
 80020fa:	d911      	bls.n	8002120 <BSP_LCD_DrawPolygon+0x2c>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 80020fc:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8002100:	3a01      	subs	r2, #1
 8002102:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002106:	4604      	mov	r4, r0
 8002108:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800210c:	8841      	ldrh	r1, [r0, #2]
 800210e:	885b      	ldrh	r3, [r3, #2]
 8002110:	f834 0b04 	ldrh.w	r0, [r4], #4
  while(--PointCount)
 8002114:	3d01      	subs	r5, #1
 8002116:	b2ad      	uxth	r5, r5
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002118:	f7ff ff82 	bl	8002020 <BSP_LCD_DrawLine>
  while(--PointCount)
 800211c:	3404      	adds	r4, #4
 800211e:	b905      	cbnz	r5, 8002122 <BSP_LCD_DrawPolygon+0x2e>
}
 8002120:	bd38      	pop	{r3, r4, r5, pc}
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002122:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8002126:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800212a:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 800212e:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 8002132:	e7ef      	b.n	8002114 <BSP_LCD_DrawPolygon+0x20>

08002134 <BSP_LCD_FillTriangle>:
{ 
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	b087      	sub	sp, #28
 800213a:	4698      	mov	r8, r3
 800213c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8002140:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002144:	1a0c      	subs	r4, r1, r0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002146:	eba5 0608 	sub.w	r6, r5, r8
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800214a:	2c00      	cmp	r4, #0
 800214c:	bfb8      	it	lt
 800214e:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002150:	2e00      	cmp	r6, #0
 8002152:	bfb8      	it	lt
 8002154:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002156:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002158:	b236      	sxth	r6, r6
  y = Y1;                       /* Start y off at the first pixel */
 800215a:	fa0f fa88 	sxth.w	sl, r8
    xinc1 = -1;
 800215e:	4281      	cmp	r1, r0
 8002160:	bf2c      	ite	cs
 8002162:	2701      	movcs	r7, #1
 8002164:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002168:	4545      	cmp	r5, r8
 800216a:	bf2c      	ite	cs
 800216c:	f04f 0801 	movcs.w	r8, #1
 8002170:	f04f 38ff 	movcc.w	r8, #4294967295
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002174:	42b4      	cmp	r4, r6
  x = X1;                       /* Start x off at the first pixel */
 8002176:	fa0f f980 	sxth.w	r9, r0
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800217a:	db0e      	blt.n	800219a <BSP_LCD_FillTriangle+0x66>
    num = deltax / 2;
 800217c:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002180:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002182:	2700      	movs	r7, #0
    num = deltax / 2;
 8002184:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002186:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002188:	f04f 0b00 	mov.w	fp, #0
 800218c:	fa0f f18b 	sxth.w	r1, fp
 8002190:	428c      	cmp	r4, r1
 8002192:	da10      	bge.n	80021b6 <BSP_LCD_FillTriangle+0x82>
}
 8002194:	b007      	add	sp, #28
 8002196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800219a:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 800219e:	4621      	mov	r1, r4
 80021a0:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80021a4:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80021a8:	4634      	mov	r4, r6
 80021aa:	f345 054f 	sbfx	r5, r5, #1, #16
 80021ae:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80021b0:	f8cd 8000 	str.w	r8, [sp]
 80021b4:	e7e8      	b.n	8002188 <BSP_LCD_FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, X3, Y3);
 80021b6:	fa1f f089 	uxth.w	r0, r9
 80021ba:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80021be:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, X3, Y3);
 80021c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021c8:	f7ff ff2a 	bl	8002020 <BSP_LCD_DrawLine>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80021cc:	fa1f fc85 	uxth.w	ip, r5
 80021d0:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 80021d2:	42ac      	cmp	r4, r5
 80021d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021d8:	dc0a      	bgt.n	80021f0 <BSP_LCD_FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
 80021da:	9802      	ldr	r0, [sp, #8]
      y += yinc1;               /* Change the y as appropriate */
 80021dc:	9903      	ldr	r1, [sp, #12]
      num -= den;               /* Calculate the new numerator value */
 80021de:	ebac 0504 	sub.w	r5, ip, r4
      x += xinc1;               /* Change the x as appropriate */
 80021e2:	4438      	add	r0, r7
      y += yinc1;               /* Change the y as appropriate */
 80021e4:	4441      	add	r1, r8
      num -= den;               /* Calculate the new numerator value */
 80021e6:	b22d      	sxth	r5, r5
      x += xinc1;               /* Change the x as appropriate */
 80021e8:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 80021ec:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 80021f0:	9900      	ldr	r1, [sp, #0]
 80021f2:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
 80021f4:	9901      	ldr	r1, [sp, #4]
 80021f6:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 80021f8:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 80021fc:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002200:	f10b 0b01 	add.w	fp, fp, #1
 8002204:	e7c2      	b.n	800218c <BSP_LCD_FillTriangle+0x58>

08002206 <BSP_LCD_FillPolygon>:
{
 8002206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  imageleft = imageright = Points->X;
 800220a:	f8b0 8000 	ldrh.w	r8, [r0]
  imagetop= imagebottom = Points->Y;
 800220e:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
 8002212:	460f      	mov	r7, r1
 8002214:	b087      	sub	sp, #28
  imagetop= imagebottom = Points->Y;
 8002216:	464e      	mov	r6, r9
 8002218:	4649      	mov	r1, r9
  imageleft = imageright = Points->X;
 800221a:	4644      	mov	r4, r8
 800221c:	4645      	mov	r5, r8
  for(counter = 1; counter < PointCount; counter++)
 800221e:	2301      	movs	r3, #1
 8002220:	42bb      	cmp	r3, r7
 8002222:	db2f      	blt.n	8002284 <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 8002224:	2f01      	cmp	r7, #1
 8002226:	d92a      	bls.n	800227e <BSP_LCD_FillPolygon+0x78>
  xcenter = (imageleft + imageright)/2;
 8002228:	4425      	add	r5, r4
  ycenter = (imagebottom + imagetop)/2;
 800222a:	440e      	add	r6, r1
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 800222c:	f04f 0b00 	mov.w	fp, #0
 8002230:	1d04      	adds	r4, r0, #4
 8002232:	f8cd b00c 	str.w	fp, [sp, #12]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002236:	f3c5 054f 	ubfx	r5, r5, #1, #16
 800223a:	f3c6 064f 	ubfx	r6, r6, #1, #16
  while(--PointCount)
 800223e:	3f01      	subs	r7, #1
 8002240:	b2bf      	uxth	r7, r7
 8002242:	3404      	adds	r4, #4
 8002244:	bb9f      	cbnz	r7, 80022ae <BSP_LCD_FillPolygon+0xa8>
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 8002246:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800224a:	fa1f f48b 	uxth.w	r4, fp
 800224e:	464b      	mov	r3, r9
 8002250:	462a      	mov	r2, r5
 8002252:	4639      	mov	r1, r7
 8002254:	4640      	mov	r0, r8
 8002256:	e9cd 4600 	strd	r4, r6, [sp]
 800225a:	f7ff ff6b 	bl	8002134 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 800225e:	464b      	mov	r3, r9
 8002260:	463a      	mov	r2, r7
 8002262:	4629      	mov	r1, r5
 8002264:	4640      	mov	r0, r8
 8002266:	e9cd 6400 	strd	r6, r4, [sp]
 800226a:	f7ff ff63 	bl	8002134 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 800226e:	e9cd 4900 	strd	r4, r9, [sp]
 8002272:	4633      	mov	r3, r6
 8002274:	4642      	mov	r2, r8
 8002276:	4639      	mov	r1, r7
 8002278:	4628      	mov	r0, r5
 800227a:	f7ff ff5b 	bl	8002134 <BSP_LCD_FillTriangle>
}
 800227e:	b007      	add	sp, #28
 8002280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelx = POLY_X(counter);
 8002284:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 8002288:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
    if(pixelx < imageleft)
 800228c:	42aa      	cmp	r2, r5
      imageleft = pixelx;
 800228e:	bfb8      	it	lt
 8002290:	b295      	uxthlt	r5, r2
    if(pixelx > imageright)
 8002292:	42a2      	cmp	r2, r4
      imageright = pixelx;
 8002294:	bfc8      	it	gt
 8002296:	b294      	uxthgt	r4, r2
    pixely = POLY_Y(counter);
 8002298:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixely < imagetop)
 800229c:	428a      	cmp	r2, r1
      imagetop = pixely;
 800229e:	bfb8      	it	lt
 80022a0:	b291      	uxthlt	r1, r2
    if(pixely > imagebottom)
 80022a2:	3301      	adds	r3, #1
 80022a4:	42b2      	cmp	r2, r6
      imagebottom = pixely;
 80022a6:	bfc8      	it	gt
 80022a8:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	e7b8      	b.n	8002220 <BSP_LCD_FillPolygon+0x1a>
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022ae:	f834 ac04 	ldrh.w	sl, [r4, #-4]
 80022b2:	f834 2c02 	ldrh.w	r2, [r4, #-2]
    x2 = Points->X;
 80022b6:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022ba:	f834 0c08 	ldrh.w	r0, [r4, #-8]
    y2 = Points->Y;    
 80022be:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    x2 = Points->X;
 80022c2:	9303      	str	r3, [sp, #12]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022c4:	4651      	mov	r1, sl
 80022c6:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80022d0:	462a      	mov	r2, r5
 80022d2:	9305      	str	r3, [sp, #20]
 80022d4:	9004      	str	r0, [sp, #16]
 80022d6:	f7ff ff2d 	bl	8002134 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 80022da:	9b02      	ldr	r3, [sp, #8]
 80022dc:	9804      	ldr	r0, [sp, #16]
 80022de:	e9cd 6300 	strd	r6, r3, [sp]
 80022e2:	4652      	mov	r2, sl
 80022e4:	9b05      	ldr	r3, [sp, #20]
 80022e6:	4629      	mov	r1, r5
 80022e8:	f7ff ff24 	bl	8002134 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 80022ec:	9b05      	ldr	r3, [sp, #20]
 80022ee:	9804      	ldr	r0, [sp, #16]
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	9b02      	ldr	r3, [sp, #8]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4602      	mov	r2, r0
 80022f8:	4633      	mov	r3, r6
 80022fa:	4651      	mov	r1, sl
 80022fc:	4628      	mov	r0, r5
 80022fe:	f7ff ff19 	bl	8002134 <BSP_LCD_FillTriangle>
 8002302:	e79c      	b.n	800223e <BSP_LCD_FillPolygon+0x38>

08002304 <BSP_LCD_DrawCircle>:
{
 8002304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002308:	b087      	sub	sp, #28
 800230a:	e9cd 0101 	strd	r0, r1, [sp, #4]
  d = 3 - (Radius << 1);
 800230e:	0055      	lsls	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002310:	4c4c      	ldr	r4, [pc, #304]	; (8002444 <BSP_LCD_DrawCircle+0x140>)
  d = 3 - (Radius << 1);
 8002312:	f1c5 0503 	rsb	r5, r5, #3
  cury = Radius;
 8002316:	4616      	mov	r6, r2
  curx = 0;
 8002318:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800231c:	270c      	movs	r7, #12
 800231e:	b2b2      	uxth	r2, r6
 8002320:	9200      	str	r2, [sp, #0]
 8002322:	9900      	ldr	r1, [sp, #0]
 8002324:	9a02      	ldr	r2, [sp, #8]
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	1a51      	subs	r1, r2, r1
 800232a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800232e:	fa13 f388 	uxtah	r3, r3, r8
 8002332:	fb07 4202 	mla	r2, r7, r2, r4
 8002336:	b29b      	uxth	r3, r3
 8002338:	b289      	uxth	r1, r1
 800233a:	4618      	mov	r0, r3
 800233c:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002340:	9104      	str	r1, [sp, #16]
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	f7ff fd7e 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002348:	9b01      	ldr	r3, [sp, #4]
 800234a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800234e:	9904      	ldr	r1, [sp, #16]
 8002350:	fa1f f988 	uxth.w	r9, r8
 8002354:	eba3 0b09 	sub.w	fp, r3, r9
 8002358:	fb07 4202 	mla	r2, r7, r2, r4
 800235c:	fa1f fb8b 	uxth.w	fp, fp
 8002360:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002364:	f8cd 900c 	str.w	r9, [sp, #12]
 8002368:	4658      	mov	r0, fp
 800236a:	f7ff fd6b 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800236e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002372:	eb03 0a02 	add.w	sl, r3, r2
 8002376:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800237a:	1a99      	subs	r1, r3, r2
 800237c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8002380:	fb07 4202 	mla	r2, r7, r2, r4
 8002384:	fa1f fa8a 	uxth.w	sl, sl
 8002388:	b289      	uxth	r1, r1
 800238a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800238e:	9104      	str	r1, [sp, #16]
 8002390:	4650      	mov	r0, sl
 8002392:	f7ff fd57 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800239a:	eba3 0902 	sub.w	r9, r3, r2
 800239e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80023a2:	9904      	ldr	r1, [sp, #16]
 80023a4:	fb07 4202 	mla	r2, r7, r2, r4
 80023a8:	fa1f f989 	uxth.w	r9, r9
 80023ac:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80023b0:	4648      	mov	r0, r9
 80023b2:	f7ff fd47 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80023b6:	9b00      	ldr	r3, [sp, #0]
 80023b8:	9a02      	ldr	r2, [sp, #8]
 80023ba:	1899      	adds	r1, r3, r2
 80023bc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80023c0:	9b05      	ldr	r3, [sp, #20]
 80023c2:	fb07 4202 	mla	r2, r7, r2, r4
 80023c6:	b289      	uxth	r1, r1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80023ce:	9100      	str	r1, [sp, #0]
 80023d0:	f7ff fd38 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80023d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80023d8:	9900      	ldr	r1, [sp, #0]
 80023da:	fb07 4303 	mla	r3, r7, r3, r4
 80023de:	4658      	mov	r0, fp
 80023e0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80023e4:	f7ff fd2e 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80023e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023ec:	1899      	adds	r1, r3, r2
 80023ee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80023f2:	fb07 4303 	mla	r3, r7, r3, r4
 80023f6:	b289      	uxth	r1, r1
 80023f8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80023fc:	9100      	str	r1, [sp, #0]
 80023fe:	4650      	mov	r0, sl
 8002400:	f7ff fd20 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002404:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8002408:	9900      	ldr	r1, [sp, #0]
 800240a:	fb07 4303 	mla	r3, r7, r3, r4
 800240e:	4648      	mov	r0, r9
 8002410:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002414:	f7ff fd16 	bl	8001e44 <BSP_LCD_DrawPixel>
    if (d < 0)
 8002418:	2d00      	cmp	r5, #0
      d += (curx << 2) + 6;
 800241a:	bfb5      	itete	lt
 800241c:	3506      	addlt	r5, #6
      d += ((curx - cury) << 2) + 10;
 800241e:	eba8 0306 	subge.w	r3, r8, r6
      d += (curx << 2) + 6;
 8002422:	eb05 0588 	addlt.w	r5, r5, r8, lsl #2
      d += ((curx - cury) << 2) + 10;
 8002426:	350a      	addge	r5, #10
      cury--;
 8002428:	bfa8      	it	ge
 800242a:	f106 36ff 	addge.w	r6, r6, #4294967295
    curx++;
 800242e:	f108 0801 	add.w	r8, r8, #1
      d += ((curx - cury) << 2) + 10;
 8002432:	bfa8      	it	ge
 8002434:	eb05 0583 	addge.w	r5, r5, r3, lsl #2
  while (curx <= cury)
 8002438:	4546      	cmp	r6, r8
 800243a:	f4bf af70 	bcs.w	800231e <BSP_LCD_DrawCircle+0x1a>
}
 800243e:	b007      	add	sp, #28
 8002440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002444:	20000334 	.word	0x20000334

08002448 <BSP_LCD_FillCircle>:
{
 8002448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800244c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002514 <BSP_LCD_FillCircle+0xcc>
 8002450:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
  d = 3 - (Radius << 1);
 8002454:	0054      	lsls	r4, r2, #1
{
 8002456:	4691      	mov	r9, r2
  cury = Radius;
 8002458:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800245a:	220c      	movs	r2, #12
 800245c:	fb02 a303 	mla	r3, r2, r3, sl
{
 8002460:	4680      	mov	r8, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002462:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
{
 8002466:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002468:	f7ff f9f8 	bl	800185c <BSP_LCD_SetTextColor>
  d = 3 - (Radius << 1);
 800246c:	f1c4 0403 	rsb	r4, r4, #3
  curx = 0;
 8002470:	2500      	movs	r5, #0
    if(cury > 0) 
 8002472:	b1af      	cbz	r7, 80024a0 <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002474:	b2ba      	uxth	r2, r7
 8002476:	eba8 0002 	sub.w	r0, r8, r2
 800247a:	fa16 f185 	uxtah	r1, r6, r5
 800247e:	0052      	lsls	r2, r2, #1
 8002480:	b280      	uxth	r0, r0
 8002482:	b292      	uxth	r2, r2
 8002484:	b289      	uxth	r1, r1
 8002486:	fa1f fb85 	uxth.w	fp, r5
 800248a:	9201      	str	r2, [sp, #4]
 800248c:	9000      	str	r0, [sp, #0]
 800248e:	f7ff fa33 	bl	80018f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002492:	eba6 010b 	sub.w	r1, r6, fp
 8002496:	9a01      	ldr	r2, [sp, #4]
 8002498:	9800      	ldr	r0, [sp, #0]
 800249a:	b289      	uxth	r1, r1
 800249c:	f7ff fa2c 	bl	80018f8 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 80024a0:	b1ad      	cbz	r5, 80024ce <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80024a2:	b2aa      	uxth	r2, r5
 80024a4:	fa1f fb87 	uxth.w	fp, r7
 80024a8:	eba8 0002 	sub.w	r0, r8, r2
 80024ac:	eba6 010b 	sub.w	r1, r6, fp
 80024b0:	0052      	lsls	r2, r2, #1
 80024b2:	b280      	uxth	r0, r0
 80024b4:	b292      	uxth	r2, r2
 80024b6:	b289      	uxth	r1, r1
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	f7ff fa1c 	bl	80018f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80024c0:	eb0b 0106 	add.w	r1, fp, r6
 80024c4:	9a01      	ldr	r2, [sp, #4]
 80024c6:	9800      	ldr	r0, [sp, #0]
 80024c8:	b289      	uxth	r1, r1
 80024ca:	f7ff fa15 	bl	80018f8 <BSP_LCD_DrawHLine>
    if (d < 0)
 80024ce:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 80024d0:	bfb5      	itete	lt
 80024d2:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 80024d4:	1beb      	subge	r3, r5, r7
      d += (curx << 2) + 6;
 80024d6:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 80024da:	340a      	addge	r4, #10
      cury--;
 80024dc:	bfa8      	it	ge
 80024de:	f107 37ff 	addge.w	r7, r7, #4294967295
    curx++;
 80024e2:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 80024e6:	bfa8      	it	ge
 80024e8:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 80024ec:	42af      	cmp	r7, r5
 80024ee:	d2c0      	bcs.n	8002472 <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024f0:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
 80024f4:	220c      	movs	r2, #12
 80024f6:	fb02 aa03 	mla	sl, r2, r3, sl
 80024fa:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
 80024fe:	f7ff f9ad 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002502:	464a      	mov	r2, r9
 8002504:	4631      	mov	r1, r6
 8002506:	4640      	mov	r0, r8
}
 8002508:	b003      	add	sp, #12
 800250a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800250e:	f7ff bef9 	b.w	8002304 <BSP_LCD_DrawCircle>
 8002512:	bf00      	nop
 8002514:	20000334 	.word	0x20000334

08002518 <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 8002518:	ee07 3a90 	vmov	s15, r3
{
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rad2 = YRadius;
 8002520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8002524:	ee07 2a90 	vmov	s15, r2
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800252c:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 8002530:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8002534:	f1c2 0501 	rsb	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002538:	4f36      	ldr	r7, [pc, #216]	; (8002614 <BSP_LCD_DrawEllipse+0xfc>)
{
 800253a:	b085      	sub	sp, #20
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800253c:	425e      	negs	r6, r3
 800253e:	006d      	lsls	r5, r5, #1
 8002540:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002544:	fa1f f980 	uxth.w	r9, r0
 8002548:	fa1f fa81 	uxth.w	sl, r1
 800254c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002550:	f04f 0b0c 	mov.w	fp, #12
 8002554:	fb0b 7202 	mla	r2, fp, r2, r7
 8002558:	ee07 8a90 	vmov	s15, r8
 800255c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002560:	fa1a f186 	uxtah	r1, sl, r6
 8002564:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8002568:	b289      	uxth	r1, r1
 800256a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800256e:	9101      	str	r1, [sp, #4]
 8002570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002574:	ee17 3a90 	vmov	r3, s15
 8002578:	b29c      	uxth	r4, r3
 800257a:	eba9 0304 	sub.w	r3, r9, r4
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	f7ff fc5e 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002588:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800258c:	9901      	ldr	r1, [sp, #4]
 800258e:	fb0b 7202 	mla	r2, fp, r2, r7
 8002592:	eb09 0004 	add.w	r0, r9, r4
 8002596:	b280      	uxth	r0, r0
 8002598:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800259c:	9002      	str	r0, [sp, #8]
 800259e:	f7ff fc51 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 80025a2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80025a6:	9802      	ldr	r0, [sp, #8]
 80025a8:	b2b1      	uxth	r1, r6
 80025aa:	fb0b 7202 	mla	r2, fp, r2, r7
 80025ae:	ebaa 0101 	sub.w	r1, sl, r1
 80025b2:	b289      	uxth	r1, r1
 80025b4:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80025b8:	9101      	str	r1, [sp, #4]
 80025ba:	f7ff fc43 	bl	8001e44 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 80025be:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	9901      	ldr	r1, [sp, #4]
 80025c6:	fb0b 7202 	mla	r2, fp, r2, r7
 80025ca:	4618      	mov	r0, r3
 80025cc:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80025d0:	f7ff fc38 	bl	8001e44 <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 80025d4:	45a8      	cmp	r8, r5
 80025d6:	db18      	blt.n	800260a <BSP_LCD_DrawEllipse+0xf2>
      err += ++x*2+1;
 80025d8:	f108 0801 	add.w	r8, r8, #1
 80025dc:	eb05 0348 	add.w	r3, r5, r8, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 80025e0:	eb18 0f06 	cmn.w	r8, r6
      err += ++x*2+1;
 80025e4:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 80025e8:	d102      	bne.n	80025f0 <BSP_LCD_DrawEllipse+0xd8>
 80025ea:	42ae      	cmp	r6, r5
 80025ec:	db02      	blt.n	80025f4 <BSP_LCD_DrawEllipse+0xdc>
 80025ee:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;
 80025f0:	42ae      	cmp	r6, r5
 80025f2:	da0c      	bge.n	800260e <BSP_LCD_DrawEllipse+0xf6>
 80025f4:	3601      	adds	r6, #1
 80025f6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80025fa:	1c5d      	adds	r5, r3, #1
  while (y <= 0);
 80025fc:	2e00      	cmp	r6, #0
 80025fe:	dda5      	ble.n	800254c <BSP_LCD_DrawEllipse+0x34>
}
 8002600:	b005      	add	sp, #20
 8002602:	ecbd 8b02 	vpop	{d8}
 8002606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260a:	462b      	mov	r3, r5
 800260c:	e7f0      	b.n	80025f0 <BSP_LCD_DrawEllipse+0xd8>
 800260e:	461d      	mov	r5, r3
 8002610:	e7f4      	b.n	80025fc <BSP_LCD_DrawEllipse+0xe4>
 8002612:	bf00      	nop
 8002614:	20000334 	.word	0x20000334

08002618 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002618:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800261c:	4c21      	ldr	r4, [pc, #132]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800261e:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002622:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8002624:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002628:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800262a:	4621      	mov	r1, r4
{
 800262c:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002632:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002634:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8002638:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 800263c:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002640:	f001 ff33 	bl	80044aa <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002644:	4630      	mov	r0, r6
 8002646:	f000 fa1f 	bl	8002a88 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800264a:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800264c:	4621      	mov	r1, r4
 800264e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002652:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002654:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8002658:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 800265c:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002660:	f001 ff23 	bl	80044aa <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002664:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002666:	4621      	mov	r1, r4
 8002668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266c:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800266e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8002672:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002676:	f001 ff18 	bl	80044aa <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800267a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800267e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8002680:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8002682:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002684:	4621      	mov	r1, r4
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800268c:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002690:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002692:	f001 ff0a 	bl	80044aa <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002696:	4649      	mov	r1, r9
 8002698:	4628      	mov	r0, r5
}
 800269a:	b002      	add	sp, #8
 800269c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80026a0:	f001 bf21 	b.w	80044e6 <HAL_SDRAM_ProgramRefreshRate>
 80026a4:	2000046c 	.word	0x2000046c

080026a8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80026a8:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80026aa:	4606      	mov	r6, r0
{
 80026ac:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80026ae:	2800      	cmp	r0, #0
 80026b0:	f000 80ad 	beq.w	800280e <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026b4:	4b57      	ldr	r3, [pc, #348]	; (8002814 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026b6:	4858      	ldr	r0, [pc, #352]	; (8002818 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80026b8:	2400      	movs	r4, #0
 80026ba:	9401      	str	r4, [sp, #4]
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	f002 0201 	and.w	r2, r2, #1
 80026ca:	9201      	str	r2, [sp, #4]
 80026cc:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80026ce:	9402      	str	r4, [sp, #8]
 80026d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80026de:	9202      	str	r2, [sp, #8]
 80026e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	9403      	str	r4, [sp, #12]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	f042 0202 	orr.w	r2, r2, #2
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ee:	f002 0202 	and.w	r2, r2, #2
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	9404      	str	r4, [sp, #16]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	f042 0204 	orr.w	r2, r2, #4
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	f002 0204 	and.w	r2, r2, #4
 8002706:	9204      	str	r2, [sp, #16]
 8002708:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	9405      	str	r4, [sp, #20]
 800270c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
 8002714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002716:	f002 0208 	and.w	r2, r2, #8
 800271a:	9205      	str	r2, [sp, #20]
 800271c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800271e:	9406      	str	r4, [sp, #24]
 8002720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002722:	f042 0210 	orr.w	r2, r2, #16
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
 8002728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272a:	f002 0210 	and.w	r2, r2, #16
 800272e:	9206      	str	r2, [sp, #24]
 8002730:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002732:	9407      	str	r4, [sp, #28]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
 800273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273e:	f002 0220 	and.w	r2, r2, #32
 8002742:	9207      	str	r2, [sp, #28]
 8002744:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002746:	9408      	str	r4, [sp, #32]
 8002748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	9308      	str	r3, [sp, #32]
 8002758:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800275c:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002760:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002762:	230c      	movs	r3, #12
 8002764:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002766:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002768:	2360      	movs	r3, #96	; 0x60
 800276a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800276c:	f000 fc14 	bl	8002f98 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002770:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002772:	482a      	ldr	r0, [pc, #168]	; (800281c <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002774:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002776:	a909      	add	r1, sp, #36	; 0x24
 8002778:	f000 fc0e 	bl	8002f98 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800277c:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002780:	4827      	ldr	r0, [pc, #156]	; (8002820 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002782:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002784:	a909      	add	r1, sp, #36	; 0x24
 8002786:	f000 fc07 	bl	8002f98 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800278a:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800278e:	4825      	ldr	r0, [pc, #148]	; (8002824 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002790:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002792:	a909      	add	r1, sp, #36	; 0x24
 8002794:	f000 fc00 	bl	8002f98 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002798:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800279c:	4822      	ldr	r0, [pc, #136]	; (8002828 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800279e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80027a0:	a909      	add	r1, sp, #36	; 0x24
 80027a2:	f000 fbf9 	bl	8002f98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80027a6:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027aa:	4820      	ldr	r0, [pc, #128]	; (800282c <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80027ac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027ae:	a909      	add	r1, sp, #36	; 0x24
 80027b0:	f000 fbf2 	bl	8002f98 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027c8:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80027cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80027d0:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80027d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80027d8:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80027da:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80027de:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80027e0:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <BSP_SDRAM_MspInit+0x18c>)
 80027e6:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80027ea:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80027ec:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80027ee:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80027f0:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80027f2:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 80027f4:	f000 fa58 	bl	8002ca8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f9d5 	bl	8002ba8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80027fe:	2038      	movs	r0, #56	; 0x38
 8002800:	4622      	mov	r2, r4
 8002802:	210f      	movs	r1, #15
 8002804:	f000 f966 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002808:	2038      	movs	r0, #56	; 0x38
 800280a:	f000 f995 	bl	8002b38 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800280e:	b00e      	add	sp, #56	; 0x38
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	2000046c 	.word	0x2000046c
 8002834:	40026410 	.word	0x40026410

08002838 <BSP_SDRAM_Init>:
{
 8002838:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800283a:	4c1b      	ldr	r4, [pc, #108]	; (80028a8 <BSP_SDRAM_Init+0x70>)
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <BSP_SDRAM_Init+0x74>)
 800283e:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 8002840:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8002842:	2302      	movs	r3, #2
 8002844:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 8002846:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 800284a:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 800284e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002852:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 8002854:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002858:	2301      	movs	r3, #1
 800285a:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800285e:	2010      	movs	r0, #16
 8002860:	2340      	movs	r3, #64	; 0x40
 8002862:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002866:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800286a:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800286e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002872:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002876:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800287e:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002880:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002882:	f7ff ff11 	bl	80026a8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002886:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800288a:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 800288e:	f001 fdec 	bl	800446a <HAL_SDRAM_Init>
 8002892:	4c07      	ldr	r4, [pc, #28]	; (80028b0 <BSP_SDRAM_Init+0x78>)
 8002894:	3800      	subs	r0, #0
 8002896:	bf18      	it	ne
 8002898:	2001      	movne	r0, #1
 800289a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800289c:	f240 506a 	movw	r0, #1386	; 0x56a
 80028a0:	f7ff feba 	bl	8002618 <BSP_SDRAM_Initialization_sequence>
}
 80028a4:	7820      	ldrb	r0, [r4, #0]
 80028a6:	bd10      	pop	{r4, pc}
 80028a8:	2000046c 	.word	0x2000046c
 80028ac:	a0000140 	.word	0xa0000140
 80028b0:	200000fc 	.word	0x200000fc

080028b4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80028b6:	4c0b      	ldr	r4, [pc, #44]	; (80028e4 <BSP_TS_Init+0x30>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80028b8:	4d0b      	ldr	r5, [pc, #44]	; (80028e8 <BSP_TS_Init+0x34>)
  TsXBoundary = XSize;
 80028ba:	8020      	strh	r0, [r4, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80028bc:	686b      	ldr	r3, [r5, #4]
  TsYBoundary = YSize;
 80028be:	8061      	strh	r1, [r4, #2]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80028c0:	2082      	movs	r0, #130	; 0x82
 80028c2:	4798      	blx	r3
 80028c4:	f640 0311 	movw	r3, #2065	; 0x811
 80028c8:	4298      	cmp	r0, r3
 80028ca:	d109      	bne.n	80028e0 <BSP_TS_Init+0x2c>
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80028cc:	682b      	ldr	r3, [r5, #0]
    TsDrv = &stmpe811_ts_drv;
 80028ce:	6065      	str	r5, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 80028d0:	2082      	movs	r0, #130	; 0x82
 80028d2:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	2082      	movs	r0, #130	; 0x82
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4798      	blx	r3
    ret = TS_OK;
 80028dc:	2000      	movs	r0, #0
  }

  return ret;
}
 80028de:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 80028e0:	2001      	movs	r0, #1
 80028e2:	e7fc      	b.n	80028de <BSP_TS_Init+0x2a>
 80028e4:	2000058c 	.word	0x2000058c
 80028e8:	20000098 	.word	0x20000098

080028ec <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80028ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80028ee:	4c2a      	ldr	r4, [pc, #168]	; (8002998 <BSP_TS_GetState+0xac>)
 80028f0:	6863      	ldr	r3, [r4, #4]
{
 80028f2:	4605      	mov	r5, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2082      	movs	r0, #130	; 0x82
 80028f8:	4798      	blx	r3
 80028fa:	b280      	uxth	r0, r0
 80028fc:	8028      	strh	r0, [r5, #0]
  
  if(TsState->TouchDetected)
 80028fe:	2800      	cmp	r0, #0
 8002900:	d03e      	beq.n	8002980 <BSP_TS_GetState+0x94>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002902:	6863      	ldr	r3, [r4, #4]
 8002904:	f10d 0206 	add.w	r2, sp, #6
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	a901      	add	r1, sp, #4
 800290c:	2082      	movs	r0, #130	; 0x82
 800290e:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8002910:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002914:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8002918:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
    
    /* Return y position value */
    if(yr <= 0)
 800291a:	2a0a      	cmp	r2, #10
 800291c:	d932      	bls.n	8002984 <BSP_TS_GetState+0x98>
    yr = y / 11;
 800291e:	230b      	movs	r3, #11
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 8002924:	8863      	ldrh	r3, [r4, #2]
 8002926:	4293      	cmp	r3, r2
 8002928:	d201      	bcs.n	800292e <BSP_TS_GetState+0x42>
    {
      yr = TsYBoundary - 1;
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 800292e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002932:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002936:	428b      	cmp	r3, r1
 8002938:	d826      	bhi.n	8002988 <BSP_TS_GetState+0x9c>
    {
      x = 3870 - x;
 800293a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800293e:	330e      	adds	r3, #14
 8002940:	b29b      	uxth	r3, r3
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 8002942:	210f      	movs	r1, #15
 8002944:	fbb3 f3f1 	udiv	r3, r3, r1
    /* Return X position value */
    if(xr <= 0)
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8002948:	8821      	ldrh	r1, [r4, #0]
 800294a:	4299      	cmp	r1, r3
 800294c:	d201      	bcs.n	8002952 <BSP_TS_GetState+0x66>
    {
      xr = TsXBoundary - 1;
 800294e:	1e4b      	subs	r3, r1, #1
 8002950:	b29b      	uxth	r3, r3
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8002952:	68a0      	ldr	r0, [r4, #8]
    yDiff = y > _y? (y - _y): (_y - y); 
 8002954:	68e6      	ldr	r6, [r4, #12]
    xDiff = x > _x? (x - _x): (_x - x);
 8002956:	4283      	cmp	r3, r0
 8002958:	b281      	uxth	r1, r0
 800295a:	bf8c      	ite	hi
 800295c:	1a59      	subhi	r1, r3, r1
 800295e:	1ac9      	subls	r1, r1, r3
    yDiff = y > _y? (y - _y): (_y - y); 
 8002960:	b2b0      	uxth	r0, r6
 8002962:	42b2      	cmp	r2, r6
 8002964:	bf8c      	ite	hi
 8002966:	1a10      	subhi	r0, r2, r0
 8002968:	1a80      	subls	r0, r0, r2
    xDiff = x > _x? (x - _x): (_x - x);
 800296a:	b289      	uxth	r1, r1
    yDiff = y > _y? (y - _y): (_y - y); 
 800296c:	b280      	uxth	r0, r0
    
    if (xDiff + yDiff > 5)
 800296e:	4401      	add	r1, r0
 8002970:	2905      	cmp	r1, #5
    {
      _x = x;
      _y = y; 
 8002972:	bfc8      	it	gt
 8002974:	e9c4 3202 	strdgt	r3, r2, [r4, #8]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	806b      	strh	r3, [r5, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	80ab      	strh	r3, [r5, #4]
  }
}
 8002980:	b002      	add	sp, #8
 8002982:	bd70      	pop	{r4, r5, r6, pc}
      yr = 0;
 8002984:	2200      	movs	r2, #0
 8002986:	e7d2      	b.n	800292e <BSP_TS_GetState+0x42>
      x = 3800 - x;
 8002988:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800298c:	3308      	adds	r3, #8
 800298e:	b29b      	uxth	r3, r3
    if(xr <= 0)
 8002990:	2b0e      	cmp	r3, #14
 8002992:	d8d6      	bhi.n	8002942 <BSP_TS_GetState+0x56>
      xr = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	e7dc      	b.n	8002952 <BSP_TS_GetState+0x66>
 8002998:	2000058c 	.word	0x2000058c

0800299c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800299c:	490f      	ldr	r1, [pc, #60]	; (80029dc <SystemInit+0x40>)
 800299e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <SystemInit+0x44>)
 80029ac:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029ae:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029b6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <SystemInit+0x48>)
 80029c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ce:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029d0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029d6:	608b      	str	r3, [r1, #8]
#endif
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	24003010 	.word	0x24003010

080029e8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_InitTick+0x3c>)
 80029f0:	4e0e      	ldr	r6, [pc, #56]	; (8002a2c <HAL_InitTick+0x40>)
{
 80029f2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f8:	7830      	ldrb	r0, [r6, #0]
 80029fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80029fe:	6810      	ldr	r0, [r2, #0]
 8002a00:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a04:	f000 f8a6 	bl	8002b54 <HAL_SYSTICK_Config>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	b950      	cbnz	r0, 8002a22 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0c:	2d0f      	cmp	r5, #15
 8002a0e:	d808      	bhi.n	8002a22 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	4602      	mov	r2, r0
 8002a12:	4629      	mov	r1, r5
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f85c 	bl	8002ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	6075      	str	r5, [r6, #4]
 8002a1e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e7fc      	b.n	8002a20 <HAL_InitTick+0x34>
 8002a26:	bf00      	nop
 8002a28:	20000100 	.word	0x20000100
 8002a2c:	20000104 	.word	0x20000104

08002a30 <HAL_Init>:
{
 8002a30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_Init+0x30>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	f000 f82f 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a52:	200f      	movs	r0, #15
 8002a54:	f7ff ffca 	bl	80029ec <HAL_InitTick>
  HAL_MspInit();
 8002a58:	f7ff ffc6 	bl	80029e8 <HAL_MspInit>
}
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	bd08      	pop	{r3, pc}
 8002a60:	40023c00 	.word	0x40023c00

08002a64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a64:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <HAL_IncTick+0x10>)
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_IncTick+0x14>)
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	440b      	add	r3, r1
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000059c 	.word	0x2000059c
 8002a78:	20000104 	.word	0x20000104

08002a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a7c:	4b01      	ldr	r3, [pc, #4]	; (8002a84 <HAL_GetTick+0x8>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000059c 	.word	0x2000059c

08002a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff fff6 	bl	8002a7c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a90:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a92:	bf1c      	itt	ne
 8002a94:	4b05      	ldrne	r3, [pc, #20]	; (8002aac <HAL_Delay+0x24>)
 8002a96:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002a9a:	bf18      	it	ne
 8002a9c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a9e:	f7ff ffed 	bl	8002a7c <HAL_GetTick>
 8002aa2:	1b43      	subs	r3, r0, r5
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	d3fa      	bcc.n	8002a9e <HAL_Delay+0x16>
  {
  }
}
 8002aa8:	bd38      	pop	{r3, r4, r5, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000104 	.word	0x20000104

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ab2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002acc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b530      	push	{r4, r5, lr}
 8002ad8:	68dc      	ldr	r4, [r3, #12]
 8002ada:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ade:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	2d04      	cmp	r5, #4
 8002ae6:	bf28      	it	cs
 8002ae8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aea:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af0:	bf8c      	ite	hi
 8002af2:	3c03      	subhi	r4, #3
 8002af4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af6:	fa03 f505 	lsl.w	r5, r3, r5
 8002afa:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afe:	40a3      	lsls	r3, r4
 8002b00:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002b06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	bfac      	ite	ge
 8002b0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	4a08      	ldrlt	r2, [pc, #32]	; (8002b34 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b18:	bfb8      	it	lt
 8002b1a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	bfaa      	itet	ge
 8002b22:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b2c:	bd30      	pop	{r4, r5, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	e000ed14 	.word	0xe000ed14

08002b38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	db08      	blt.n	8002b4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3c:	0942      	lsrs	r2, r0, #5
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f000 001f 	and.w	r0, r0, #31
 8002b44:	fa03 f000 	lsl.w	r0, r3, r0
 8002b48:	4b01      	ldr	r3, [pc, #4]	; (8002b50 <HAL_NVIC_EnableIRQ+0x18>)
 8002b4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	3801      	subs	r0, #1
 8002b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b5a:	d20b      	bcs.n	8002b74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	21f0      	movs	r1, #240	; 0xf0
 8002b66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	6803      	ldr	r3, [r0, #0]
{
 8002b7e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b80:	4c08      	ldr	r4, [pc, #32]	; (8002ba4 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002b82:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b84:	b2d9      	uxtb	r1, r3
 8002b86:	3910      	subs	r1, #16
 8002b88:	2018      	movs	r0, #24
 8002b8a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	5c20      	ldrb	r0, [r4, r0]
 8002b90:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b92:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002b96:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8002b9a:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9c:	bf88      	it	hi
 8002b9e:	3004      	addhi	r0, #4
 8002ba0:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002ba2:	bd10      	pop	{r4, pc}
 8002ba4:	0800b60c 	.word	0x0800b60c

08002ba8 <HAL_DMA_Init>:
{
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ff66 	bl	8002a7c <HAL_GetTick>
 8002bb0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d073      	beq.n	8002c9e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002bbc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	6821      	ldr	r1, [r4, #0]
 8002bce:	680b      	ldr	r3, [r1, #0]
 8002bd0:	07d8      	lsls	r0, r3, #31
 8002bd2:	d42f      	bmi.n	8002c34 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002bd4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd6:	4d33      	ldr	r5, [pc, #204]	; (8002ca4 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bda:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	68e2      	ldr	r2, [r4, #12]
 8002be4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	6922      	ldr	r2, [r4, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	6962      	ldr	r2, [r4, #20]
 8002bec:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	69e2      	ldr	r2, [r4, #28]
 8002bf0:	4303      	orrs	r3, r0
 8002bf2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	6a22      	ldr	r2, [r4, #32]
 8002bf6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bfa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c00:	bf02      	ittt	eq
 8002c02:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002c06:	4335      	orreq	r5, r6
 8002c08:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002c0a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002c0c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c10:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002c14:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c18:	d133      	bne.n	8002c82 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002c1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c1c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002c1e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c20:	b37d      	cbz	r5, 8002c82 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c22:	b990      	cbnz	r0, 8002c4a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002c24:	2a01      	cmp	r2, #1
 8002c26:	d021      	beq.n	8002c6c <HAL_DMA_Init+0xc4>
 8002c28:	f032 0202 	bics.w	r2, r2, #2
 8002c2c:	d129      	bne.n	8002c82 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2e:	01ea      	lsls	r2, r5, #7
 8002c30:	d527      	bpl.n	8002c82 <HAL_DMA_Init+0xda>
 8002c32:	e01e      	b.n	8002c72 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c34:	f7ff ff22 	bl	8002a7c <HAL_GetTick>
 8002c38:	1b40      	subs	r0, r0, r5
 8002c3a:	2805      	cmp	r0, #5
 8002c3c:	d9c6      	bls.n	8002bcc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002c44:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c4a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002c4e:	d114      	bne.n	8002c7a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002c50:	2a03      	cmp	r2, #3
 8002c52:	d816      	bhi.n	8002c82 <HAL_DMA_Init+0xda>
 8002c54:	a001      	add	r0, pc, #4	; (adr r0, 8002c5c <HAL_DMA_Init+0xb4>)
 8002c56:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c73 	.word	0x08002c73
 8002c60:	08002c2f 	.word	0x08002c2f
 8002c64:	08002c73 	.word	0x08002c73
 8002c68:	08002c6d 	.word	0x08002c6d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002c70:	d107      	bne.n	8002c82 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c72:	2340      	movs	r3, #64	; 0x40
 8002c74:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	2001      	movs	r0, #1
 8002c78:	e7e4      	b.n	8002c44 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002c7a:	2a02      	cmp	r2, #2
 8002c7c:	d9f9      	bls.n	8002c72 <HAL_DMA_Init+0xca>
 8002c7e:	2a03      	cmp	r2, #3
 8002c80:	d0d5      	beq.n	8002c2e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002c82:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff ff79 	bl	8002b7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c8c:	233f      	movs	r3, #63	; 0x3f
 8002c8e:	4093      	lsls	r3, r2
 8002c90:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c92:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c94:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c96:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c9c:	e7d4      	b.n	8002c48 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	e7d2      	b.n	8002c48 <HAL_DMA_Init+0xa0>
 8002ca2:	bf00      	nop
 8002ca4:	f010803f 	.word	0xf010803f

08002ca8 <HAL_DMA_DeInit>:
{
 8002ca8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002caa:	4605      	mov	r5, r0
 8002cac:	b320      	cbz	r0, 8002cf8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002cae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	b2dc      	uxtb	r4, r3
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002cc0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002cc2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002cc4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002cc6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002cc8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002cca:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002ccc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002cce:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002cd0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cd2:	f7ff ff53 	bl	8002b7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002cd8:	233f      	movs	r3, #63	; 0x3f
 8002cda:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002cdc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002ce0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002ce4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cea:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002cec:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002cf0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002cf8:	2401      	movs	r4, #1
 8002cfa:	e7fb      	b.n	8002cf4 <HAL_DMA_DeInit+0x4c>

08002cfc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002cfe:	6804      	ldr	r4, [r0, #0]
 8002d00:	9d04      	ldr	r5, [sp, #16]
 8002d02:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002d04:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002d08:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002d0c:	4333      	orrs	r3, r6
 8002d0e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d10:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002d12:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d18:	d130      	bne.n	8002d7c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002d1a:	6886      	ldr	r6, [r0, #8]
 8002d1c:	b11e      	cbz	r6, 8002d26 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002d1e:	2e01      	cmp	r6, #1
 8002d20:	d103      	bne.n	8002d2a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002d22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d26:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d2a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002d2c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002d30:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002d34:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d36:	d107      	bne.n	8002d48 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002d38:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002d3a:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002d3c:	02db      	lsls	r3, r3, #11
 8002d3e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002d42:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002d46:	e7ee      	b.n	8002d26 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d48:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d4a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d4e:	d10a      	bne.n	8002d66 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002d50:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002d52:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d54:	0289      	lsls	r1, r1, #10
 8002d56:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002d5a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8002d5e:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d60:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8002d64:	e7df      	b.n	8002d26 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002d66:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002d68:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d6a:	0209      	lsls	r1, r1, #8
 8002d6c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002d70:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002d74:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d76:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002d7a:	e7d4      	b.n	8002d26 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d7c:	60e1      	str	r1, [r4, #12]
}
 8002d7e:	e7d3      	b.n	8002d28 <DMA2D_SetConfig+0x2c>

08002d80 <HAL_DMA2D_MspInit>:
}
 8002d80:	4770      	bx	lr

08002d82 <HAL_DMA2D_Init>:
{
 8002d82:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002d84:	4604      	mov	r4, r0
 8002d86:	b330      	cbz	r0, 8002dd6 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d88:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d90:	b91b      	cbnz	r3, 8002d9a <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002d92:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002d96:	f7ff fff3 	bl	8002d80 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002daa:	430b      	orrs	r3, r1
 8002dac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002dae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002db0:	68a1      	ldr	r1, [r4, #8]
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002dba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dbc:	68e1      	ldr	r1, [r4, #12]
 8002dbe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dca:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dcc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dce:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002dd4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	e7fc      	b.n	8002dd4 <HAL_DMA2D_Init+0x52>

08002dda <HAL_DMA2D_Start>:
{
 8002dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002ddc:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002de0:	2d01      	cmp	r5, #1
{
 8002de2:	4604      	mov	r4, r0
 8002de4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8002de8:	d00f      	beq.n	8002e0a <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dea:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002dee:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002df0:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002df2:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002df6:	9500      	str	r5, [sp, #0]
 8002df8:	f7ff ff80 	bl	8002cfc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	4333      	orrs	r3, r6
 8002e02:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002e04:	2000      	movs	r0, #0
}
 8002e06:	b002      	add	sp, #8
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	e7fb      	b.n	8002e06 <HAL_DMA2D_Start+0x2c>

08002e0e <HAL_DMA2D_PollForTransfer>:
{
 8002e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	07db      	lsls	r3, r3, #31
{
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e1e:	d417      	bmi.n	8002e50 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e26:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002e28:	069e      	lsls	r6, r3, #26
 8002e2a:	d506      	bpl.n	8002e3a <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002e2c:	f7ff fe26 	bl	8002a7c <HAL_GetTick>
 8002e30:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	06d2      	lsls	r2, r2, #27
 8002e38:	d543      	bpl.n	8002ec2 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	2212      	movs	r2, #18
 8002e3e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002e40:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002e48:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002e50:	f7ff fe14 	bl	8002a7c <HAL_GetTick>
 8002e54:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	0792      	lsls	r2, r2, #30
 8002e5c:	d4e0      	bmi.n	8002e20 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e62:	9a01      	ldr	r2, [sp, #4]
 8002e64:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002e68:	d017      	beq.n	8002e9a <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e6e:	bf42      	ittt	mi
 8002e70:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e72:	f042 0202 	orrmi.w	r2, r2, #2
 8002e76:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e78:	9a01      	ldr	r2, [sp, #4]
 8002e7a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e7c:	bf42      	ittt	mi
 8002e7e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e80:	f042 0201 	orrmi.w	r2, r2, #1
 8002e84:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e86:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e88:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002e90:	2300      	movs	r3, #0
 8002e92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002e96:	2001      	movs	r0, #1
 8002e98:	e7d8      	b.n	8002e4c <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002e9a:	1c69      	adds	r1, r5, #1
 8002e9c:	d0dc      	beq.n	8002e58 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7ff fded 	bl	8002a7c <HAL_GetTick>
 8002ea2:	1b80      	subs	r0, r0, r6
 8002ea4:	42a8      	cmp	r0, r5
 8002ea6:	d801      	bhi.n	8002eac <HAL_DMA2D_PollForTransfer+0x9e>
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	d1d4      	bne.n	8002e56 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002eae:	f043 0320 	orr.w	r3, r3, #32
 8002eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002eb4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002eb6:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002eb8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002ebc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002ec0:	e7c4      	b.n	8002e4c <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ec6:	9a01      	ldr	r2, [sp, #4]
 8002ec8:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002ecc:	d016      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ece:	9a01      	ldr	r2, [sp, #4]
 8002ed0:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ed2:	bf42      	ittt	mi
 8002ed4:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002ed6:	f042 0204 	orrmi.w	r2, r2, #4
 8002eda:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002edc:	9a01      	ldr	r2, [sp, #4]
 8002ede:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ee0:	bf42      	ittt	mi
 8002ee2:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002ee4:	f042 0202 	orrmi.w	r2, r2, #2
 8002ee8:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eea:	9a01      	ldr	r2, [sp, #4]
 8002eec:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eee:	bf42      	ittt	mi
 8002ef0:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002ef2:	f042 0201 	orrmi.w	r2, r2, #1
 8002ef6:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ef8:	2229      	movs	r2, #41	; 0x29
 8002efa:	e7c5      	b.n	8002e88 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002efc:	1c69      	adds	r1, r5, #1
 8002efe:	d099      	beq.n	8002e34 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff fdbc 	bl	8002a7c <HAL_GetTick>
 8002f04:	1b80      	subs	r0, r0, r6
 8002f06:	42a8      	cmp	r0, r5
 8002f08:	d8d0      	bhi.n	8002eac <HAL_DMA2D_PollForTransfer+0x9e>
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	d191      	bne.n	8002e32 <HAL_DMA2D_PollForTransfer+0x24>
 8002f0e:	e7cd      	b.n	8002eac <HAL_DMA2D_PollForTransfer+0x9e>

08002f10 <HAL_DMA2D_ConfigLayer>:
{
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002f12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f04f 0302 	mov.w	r3, #2
 8002f1c:	d02b      	beq.n	8002f76 <HAL_DMA2D_ConfigLayer+0x66>
 8002f1e:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f20:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002f24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f28:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002f2c:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8002f30:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002f32:	4f18      	ldr	r7, [pc, #96]	; (8002f94 <HAL_DMA2D_ConfigLayer+0x84>)
 8002f34:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f38:	3c09      	subs	r4, #9
 8002f3a:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f3c:	bf9c      	itt	ls
 8002f3e:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8002f42:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f44:	ea4f 1601 	mov.w	r6, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f48:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f4a:	bf88      	it	hi
 8002f4c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f50:	b999      	cbnz	r1, 8002f7a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f54:	4039      	ands	r1, r7
 8002f56:	430a      	orrs	r2, r1
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f5a:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f5c:	6982      	ldr	r2, [r0, #24]
 8002f5e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f60:	d803      	bhi.n	8002f6a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f62:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002f64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002f70:	2300      	movs	r3, #0
 8002f72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002f76:	4618      	mov	r0, r3
}
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	4039      	ands	r1, r7
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f82:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f84:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f86:	6992      	ldr	r2, [r2, #24]
 8002f88:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f8a:	bf9c      	itt	ls
 8002f8c:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8002f90:	621d      	strls	r5, [r3, #32]
 8002f92:	e7ea      	b.n	8002f6a <HAL_DMA2D_ConfigLayer+0x5a>
 8002f94:	00fcfff0 	.word	0x00fcfff0

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8003160 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa0:	4a6d      	ldr	r2, [pc, #436]	; (8003158 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002fa6:	2401      	movs	r4, #1
 8002fa8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002faa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002fae:	43ac      	bics	r4, r5
 8002fb0:	f040 80b9 	bne.w	8003126 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb4:	684d      	ldr	r5, [r1, #4]
 8002fb6:	f005 0403 	and.w	r4, r5, #3
 8002fba:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fbe:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fcc:	d834      	bhi.n	8003038 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002fce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd4:	68cf      	ldr	r7, [r1, #12]
 8002fd6:	fa07 f708 	lsl.w	r7, r7, r8
 8002fda:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002fde:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002fe0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002fea:	409f      	lsls	r7, r3
 8002fec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002ff0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ff2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff8:	688f      	ldr	r7, [r1, #8]
 8002ffa:	fa07 f708 	lsl.w	r7, r7, r8
 8002ffe:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003002:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003004:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003006:	d119      	bne.n	800303c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003008:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800300c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003010:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003014:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003018:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800301c:	f04f 0e0f 	mov.w	lr, #15
 8003020:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003024:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003028:	690f      	ldr	r7, [r1, #16]
 800302a:	fa07 f70b 	lsl.w	r7, r7, fp
 800302e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	f8ca 7020 	str.w	r7, [sl, #32]
 8003036:	e001      	b.n	800303c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003038:	2c03      	cmp	r4, #3
 800303a:	d1da      	bne.n	8002ff2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800303c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003042:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003044:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003046:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800304a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800304c:	d06b      	beq.n	8003126 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	f04f 0a00 	mov.w	sl, #0
 8003052:	f8cd a004 	str.w	sl, [sp, #4]
 8003056:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800305a:	4c40      	ldr	r4, [pc, #256]	; (800315c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003060:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8003064:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8003068:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800306c:	9601      	str	r6, [sp, #4]
 800306e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003070:	f023 0603 	bic.w	r6, r3, #3
 8003074:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003078:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800307c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003080:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003084:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003088:	270f      	movs	r7, #15
 800308a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003090:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003094:	d04e      	beq.n	8003134 <HAL_GPIO_Init+0x19c>
 8003096:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800309a:	42a0      	cmp	r0, r4
 800309c:	d04c      	beq.n	8003138 <HAL_GPIO_Init+0x1a0>
 800309e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030a2:	42a0      	cmp	r0, r4
 80030a4:	d04a      	beq.n	800313c <HAL_GPIO_Init+0x1a4>
 80030a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030aa:	42a0      	cmp	r0, r4
 80030ac:	d048      	beq.n	8003140 <HAL_GPIO_Init+0x1a8>
 80030ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030b2:	42a0      	cmp	r0, r4
 80030b4:	d046      	beq.n	8003144 <HAL_GPIO_Init+0x1ac>
 80030b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d044      	beq.n	8003148 <HAL_GPIO_Init+0x1b0>
 80030be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030c2:	42a0      	cmp	r0, r4
 80030c4:	d042      	beq.n	800314c <HAL_GPIO_Init+0x1b4>
 80030c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030ca:	42a0      	cmp	r0, r4
 80030cc:	d040      	beq.n	8003150 <HAL_GPIO_Init+0x1b8>
 80030ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030d2:	42a0      	cmp	r0, r4
 80030d4:	d03e      	beq.n	8003154 <HAL_GPIO_Init+0x1bc>
 80030d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030da:	42a0      	cmp	r0, r4
 80030dc:	bf0c      	ite	eq
 80030de:	2409      	moveq	r4, #9
 80030e0:	240a      	movne	r4, #10
 80030e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80030e6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80030ea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80030f2:	bf54      	ite	pl
 80030f4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80030f6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80030fa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80030fc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030fe:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003100:	bf54      	ite	pl
 8003102:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003104:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003108:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800310a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800310c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800310e:	bf54      	ite	pl
 8003110:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003112:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003116:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800311c:	bf54      	ite	pl
 800311e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003120:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003124:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003126:	3301      	adds	r3, #1
 8003128:	2b10      	cmp	r3, #16
 800312a:	f47f af3b 	bne.w	8002fa4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800312e:	b003      	add	sp, #12
 8003130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003134:	4654      	mov	r4, sl
 8003136:	e7d4      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003138:	2401      	movs	r4, #1
 800313a:	e7d2      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 800313c:	2402      	movs	r4, #2
 800313e:	e7d0      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003140:	2403      	movs	r4, #3
 8003142:	e7ce      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003144:	2404      	movs	r4, #4
 8003146:	e7cc      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003148:	2405      	movs	r4, #5
 800314a:	e7ca      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 800314c:	2406      	movs	r4, #6
 800314e:	e7c8      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003150:	2407      	movs	r4, #7
 8003152:	e7c6      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003154:	2408      	movs	r4, #8
 8003156:	e7c4      	b.n	80030e2 <HAL_GPIO_Init+0x14a>
 8003158:	40013c00 	.word	0x40013c00
 800315c:	40020000 	.word	0x40020000
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003164:	6903      	ldr	r3, [r0, #16]
 8003166:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003168:	bf14      	ite	ne
 800316a:	2001      	movne	r0, #1
 800316c:	2000      	moveq	r0, #0
 800316e:	4770      	bx	lr

08003170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	b10a      	cbz	r2, 8003176 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003172:	6181      	str	r1, [r0, #24]
  }
}
 8003174:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003176:	0409      	lsls	r1, r1, #16
 8003178:	e7fb      	b.n	8003172 <HAL_GPIO_WritePin+0x2>

0800317a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800317a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800317c:	ea01 0203 	and.w	r2, r1, r3
 8003180:	ea21 0103 	bic.w	r1, r1, r3
 8003184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003188:	6181      	str	r1, [r0, #24]
}
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800318e:	6951      	ldr	r1, [r2, #20]
 8003190:	4201      	tst	r1, r0
{
 8003192:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003194:	d002      	beq.n	800319c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003196:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003198:	f002 f9f6 	bl	8005588 <HAL_GPIO_EXTI_Callback>
  }
}
 800319c:	bd08      	pop	{r3, pc}
 800319e:	bf00      	nop
 80031a0:	40013c00 	.word	0x40013c00

080031a4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a4:	6801      	ldr	r1, [r0, #0]
 80031a6:	694b      	ldr	r3, [r1, #20]
 80031a8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	d010      	beq.n	80031d4 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80031b6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80031d0:	2001      	movs	r0, #1
 80031d2:	4770      	bx	lr
  }
  return HAL_OK;
 80031d4:	4618      	mov	r0, r3
}
 80031d6:	4770      	bx	lr

080031d8 <I2C_WaitOnFlagUntilTimeout>:
{
 80031d8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80031dc:	4606      	mov	r6, r0
 80031de:	460f      	mov	r7, r1
 80031e0:	4691      	mov	r9, r2
 80031e2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	f1ba 0f01 	cmp.w	sl, #1
 80031ee:	bf0c      	ite	eq
 80031f0:	695c      	ldreq	r4, [r3, #20]
 80031f2:	699c      	ldrne	r4, [r3, #24]
 80031f4:	ea27 0404 	bic.w	r4, r7, r4
 80031f8:	b2a4      	uxth	r4, r4
 80031fa:	fab4 f484 	clz	r4, r4
 80031fe:	0964      	lsrs	r4, r4, #5
 8003200:	45a1      	cmp	r9, r4
 8003202:	d001      	beq.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003204:	2000      	movs	r0, #0
 8003206:	e017      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003208:	1c6a      	adds	r2, r5, #1
 800320a:	d0ee      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7ff fc36 	bl	8002a7c <HAL_GetTick>
 8003210:	9b08      	ldr	r3, [sp, #32]
 8003212:	1ac0      	subs	r0, r0, r3
 8003214:	42a8      	cmp	r0, r5
 8003216:	d801      	bhi.n	800321c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003218:	2d00      	cmp	r5, #0
 800321a:	d1e5      	bne.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800321c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800321e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003220:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003222:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003226:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800322a:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800322c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003236:	2001      	movs	r0, #1
}
 8003238:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003240:	4604      	mov	r4, r0
 8003242:	460f      	mov	r7, r1
 8003244:	4616      	mov	r6, r2
 8003246:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003248:	6825      	ldr	r5, [r4, #0]
 800324a:	6968      	ldr	r0, [r5, #20]
 800324c:	ea27 0000 	bic.w	r0, r7, r0
 8003250:	b280      	uxth	r0, r0
 8003252:	b1b8      	cbz	r0, 8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003254:	696b      	ldr	r3, [r5, #20]
 8003256:	055a      	lsls	r2, r3, #21
 8003258:	d516      	bpl.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003260:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003266:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003276:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003278:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800327e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
}
 8003284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003288:	1c73      	adds	r3, r6, #1
 800328a:	d0de      	beq.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7ff fbf6 	bl	8002a7c <HAL_GetTick>
 8003290:	eba0 0008 	sub.w	r0, r0, r8
 8003294:	42b0      	cmp	r0, r6
 8003296:	d801      	bhi.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003298:	2e00      	cmp	r6, #0
 800329a:	d1d5      	bne.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800329e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	e7e4      	b.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080032b2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80032b2:	b570      	push	{r4, r5, r6, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ba:	6821      	ldr	r1, [r4, #0]
 80032bc:	694b      	ldr	r3, [r1, #20]
 80032be:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80032c2:	d001      	beq.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80032c4:	2000      	movs	r0, #0
 80032c6:	e010      	b.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032c8:	694a      	ldr	r2, [r1, #20]
 80032ca:	06d2      	lsls	r2, r2, #27
 80032cc:	d50e      	bpl.n	80032ec <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ce:	f06f 0210 	mvn.w	r2, #16
 80032d2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80032e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80032e8:	2001      	movs	r0, #1
}
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ec:	f7ff fbc6 	bl	8002a7c <HAL_GetTick>
 80032f0:	1b80      	subs	r0, r0, r6
 80032f2:	42a8      	cmp	r0, r5
 80032f4:	d801      	bhi.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	d1df      	bne.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003304:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800330a:	f042 0220 	orr.w	r2, r2, #32
 800330e:	e7e8      	b.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003310 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	075b      	lsls	r3, r3, #29
 800331e:	d501      	bpl.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003320:	2000      	movs	r0, #0
}
 8003322:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff ff3d 	bl	80031a4 <I2C_IsAcknowledgeFailed>
 800332a:	b9a8      	cbnz	r0, 8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800332c:	1c6a      	adds	r2, r5, #1
 800332e:	d0f3      	beq.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003330:	f7ff fba4 	bl	8002a7c <HAL_GetTick>
 8003334:	1b80      	subs	r0, r0, r6
 8003336:	42a8      	cmp	r0, r5
 8003338:	d801      	bhi.n	800333e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800333a:	2d00      	cmp	r5, #0
 800333c:	d1ec      	bne.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800334e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003358:	2001      	movs	r0, #1
 800335a:	e7e2      	b.n	8003322 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800335c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	460d      	mov	r5, r1
 8003362:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	d501      	bpl.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800336c:	2000      	movs	r0, #0
}
 800336e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff ff17 	bl	80031a4 <I2C_IsAcknowledgeFailed>
 8003376:	b9a8      	cbnz	r0, 80033a4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003378:	1c6a      	adds	r2, r5, #1
 800337a:	d0f3      	beq.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7ff fb7e 	bl	8002a7c <HAL_GetTick>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	42a8      	cmp	r0, r5
 8003384:	d801      	bhi.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003386:	2d00      	cmp	r5, #0
 8003388:	d1ec      	bne.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800339a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033a4:	2001      	movs	r0, #1
 80033a6:	e7e2      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080033a8 <I2C_RequestMemoryWrite>:
{
 80033a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ac:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	6802      	ldr	r2, [r0, #0]
{
 80033b0:	b085      	sub	sp, #20
 80033b2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80033b6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]
{
 80033c0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	463b      	mov	r3, r7
 80033c4:	f8cd 8000 	str.w	r8, [sp]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80033ce:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d0:	f7ff ff02 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	b138      	cbz	r0, 80033e8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	d502      	bpl.n	80033e4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80033e4:	2003      	movs	r0, #3
 80033e6:	e00a      	b.n	80033fe <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80033ec:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ee:	4919      	ldr	r1, [pc, #100]	; (8003454 <I2C_RequestMemoryWrite+0xac>)
 80033f0:	4643      	mov	r3, r8
 80033f2:	463a      	mov	r2, r7
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff ff21 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fa:	b118      	cbz	r0, 8003404 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80033fc:	2001      	movs	r0, #1
}
 80033fe:	b005      	add	sp, #20
 8003400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	9003      	str	r0, [sp, #12]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	9203      	str	r2, [sp, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003410:	4642      	mov	r2, r8
 8003412:	4639      	mov	r1, r7
 8003414:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003418:	f7ff ffa0 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 800341c:	b140      	cbz	r0, 8003430 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003420:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	bf01      	itttt	eq
 8003424:	6822      	ldreq	r2, [r4, #0]
 8003426:	6813      	ldreq	r3, [r2, #0]
 8003428:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800342c:	6013      	streq	r3, [r2, #0]
 800342e:	e7e5      	b.n	80033fc <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003430:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003436:	d102      	bne.n	800343e <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	b2ed      	uxtb	r5, r5
 800343a:	611d      	str	r5, [r3, #16]
 800343c:	e7df      	b.n	80033fe <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800343e:	0a2a      	lsrs	r2, r5, #8
 8003440:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	4639      	mov	r1, r7
 8003444:	4642      	mov	r2, r8
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff ff88 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	2800      	cmp	r0, #0
 800344e:	d1e6      	bne.n	800341e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	e7f1      	b.n	8003438 <I2C_RequestMemoryWrite+0x90>
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_RequestMemoryRead>:
{
 8003458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	6803      	ldr	r3, [r0, #0]
{
 8003460:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003468:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346a:	681a      	ldr	r2, [r3, #0]
{
 800346c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003474:	601a      	str	r2, [r3, #0]
{
 8003476:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003478:	463b      	mov	r3, r7
 800347a:	f8cd 8000 	str.w	r8, [sp]
 800347e:	2200      	movs	r2, #0
 8003480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003484:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003486:	f7ff fea7 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	b148      	cbz	r0, 80034a2 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	d502      	bpl.n	800349a <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003498:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
}
 800349c:	b004      	add	sp, #16
 800349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a2:	fa5f f986 	uxtb.w	r9, r6
 80034a6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80034aa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ac:	492a      	ldr	r1, [pc, #168]	; (8003558 <I2C_RequestMemoryRead+0x100>)
 80034ae:	4643      	mov	r3, r8
 80034b0:	463a      	mov	r2, r7
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fec2 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b8:	b108      	cbz	r0, 80034be <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80034ba:	2001      	movs	r0, #1
 80034bc:	e7ee      	b.n	800349c <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	9003      	str	r0, [sp, #12]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	9203      	str	r2, [sp, #12]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	4642      	mov	r2, r8
 80034cc:	4639      	mov	r1, r7
 80034ce:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d2:	f7ff ff43 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 80034d6:	b140      	cbz	r0, 80034ea <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034da:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	bf01      	itttt	eq
 80034de:	6822      	ldreq	r2, [r4, #0]
 80034e0:	6813      	ldreq	r3, [r2, #0]
 80034e2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80034e6:	6013      	streq	r3, [r2, #0]
 80034e8:	e7e7      	b.n	80034ba <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ea:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034f0:	d11a      	bne.n	8003528 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f2:	b2ed      	uxtb	r5, r5
 80034f4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f6:	4642      	mov	r2, r8
 80034f8:	4639      	mov	r1, r7
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7ff ff2e 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8003500:	2800      	cmp	r0, #0
 8003502:	d1e9      	bne.n	80034d8 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800350e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003512:	4602      	mov	r2, r0
 8003514:	f8cd 8000 	str.w	r8, [sp]
 8003518:	463b      	mov	r3, r7
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff fe5c 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	b160      	cbz	r0, 800353e <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003524:	6813      	ldr	r3, [r2, #0]
 8003526:	e7b3      	b.n	8003490 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003528:	0a2a      	lsrs	r2, r5, #8
 800352a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	4639      	mov	r1, r7
 800352e:	4642      	mov	r2, r8
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff ff13 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8003536:	2800      	cmp	r0, #0
 8003538:	d1ce      	bne.n	80034d8 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	e7d9      	b.n	80034f2 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800353e:	f049 0301 	orr.w	r3, r9, #1
 8003542:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <I2C_RequestMemoryRead+0x100>)
 8003546:	4643      	mov	r3, r8
 8003548:	463a      	mov	r2, r7
 800354a:	4620      	mov	r0, r4
 800354c:	f7ff fe76 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003550:	3800      	subs	r0, #0
 8003552:	bf18      	it	ne
 8003554:	2001      	movne	r0, #1
 8003556:	e7a1      	b.n	800349c <I2C_RequestMemoryRead+0x44>
 8003558:	00010002 	.word	0x00010002

0800355c <HAL_I2C_MspInit>:
}
 800355c:	4770      	bx	lr
	...

08003560 <HAL_I2C_Init>:
{
 8003560:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003562:	4604      	mov	r4, r0
 8003564:	b908      	cbnz	r0, 800356a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
}
 8003568:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800356e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003572:	b91b      	cbnz	r3, 800357c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003574:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003578:	f7ff fff0 	bl	800355c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800359c:	f000 fe2a 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_I2C_Init+0x140>)
 80035a2:	6865      	ldr	r5, [r4, #4]
 80035a4:	429d      	cmp	r5, r3
 80035a6:	bf94      	ite	ls
 80035a8:	4b3e      	ldrls	r3, [pc, #248]	; (80036a4 <HAL_I2C_Init+0x144>)
 80035aa:	4b3f      	ldrhi	r3, [pc, #252]	; (80036a8 <HAL_I2C_Init+0x148>)
 80035ac:	4298      	cmp	r0, r3
 80035ae:	bf8c      	ite	hi
 80035b0:	2300      	movhi	r3, #0
 80035b2:	2301      	movls	r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1d6      	bne.n	8003566 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035b8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ba:	4e39      	ldr	r6, [pc, #228]	; (80036a0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035bc:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80035be:	493b      	ldr	r1, [pc, #236]	; (80036ac <HAL_I2C_Init+0x14c>)
 80035c0:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ca:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035cc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ce:	bf88      	it	hi
 80035d0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 80035d4:	6a13      	ldr	r3, [r2, #32]
 80035d6:	bf88      	it	hi
 80035d8:	4371      	mulhi	r1, r6
 80035da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035de:	bf84      	itt	hi
 80035e0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80035e4:	fbb1 f1f6 	udivhi	r1, r1, r6
 80035e8:	3101      	adds	r1, #1
 80035ea:	4319      	orrs	r1, r3
 80035ec:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035ee:	69d1      	ldr	r1, [r2, #28]
 80035f0:	1e43      	subs	r3, r0, #1
 80035f2:	482b      	ldr	r0, [pc, #172]	; (80036a0 <HAL_I2C_Init+0x140>)
 80035f4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80035f8:	4285      	cmp	r5, r0
 80035fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035fe:	d832      	bhi.n	8003666 <HAL_I2C_Init+0x106>
 8003600:	006d      	lsls	r5, r5, #1
 8003602:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003606:	fbb3 f3f5 	udiv	r3, r3, r5
 800360a:	3301      	adds	r3, #1
 800360c:	4203      	tst	r3, r0
 800360e:	d042      	beq.n	8003696 <HAL_I2C_Init+0x136>
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	430b      	orrs	r3, r1
 8003616:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003618:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	4303      	orrs	r3, r0
 8003620:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003624:	430b      	orrs	r3, r1
 8003626:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003628:	6891      	ldr	r1, [r2, #8]
 800362a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800362e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003632:	4303      	orrs	r3, r0
 8003634:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800363c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003640:	68d1      	ldr	r1, [r2, #12]
 8003642:	4303      	orrs	r3, r0
 8003644:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003648:	430b      	orrs	r3, r1
 800364a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003656:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003664:	e780      	b.n	8003568 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003666:	68a0      	ldr	r0, [r4, #8]
 8003668:	b950      	cbnz	r0, 8003680 <HAL_I2C_Init+0x120>
 800366a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800366e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	b17b      	cbz	r3, 800369a <HAL_I2C_Init+0x13a>
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	e7c9      	b.n	8003614 <HAL_I2C_Init+0xb4>
 8003680:	2019      	movs	r0, #25
 8003682:	4345      	muls	r5, r0
 8003684:	fbb3 f3f5 	udiv	r3, r3, r5
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	b123      	cbz	r3, 800369a <HAL_I2C_Init+0x13a>
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	e7be      	b.n	8003614 <HAL_I2C_Init+0xb4>
 8003696:	2304      	movs	r3, #4
 8003698:	e7bc      	b.n	8003614 <HAL_I2C_Init+0xb4>
 800369a:	2301      	movs	r3, #1
 800369c:	e7ba      	b.n	8003614 <HAL_I2C_Init+0xb4>
 800369e:	bf00      	nop
 80036a0:	000186a0 	.word	0x000186a0
 80036a4:	001e847f 	.word	0x001e847f
 80036a8:	003d08ff 	.word	0x003d08ff
 80036ac:	000f4240 	.word	0x000f4240

080036b0 <HAL_I2C_MspDeInit>:
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2C_DeInit>:
{
 80036b2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80036b4:	4604      	mov	r4, r0
 80036b6:	b198      	cbz	r0, 80036e0 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80036b8:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ba:	2324      	movs	r3, #36	; 0x24
 80036bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80036c8:	f7ff fff2 	bl	80036b0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036cc:	2000      	movs	r0, #0
 80036ce:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80036d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80036d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80036de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	e7fc      	b.n	80036de <HAL_I2C_DeInit+0x2c>

080036e4 <HAL_I2C_Mem_Write>:
{
 80036e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036e8:	4604      	mov	r4, r0
 80036ea:	4699      	mov	r9, r3
 80036ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80036ee:	460f      	mov	r7, r1
 80036f0:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff f9c3 	bl	8002a7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80036fa:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80036fc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	d003      	beq.n	8003708 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003700:	2002      	movs	r0, #2
}
 8003702:	b003      	add	sp, #12
 8003704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003708:	9000      	str	r0, [sp, #0]
 800370a:	493c      	ldr	r1, [pc, #240]	; (80037fc <HAL_I2C_Mem_Write+0x118>)
 800370c:	2319      	movs	r3, #25
 800370e:	2201      	movs	r2, #1
 8003710:	4620      	mov	r0, r4
 8003712:	f7ff fd61 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003716:	2800      	cmp	r0, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800371a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d0ee      	beq.n	8003700 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003722:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003724:	2301      	movs	r3, #1
 8003726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800372a:	6803      	ldr	r3, [r0, #0]
 800372c:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800372e:	bf5e      	ittt	pl
 8003730:	6803      	ldrpl	r3, [r0, #0]
 8003732:	f043 0301 	orrpl.w	r3, r3, #1
 8003736:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003738:	6803      	ldr	r3, [r0, #0]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003740:	2321      	movs	r3, #33	; 0x21
 8003742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003752:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003754:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003758:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_I2C_Mem_Write+0x11c>)
 8003760:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003762:	e9cd 6500 	strd	r6, r5, [sp]
 8003766:	464b      	mov	r3, r9
 8003768:	4642      	mov	r2, r8
 800376a:	4639      	mov	r1, r7
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff fe1b 	bl	80033a8 <I2C_RequestMemoryWrite>
 8003772:	2800      	cmp	r0, #0
 8003774:	d02a      	beq.n	80037cc <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8003776:	2001      	movs	r0, #1
 8003778:	e7c3      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	f7ff fdef 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 800377e:	b140      	cbz	r0, 8003792 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003782:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	bf01      	itttt	eq
 8003786:	6822      	ldreq	r2, [r4, #0]
 8003788:	6813      	ldreq	r3, [r2, #0]
 800378a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800378e:	6013      	streq	r3, [r2, #0]
 8003790:	e7f1      	b.n	8003776 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003794:	6827      	ldr	r7, [r4, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f812 1b01 	ldrb.w	r1, [r2], #1
 800379c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800379e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80037a4:	3a01      	subs	r2, #1
 80037a6:	b292      	uxth	r2, r2
 80037a8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80037ac:	1e48      	subs	r0, r1, #1
 80037ae:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b0:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80037b2:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b4:	d50a      	bpl.n	80037cc <HAL_I2C_Mem_Write+0xe8>
 80037b6:	b148      	cbz	r0, 80037cc <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b8:	785a      	ldrb	r2, [r3, #1]
 80037ba:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80037bc:	3302      	adds	r3, #2
 80037be:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80037c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037c2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80037c4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80037c6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80037c8:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037ca:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	462a      	mov	r2, r5
 80037d0:	4631      	mov	r1, r6
 80037d2:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1d0      	bne.n	800377a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d8:	f7ff fd9a 	bl	8003310 <I2C_WaitOnBTFFlagUntilTimeout>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1cf      	bne.n	8003780 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	2320      	movs	r3, #32
 80037ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80037f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80037f8:	e783      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e>
 80037fa:	bf00      	nop
 80037fc:	00100002 	.word	0x00100002
 8003800:	ffff0000 	.word	0xffff0000

08003804 <HAL_I2C_Mem_Read>:
{
 8003804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003808:	4604      	mov	r4, r0
 800380a:	b087      	sub	sp, #28
 800380c:	4699      	mov	r9, r3
 800380e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003810:	460d      	mov	r5, r1
 8003812:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff f932 	bl	8002a7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800381c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800381e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	d004      	beq.n	800382c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8003822:	2502      	movs	r5, #2
}
 8003824:	4628      	mov	r0, r5
 8003826:	b007      	add	sp, #28
 8003828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382c:	9000      	str	r0, [sp, #0]
 800382e:	4976      	ldr	r1, [pc, #472]	; (8003a08 <HAL_I2C_Mem_Read+0x204>)
 8003830:	2319      	movs	r3, #25
 8003832:	2201      	movs	r2, #1
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff fccf 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 800383a:	2800      	cmp	r0, #0
 800383c:	d1f1      	bne.n	8003822 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800383e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003842:	2b01      	cmp	r3, #1
 8003844:	d0ed      	beq.n	8003822 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003848:	2301      	movs	r3, #1
 800384a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384e:	6803      	ldr	r3, [r0, #0]
 8003850:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003852:	bf5e      	ittt	pl
 8003854:	6803      	ldrpl	r3, [r0, #0]
 8003856:	f043 0301 	orrpl.w	r3, r3, #1
 800385a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003862:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003864:	2322      	movs	r3, #34	; 0x22
 8003866:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	2300      	movs	r3, #0
 8003872:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003876:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003878:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800387c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003880:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003882:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_I2C_Mem_Read+0x208>)
 8003884:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	4629      	mov	r1, r5
 8003888:	e9cd 7600 	strd	r7, r6, [sp]
 800388c:	464b      	mov	r3, r9
 800388e:	4642      	mov	r2, r8
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fde1 	bl	8003458 <I2C_RequestMemoryRead>
 8003896:	4605      	mov	r5, r0
 8003898:	b108      	cbz	r0, 800389e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800389a:	2501      	movs	r5, #1
 800389c:	e7c2      	b.n	8003824 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800389e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a0:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80038a2:	b9b2      	cbnz	r2, 80038d2 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	9002      	str	r0, [sp, #8]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	9202      	str	r2, [sp, #8]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	9202      	str	r2, [sp, #8]
 80038ae:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b8:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003a10 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80038bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12c      	bne.n	800391c <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	2220      	movs	r2, #32
 80038c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80038c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80038d0:	e7a8      	b.n	8003824 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	d10a      	bne.n	80038ec <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	9003      	str	r0, [sp, #12]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	9203      	str	r2, [sp, #12]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	9203      	str	r2, [sp, #12]
 80038e8:	9a03      	ldr	r2, [sp, #12]
 80038ea:	e7e1      	b.n	80038b0 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80038ec:	2a02      	cmp	r2, #2
 80038ee:	d10e      	bne.n	800390e <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003900:	9004      	str	r0, [sp, #16]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	9204      	str	r2, [sp, #16]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	9b04      	ldr	r3, [sp, #16]
 800390c:	e7d4      	b.n	80038b8 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	9005      	str	r0, [sp, #20]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	9205      	str	r2, [sp, #20]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	9305      	str	r3, [sp, #20]
 8003918:	9b05      	ldr	r3, [sp, #20]
 800391a:	e7cd      	b.n	80038b8 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800391c:	2b03      	cmp	r3, #3
 800391e:	d856      	bhi.n	80039ce <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8003920:	2b01      	cmp	r3, #1
 8003922:	d115      	bne.n	8003950 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003924:	4632      	mov	r2, r6
 8003926:	4639      	mov	r1, r7
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fcc2 	bl	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800392e:	2800      	cmp	r0, #0
 8003930:	d1b3      	bne.n	800389a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003938:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003940:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800394e:	e7b5      	b.n	80038bc <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003950:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003952:	9600      	str	r6, [sp, #0]
 8003954:	463b      	mov	r3, r7
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	4641      	mov	r1, r8
 800395c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800395e:	d119      	bne.n	8003994 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003960:	f7ff fc3a 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003964:	2800      	cmp	r0, #0
 8003966:	d198      	bne.n	800389a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003976:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003978:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800397a:	1c53      	adds	r3, r2, #1
 800397c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800397e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003984:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003986:	3b01      	subs	r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	7053      	strb	r3, [r2, #1]
 8003992:	e7d2      	b.n	800393a <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003994:	f7ff fc20 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003998:	2800      	cmp	r0, #0
 800399a:	f47f af7e 	bne.w	800389a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80039ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80039b2:	3301      	adds	r3, #1
 80039b4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80039b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80039bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	4602      	mov	r2, r0
 80039c6:	463b      	mov	r3, r7
 80039c8:	4641      	mov	r1, r8
 80039ca:	4620      	mov	r0, r4
 80039cc:	e7c8      	b.n	8003960 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	4632      	mov	r2, r6
 80039d0:	4639      	mov	r1, r7
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff fc6d 	bl	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039d8:	2800      	cmp	r0, #0
 80039da:	f47f af5e 	bne.w	800389a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039e8:	1c53      	adds	r3, r2, #1
 80039ea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80039ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80039f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	0749      	lsls	r1, r1, #29
 8003a00:	f57f af5c 	bpl.w	80038bc <HAL_I2C_Mem_Read+0xb8>
 8003a04:	e7c3      	b.n	800398e <HAL_I2C_Mem_Read+0x18a>
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000
 8003a10:	00010004 	.word	0x00010004

08003a14 <HAL_I2C_GetState>:
  return hi2c->State;
 8003a14:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003a18:	4770      	bx	lr

08003a1a <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a1a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a1c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a20:	01d2      	lsls	r2, r2, #7
 8003a22:	3284      	adds	r2, #132	; 0x84
 8003a24:	1883      	adds	r3, r0, r2
{
 8003a26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a2a:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a2c:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a2e:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003a30:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a34:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003a38:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a3a:	68c5      	ldr	r5, [r0, #12]
 8003a3c:	f10c 0701 	add.w	r7, ip, #1
 8003a40:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a44:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a48:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a4a:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a4c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a50:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a52:	68c5      	ldr	r5, [r0, #12]
 8003a54:	68ce      	ldr	r6, [r1, #12]
 8003a56:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003a5a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a5c:	689d      	ldr	r5, [r3, #8]
 8003a5e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003a62:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003a64:	68c7      	ldr	r7, [r0, #12]
 8003a66:	688d      	ldr	r5, [r1, #8]
 8003a68:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003a6c:	3501      	adds	r5, #1
 8003a6e:	443d      	add	r5, r7
 8003a70:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8003a74:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003a76:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003a78:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003a7a:	f025 0507 	bic.w	r5, r5, #7
 8003a7e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a80:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003a84:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a86:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003a88:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003a8c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a90:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003a94:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003a98:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003a9c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003aa0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003aa4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003aa6:	695d      	ldr	r5, [r3, #20]
 8003aa8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003aac:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003aae:	694d      	ldr	r5, [r1, #20]
 8003ab0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003ab2:	69dd      	ldr	r5, [r3, #28]
 8003ab4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8003ab8:	f025 0507 	bic.w	r5, r5, #7
 8003abc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003abe:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003ac2:	433d      	orrs	r5, r7
 8003ac4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ac6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ac8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003aca:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ace:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ad0:	b31e      	cbz	r6, 8003b1a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ad2:	2e01      	cmp	r6, #1
 8003ad4:	d023      	beq.n	8003b1e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ad6:	1eb5      	subs	r5, r6, #2
 8003ad8:	2d02      	cmp	r5, #2
 8003ada:	d922      	bls.n	8003b22 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003adc:	2e07      	cmp	r6, #7
 8003ade:	bf0c      	ite	eq
 8003ae0:	2502      	moveq	r5, #2
 8003ae2:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ae4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003ae6:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8003aea:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003aec:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003af0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003af2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003af4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003af6:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003af8:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003afa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003afe:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b00:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003b02:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8003b06:	f024 0407 	bic.w	r4, r4, #7
 8003b0a:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b0c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b0e:	5883      	ldr	r3, [r0, r2]
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	5083      	str	r3, [r0, r2]
}
 8003b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003b1a:	2504      	movs	r5, #4
 8003b1c:	e7e2      	b.n	8003ae4 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003b1e:	2503      	movs	r5, #3
 8003b20:	e7e0      	b.n	8003ae4 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003b22:	2502      	movs	r5, #2
 8003b24:	e7de      	b.n	8003ae4 <LTDC_SetConfig+0xca>

08003b26 <HAL_LTDC_MspInit>:
}
 8003b26:	4770      	bx	lr

08003b28 <HAL_LTDC_Init>:
{
 8003b28:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d063      	beq.n	8003bf8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b30:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003b34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b38:	b91b      	cbnz	r3, 8003b42 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003b3a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003b3e:	f7ff fff2 	bl	8003b26 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003b50:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b52:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003b56:	4302      	orrs	r2, r0
 8003b58:	68e0      	ldr	r0, [r4, #12]
 8003b5a:	6999      	ldr	r1, [r3, #24]
 8003b5c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b5e:	6920      	ldr	r0, [r4, #16]
 8003b60:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b62:	430a      	orrs	r2, r1
 8003b64:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4924      	ldr	r1, [pc, #144]	; (8003bfc <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b6a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003b76:	69a0      	ldr	r0, [r4, #24]
 8003b78:	4302      	orrs	r2, r0
 8003b7a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b7c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b7e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b80:	400a      	ands	r2, r1
 8003b82:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003b8a:	6a20      	ldr	r0, [r4, #32]
 8003b8c:	4302      	orrs	r2, r0
 8003b8e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b90:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b92:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b94:	400a      	ands	r2, r1
 8003b96:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003b9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ba0:	4302      	orrs	r2, r0
 8003ba2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	4011      	ands	r1, r2
 8003ba8:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003baa:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003bac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003bae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003bba:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bbe:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bc2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003bc6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003bd4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	f042 0206 	orr.w	r2, r2, #6
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bea:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bec:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bf2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	e7fc      	b.n	8003bf6 <HAL_LTDC_Init+0xce>
 8003bfc:	f000f800 	.word	0xf000f800

08003c00 <HAL_LTDC_ConfigLayer>:
{
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003c04:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003c08:	2b01      	cmp	r3, #1
{
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	460f      	mov	r7, r1
 8003c0e:	4694      	mov	ip, r2
 8003c10:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8003c14:	d01f      	beq.n	8003c56 <HAL_LTDC_ConfigLayer+0x56>
 8003c16:	f04f 0801 	mov.w	r8, #1
 8003c1a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c1e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c22:	2434      	movs	r4, #52	; 0x34
 8003c24:	460d      	mov	r5, r1
 8003c26:	fb04 6402 	mla	r4, r4, r2, r6
 8003c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2c:	3438      	adds	r4, #56	; 0x38
 8003c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	4662      	mov	r2, ip
 8003c40:	4639      	mov	r1, r7
 8003c42:	f7ff feea 	bl	8003a1a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c46:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003c48:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c4a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c4e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003c52:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003c5c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8003c5c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f04f 0302 	mov.w	r3, #2
 8003c66:	d00c      	beq.n	8003c82 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c6a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003c6e:	6993      	ldr	r3, [r2, #24]
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003c82:	4618      	mov	r0, r3
}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40016800 	.word	0x40016800

08003c8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c94:	4d18      	ldr	r5, [pc, #96]	; (8003cf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_PWREx_EnableOverDrive+0x70>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8003cae:	f7fe fee5 	bl	8002a7c <HAL_GetTick>
 8003cb2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cb4:	686b      	ldr	r3, [r5, #4]
 8003cb6:	03da      	lsls	r2, r3, #15
 8003cb8:	d50b      	bpl.n	8003cd2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cbc:	4d0e      	ldr	r5, [pc, #56]	; (8003cf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8003cc2:	f7fe fedb 	bl	8002a7c <HAL_GetTick>
 8003cc6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cc8:	686b      	ldr	r3, [r5, #4]
 8003cca:	039b      	lsls	r3, r3, #14
 8003ccc:	d50a      	bpl.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e006      	b.n	8003ce0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cd2:	f7fe fed3 	bl	8002a7c <HAL_GetTick>
 8003cd6:	1b00      	subs	r0, r0, r4
 8003cd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cdc:	d9ea      	bls.n	8003cb4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8003cde:	2003      	movs	r0, #3
}
 8003ce0:	b003      	add	sp, #12
 8003ce2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ce4:	f7fe feca 	bl	8002a7c <HAL_GetTick>
 8003ce8:	1b00      	subs	r0, r0, r4
 8003cea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cee:	d9eb      	bls.n	8003cc8 <HAL_PWREx_EnableOverDrive+0x3c>
 8003cf0:	e7f5      	b.n	8003cde <HAL_PWREx_EnableOverDrive+0x52>
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	420e0000 	.word	0x420e0000

08003d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d04:	4604      	mov	r4, r0
 8003d06:	b340      	cbz	r0, 8003d5a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	07dd      	lsls	r5, r3, #31
 8003d0c:	d410      	bmi.n	8003d30 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0798      	lsls	r0, r3, #30
 8003d12:	d45e      	bmi.n	8003dd2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	071a      	lsls	r2, r3, #28
 8003d18:	f100 80a0 	bmi.w	8003e5c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	075b      	lsls	r3, r3, #29
 8003d20:	f100 80c0 	bmi.w	8003ea4 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d24:	69a0      	ldr	r0, [r4, #24]
 8003d26:	2800      	cmp	r0, #0
 8003d28:	f040 8128 	bne.w	8003f7c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e02b      	b.n	8003d88 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d30:	4b8f      	ldr	r3, [pc, #572]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	f002 020c 	and.w	r2, r2, #12
 8003d38:	2a04      	cmp	r2, #4
 8003d3a:	d007      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d42:	2a08      	cmp	r2, #8
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	0251      	lsls	r1, r2, #9
 8003d4a:	d508      	bpl.n	8003d5e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	039a      	lsls	r2, r3, #14
 8003d52:	d5dc      	bpl.n	8003d0e <HAL_RCC_OscConfig+0xe>
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1d9      	bne.n	8003d0e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d64:	d113      	bne.n	8003d8e <HAL_RCC_OscConfig+0x8e>
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fe85 	bl	8002a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4e7f      	ldr	r6, [pc, #508]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003d74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	6833      	ldr	r3, [r6, #0]
 8003d78:	039b      	lsls	r3, r3, #14
 8003d7a:	d4c8      	bmi.n	8003d0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fe7e 	bl	8002a7c <HAL_GetTick>
 8003d80:	1b40      	subs	r0, r0, r5
 8003d82:	2864      	cmp	r0, #100	; 0x64
 8003d84:	d9f7      	bls.n	8003d76 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003d86:	2003      	movs	r0, #3
}
 8003d88:	b002      	add	sp, #8
 8003d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	4d78      	ldr	r5, [pc, #480]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003d90:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0xa8>
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	682b      	ldr	r3, [r5, #0]
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da6:	e7e2      	b.n	8003d6e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	602b      	str	r3, [r5, #0]
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	d1d9      	bne.n	8003d6e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003dba:	f7fe fe5f 	bl	8002a7c <HAL_GetTick>
 8003dbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	039f      	lsls	r7, r3, #14
 8003dc4:	d5a3      	bpl.n	8003d0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc6:	f7fe fe59 	bl	8002a7c <HAL_GetTick>
 8003dca:	1b80      	subs	r0, r0, r6
 8003dcc:	2864      	cmp	r0, #100	; 0x64
 8003dce:	d9f7      	bls.n	8003dc0 <HAL_RCC_OscConfig+0xc0>
 8003dd0:	e7d9      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	f012 0f0c 	tst.w	r2, #12
 8003dda:	d007      	beq.n	8003dec <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003de2:	2a08      	cmp	r2, #8
 8003de4:	d111      	bne.n	8003e0a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	025e      	lsls	r6, r3, #9
 8003dea:	d40e      	bmi.n	8003e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dec:	4a60      	ldr	r2, [pc, #384]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	079d      	lsls	r5, r3, #30
 8003df2:	d502      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xfa>
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d1af      	bne.n	8003d5a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	6921      	ldr	r1, [r4, #16]
 8003dfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e06:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e08:	e784      	b.n	8003d14 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0a:	68e2      	ldr	r2, [r4, #12]
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e0e:	b1b2      	cbz	r2, 8003e3e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e14:	f7fe fe32 	bl	8002a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4d55      	ldr	r5, [pc, #340]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003e1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	0798      	lsls	r0, r3, #30
 8003e20:	d507      	bpl.n	8003e32 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	e770      	b.n	8003d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fe23 	bl	8002a7c <HAL_GetTick>
 8003e36:	1b80      	subs	r0, r0, r6
 8003e38:	2802      	cmp	r0, #2
 8003e3a:	d9ef      	bls.n	8003e1c <HAL_RCC_OscConfig+0x11c>
 8003e3c:	e7a3      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003e3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e40:	f7fe fe1c 	bl	8002a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e44:	4e4a      	ldr	r6, [pc, #296]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003e46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e48:	6833      	ldr	r3, [r6, #0]
 8003e4a:	0799      	lsls	r1, r3, #30
 8003e4c:	f57f af62 	bpl.w	8003d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe fe14 	bl	8002a7c <HAL_GetTick>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	2802      	cmp	r0, #2
 8003e58:	d9f6      	bls.n	8003e48 <HAL_RCC_OscConfig+0x148>
 8003e5a:	e794      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5c:	6962      	ldr	r2, [r4, #20]
 8003e5e:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e60:	b182      	cbz	r2, 8003e84 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8003e62:	2201      	movs	r2, #1
 8003e64:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003e68:	f7fe fe08 	bl	8002a7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6c:	4e40      	ldr	r6, [pc, #256]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003e6e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e70:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003e72:	079f      	lsls	r7, r3, #30
 8003e74:	f53f af52 	bmi.w	8003d1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe fe00 	bl	8002a7c <HAL_GetTick>
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	2802      	cmp	r0, #2
 8003e80:	d9f6      	bls.n	8003e70 <HAL_RCC_OscConfig+0x170>
 8003e82:	e780      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003e84:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003e88:	f7fe fdf8 	bl	8002a7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4e38      	ldr	r6, [pc, #224]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003e8e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003e92:	0798      	lsls	r0, r3, #30
 8003e94:	f57f af42 	bpl.w	8003d1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fe fdf0 	bl	8002a7c <HAL_GetTick>
 8003e9c:	1b40      	subs	r0, r0, r5
 8003e9e:	2802      	cmp	r0, #2
 8003ea0:	d9f6      	bls.n	8003e90 <HAL_RCC_OscConfig+0x190>
 8003ea2:	e770      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003eac:	d128      	bne.n	8003f00 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	9201      	str	r2, [sp, #4]
 8003eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ec2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	4d2c      	ldr	r5, [pc, #176]	; (8003f78 <HAL_RCC_OscConfig+0x278>)
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	05d9      	lsls	r1, r3, #23
 8003eca:	d51b      	bpl.n	8003f04 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	68a3      	ldr	r3, [r4, #8]
 8003ece:	4d28      	ldr	r5, [pc, #160]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d127      	bne.n	8003f24 <HAL_RCC_OscConfig+0x224>
 8003ed4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003edc:	f7fe fdce 	bl	8002a7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	4e23      	ldr	r6, [pc, #140]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003ee2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003eea:	079b      	lsls	r3, r3, #30
 8003eec:	d539      	bpl.n	8003f62 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	f43f af18 	beq.w	8003d24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	e711      	b.n	8003d24 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003f00:	2700      	movs	r7, #0
 8003f02:	e7df      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fdb6 	bl	8002a7c <HAL_GetTick>
 8003f10:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	05da      	lsls	r2, r3, #23
 8003f16:	d4d9      	bmi.n	8003ecc <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7fe fdb0 	bl	8002a7c <HAL_GetTick>
 8003f1c:	1b80      	subs	r0, r0, r6
 8003f1e:	2802      	cmp	r0, #2
 8003f20:	d9f7      	bls.n	8003f12 <HAL_RCC_OscConfig+0x212>
 8003f22:	e730      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	d104      	bne.n	8003f32 <HAL_RCC_OscConfig+0x232>
 8003f28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	672b      	str	r3, [r5, #112]	; 0x70
 8003f30:	e7d0      	b.n	8003ed4 <HAL_RCC_OscConfig+0x1d4>
 8003f32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	672a      	str	r2, [r5, #112]	; 0x70
 8003f3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003f3c:	f022 0204 	bic.w	r2, r2, #4
 8003f40:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ca      	bne.n	8003edc <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8003f46:	f7fe fd99 	bl	8002a7c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f52:	0798      	lsls	r0, r3, #30
 8003f54:	d5cb      	bpl.n	8003eee <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fe fd91 	bl	8002a7c <HAL_GetTick>
 8003f5a:	1b80      	subs	r0, r0, r6
 8003f5c:	4540      	cmp	r0, r8
 8003f5e:	d9f7      	bls.n	8003f50 <HAL_RCC_OscConfig+0x250>
 8003f60:	e711      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fe fd8b 	bl	8002a7c <HAL_GetTick>
 8003f66:	1b40      	subs	r0, r0, r5
 8003f68:	4540      	cmp	r0, r8
 8003f6a:	d9bd      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x1e8>
 8003f6c:	e70b      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	42470000 	.word	0x42470000
 8003f78:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7c:	4d36      	ldr	r5, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x358>)
 8003f7e:	68ab      	ldr	r3, [r5, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d03d      	beq.n	8004004 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_OscConfig+0x35c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	d12b      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8003f92:	f7fe fd73 	bl	8002a7c <HAL_GetTick>
 8003f96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	0199      	lsls	r1, r3, #6
 8003f9c:	d41f      	bmi.n	8003fde <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f9e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fa6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4d26      	ldr	r5, [pc, #152]	; (8004058 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fd5a 	bl	8002a7c <HAL_GetTick>
 8003fc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	019a      	lsls	r2, r3, #6
 8003fce:	f53f aead 	bmi.w	8003d2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe fd53 	bl	8002a7c <HAL_GetTick>
 8003fd6:	1b00      	subs	r0, r0, r4
 8003fd8:	2802      	cmp	r0, #2
 8003fda:	d9f6      	bls.n	8003fca <HAL_RCC_OscConfig+0x2ca>
 8003fdc:	e6d3      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fd4d 	bl	8002a7c <HAL_GetTick>
 8003fe2:	1b80      	subs	r0, r0, r6
 8003fe4:	2802      	cmp	r0, #2
 8003fe6:	d9d7      	bls.n	8003f98 <HAL_RCC_OscConfig+0x298>
 8003fe8:	e6cd      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003fea:	f7fe fd47 	bl	8002a7c <HAL_GetTick>
 8003fee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	f57f ae9a 	bpl.w	8003d2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe fd40 	bl	8002a7c <HAL_GetTick>
 8003ffc:	1b00      	subs	r0, r0, r4
 8003ffe:	2802      	cmp	r0, #2
 8004000:	d9f6      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2f0>
 8004002:	e6c0      	b.n	8003d86 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004004:	2801      	cmp	r0, #1
 8004006:	f43f aebf 	beq.w	8003d88 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800400a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	4291      	cmp	r1, r2
 8004014:	f47f aea1 	bne.w	8003d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	428a      	cmp	r2, r1
 8004020:	f47f ae9b 	bne.w	8003d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004024:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004026:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800402a:	401a      	ands	r2, r3
 800402c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004030:	f47f ae93 	bne.w	8003d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800403c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004042:	f47f ae8a 	bne.w	8003d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004046:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004048:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004050:	f43f ae6c 	beq.w	8003d2c <HAL_RCC_OscConfig+0x2c>
 8004054:	e681      	b.n	8003d5a <HAL_RCC_OscConfig+0x5a>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	42470000 	.word	0x42470000

08004060 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004060:	4913      	ldr	r1, [pc, #76]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004062:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004064:	688b      	ldr	r3, [r1, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d01c      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x48>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d11c      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004072:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004074:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004076:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004078:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407c:	bf14      	ite	ne
 800407e:	480d      	ldrne	r0, [pc, #52]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	480d      	ldreq	r0, [pc, #52]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004086:	bf18      	it	ne
 8004088:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	fba1 0100 	umull	r0, r1, r1, r0
 8004092:	f7fc f8fd 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x50>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800409e:	3301      	adds	r3, #1
 80040a0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80040a2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80040a6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x54>)
 80040aa:	e7fc      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80040ae:	e7fa      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x46>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	007a1200 	.word	0x007a1200
 80040b8:	00f42400 	.word	0x00f42400

080040bc <HAL_RCC_ClockConfig>:
{
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80040c2:	4604      	mov	r4, r0
 80040c4:	b910      	cbnz	r0, 80040cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80040c6:	2001      	movs	r0, #1
}
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040cc:	4b44      	ldr	r3, [pc, #272]	; (80041e0 <HAL_RCC_ClockConfig+0x124>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	f002 020f 	and.w	r2, r2, #15
 80040d4:	428a      	cmp	r2, r1
 80040d6:	d328      	bcc.n	800412a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	0797      	lsls	r7, r2, #30
 80040dc:	d42d      	bmi.n	800413a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	07d0      	lsls	r0, r2, #31
 80040e0:	d441      	bmi.n	8004166 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_ClockConfig+0x124>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f002 020f 	and.w	r2, r2, #15
 80040ea:	42aa      	cmp	r2, r5
 80040ec:	d866      	bhi.n	80041bc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	0751      	lsls	r1, r2, #29
 80040f2:	d46c      	bmi.n	80041ce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	0713      	lsls	r3, r2, #28
 80040f6:	d507      	bpl.n	8004108 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f8:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 80040fa:	6921      	ldr	r1, [r4, #16]
 80040fc:	6893      	ldr	r3, [r2, #8]
 80040fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004102:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004106:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004108:	f7ff ffaa 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 800410e:	4a36      	ldr	r2, [pc, #216]	; (80041e8 <HAL_RCC_ClockConfig+0x12c>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	40d8      	lsrs	r0, r3
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_ClockConfig+0x130>)
 800411c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800411e:	4b34      	ldr	r3, [pc, #208]	; (80041f0 <HAL_RCC_ClockConfig+0x134>)
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	f7fe fc63 	bl	80029ec <HAL_InitTick>
  return HAL_OK;
 8004126:	2000      	movs	r0, #0
 8004128:	e7ce      	b.n	80040c8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	b2ca      	uxtb	r2, r1
 800412c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	428b      	cmp	r3, r1
 8004136:	d1c6      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xa>
 8004138:	e7ce      	b.n	80040d8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 800413c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	bf1e      	ittt	ne
 8004142:	6899      	ldrne	r1, [r3, #8]
 8004144:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8004148:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	bf42      	ittt	mi
 800414e:	6899      	ldrmi	r1, [r3, #8]
 8004150:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8004154:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004156:	4923      	ldr	r1, [pc, #140]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 8004158:	68a0      	ldr	r0, [r4, #8]
 800415a:	688b      	ldr	r3, [r1, #8]
 800415c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004160:	4303      	orrs	r3, r0
 8004162:	608b      	str	r3, [r1, #8]
 8004164:	e7bb      	b.n	80040de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 800416a:	2a01      	cmp	r2, #1
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	d0a7      	beq.n	80040c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004176:	4e1b      	ldr	r6, [pc, #108]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 8004178:	68b3      	ldr	r3, [r6, #8]
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	4313      	orrs	r3, r2
 8004180:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004182:	f7fe fc7b 	bl	8002a7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800418a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418c:	68b3      	ldr	r3, [r6, #8]
 800418e:	6862      	ldr	r2, [r4, #4]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004198:	d0a3      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419a:	f7fe fc6f 	bl	8002a7c <HAL_GetTick>
 800419e:	1bc0      	subs	r0, r0, r7
 80041a0:	4540      	cmp	r0, r8
 80041a2:	d9f3      	bls.n	800418c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
 80041a6:	e78f      	b.n	80040c8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a8:	1e91      	subs	r1, r2, #2
 80041aa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	d802      	bhi.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041b4:	e7de      	b.n	8004174 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	f013 0f02 	tst.w	r3, #2
 80041ba:	e7db      	b.n	8004174 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041bc:	b2ea      	uxtb	r2, r5
 80041be:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	42ab      	cmp	r3, r5
 80041c8:	f47f af7d 	bne.w	80040c6 <HAL_RCC_ClockConfig+0xa>
 80041cc:	e78f      	b.n	80040ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ce:	4905      	ldr	r1, [pc, #20]	; (80041e4 <HAL_RCC_ClockConfig+0x128>)
 80041d0:	68e0      	ldr	r0, [r4, #12]
 80041d2:	688b      	ldr	r3, [r1, #8]
 80041d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80041d8:	4303      	orrs	r3, r0
 80041da:	608b      	str	r3, [r1, #8]
 80041dc:	e78a      	b.n	80040f4 <HAL_RCC_ClockConfig+0x38>
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800b5f4 	.word	0x0800b5f4
 80041ec:	20000100 	.word	0x20000100
 80041f0:	20000108 	.word	0x20000108

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x14>)
 80041f6:	4a05      	ldr	r2, [pc, #20]	; (800420c <HAL_RCC_GetPCLK1Freq+0x18>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004202:	6810      	ldr	r0, [r2, #0]
}
 8004204:	40d8      	lsrs	r0, r3
 8004206:	4770      	bx	lr
 8004208:	40023800 	.word	0x40023800
 800420c:	0800b604 	.word	0x0800b604
 8004210:	20000100 	.word	0x20000100

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004214:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004216:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 800421a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800421e:	f040 808c 	bne.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x126>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f013 0f0c 	tst.w	r3, #12
 8004228:	d045      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800422a:	4b8b      	ldr	r3, [pc, #556]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800422c:	4d8b      	ldr	r5, [pc, #556]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_DISABLE();
 800422e:	2200      	movs	r2, #0
 8004230:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8004232:	f7fe fc23 	bl	8002a7c <HAL_GetTick>
 8004236:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	009f      	lsls	r7, r3, #2
 800423c:	f100 80cf 	bmi.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004240:	6821      	ldr	r1, [r4, #0]
 8004242:	074e      	lsls	r6, r1, #29
 8004244:	d515      	bpl.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004246:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800424a:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004254:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800425e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004262:	6a22      	ldr	r2, [r4, #32]
 8004264:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004268:	3a01      	subs	r2, #1
 800426a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800426e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004272:	070d      	lsls	r5, r1, #28
 8004274:	d514      	bpl.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004276:	4a79      	ldr	r2, [pc, #484]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004278:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800427a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800427e:	6920      	ldr	r0, [r4, #16]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004286:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800428a:	430b      	orrs	r3, r1
 800428c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004290:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004294:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004296:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800429a:	430b      	orrs	r3, r1
 800429c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042a0:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a2:	4e6e      	ldr	r6, [pc, #440]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_ENABLE();
 80042a4:	2201      	movs	r2, #1
 80042a6:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80042a8:	f7fe fbe8 	bl	8002a7c <HAL_GetTick>
 80042ac:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ae:	6833      	ldr	r3, [r6, #0]
 80042b0:	0098      	lsls	r0, r3, #2
 80042b2:	f140 809b 	bpl.w	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	069b      	lsls	r3, r3, #26
 80042ba:	d533      	bpl.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	2300      	movs	r3, #0
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	4b66      	ldr	r3, [pc, #408]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042c2:	4d67      	ldr	r5, [pc, #412]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042dc:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042de:	f7fe fbcd 	bl	8002a7c <HAL_GetTick>
 80042e2:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	05d9      	lsls	r1, r3, #23
 80042e8:	f140 8087 	bpl.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ec:	4d5b      	ldr	r5, [pc, #364]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80042f4:	f040 8088 	bne.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042fa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80042fe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004302:	4a56      	ldr	r2, [pc, #344]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004304:	f040 80a4 	bne.w	8004450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004308:	6891      	ldr	r1, [r2, #8]
 800430a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800430e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004312:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004316:	4301      	orrs	r1, r0
 8004318:	6091      	str	r1, [r2, #8]
 800431a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800431c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004320:	430b      	orrs	r3, r1
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800432a:	bf1f      	itttt	ne
 800432c:	4b4d      	ldrne	r3, [pc, #308]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800432e:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8004332:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 8004336:	2000      	movne	r0, #0
 8004338:	e04f      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_PLLI2S_DISABLE();
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800433c:	4e47      	ldr	r6, [pc, #284]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_DISABLE();
 800433e:	2200      	movs	r2, #0
 8004340:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8004342:	f7fe fb9b 	bl	8002a7c <HAL_GetTick>
 8004346:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	011f      	lsls	r7, r3, #4
 800434c:	d43f      	bmi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	07cd      	lsls	r5, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004352:	bf41      	itttt	mi
 8004354:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004358:	071b      	lslmi	r3, r3, #28
 800435a:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800435e:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004362:	0788      	lsls	r0, r1, #30
 8004364:	d515      	bpl.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004368:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800436a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800436e:	6865      	ldr	r5, [r4, #4]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004376:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800437a:	4303      	orrs	r3, r0
 800437c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004380:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004384:	69e3      	ldr	r3, [r4, #28]
 8004386:	f020 001f 	bic.w	r0, r0, #31
 800438a:	3b01      	subs	r3, #1
 800438c:	4303      	orrs	r3, r0
 800438e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004392:	0649      	lsls	r1, r1, #25
 8004394:	d50a      	bpl.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	6862      	ldr	r2, [r4, #4]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80043a0:	68a2      	ldr	r2, [r4, #8]
 80043a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80043a6:	4a2d      	ldr	r2, [pc, #180]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ae:	4e2b      	ldr	r6, [pc, #172]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_ENABLE();
 80043b0:	2201      	movs	r2, #1
 80043b2:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80043b4:	f7fe fb62 	bl	8002a7c <HAL_GetTick>
 80043b8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	011a      	lsls	r2, r3, #4
 80043be:	f53f af30 	bmi.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c2:	f7fe fb5b 	bl	8002a7c <HAL_GetTick>
 80043c6:	1b40      	subs	r0, r0, r5
 80043c8:	2802      	cmp	r0, #2
 80043ca:	d9f6      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ce:	f7fe fb55 	bl	8002a7c <HAL_GetTick>
 80043d2:	1b40      	subs	r0, r0, r5
 80043d4:	2802      	cmp	r0, #2
 80043d6:	d9b7      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x134>
        return HAL_TIMEOUT;
 80043d8:	2003      	movs	r0, #3
}
 80043da:	b003      	add	sp, #12
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043de:	f7fe fb4d 	bl	8002a7c <HAL_GetTick>
 80043e2:	1b80      	subs	r0, r0, r6
 80043e4:	2802      	cmp	r0, #2
 80043e6:	f67f af27 	bls.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80043ea:	e7f5      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043ec:	f7fe fb46 	bl	8002a7c <HAL_GetTick>
 80043f0:	1b40      	subs	r0, r0, r5
 80043f2:	2802      	cmp	r0, #2
 80043f4:	f67f af5b 	bls.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80043f8:	e7ee      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fe fb3f 	bl	8002a7c <HAL_GetTick>
 80043fe:	1b80      	subs	r0, r0, r6
 8004400:	2802      	cmp	r0, #2
 8004402:	f67f af6f 	bls.w	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004406:	e7e7      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800440a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800440e:	4293      	cmp	r3, r2
 8004410:	f43f af72 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004414:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004418:	2101      	movs	r1, #1
 800441a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	2100      	movs	r1, #0
 8004424:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8004428:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800442a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800442c:	07da      	lsls	r2, r3, #31
 800442e:	f57f af63 	bpl.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 8004432:	f7fe fb23 	bl	8002a7c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800443a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800443e:	079b      	lsls	r3, r3, #30
 8004440:	f53f af5a 	bmi.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fe fb1a 	bl	8002a7c <HAL_GetTick>
 8004448:	1b80      	subs	r0, r0, r6
 800444a:	42b8      	cmp	r0, r7
 800444c:	d9f6      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x228>
 800444e:	e7c3      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004450:	6891      	ldr	r1, [r2, #8]
 8004452:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004456:	e75f      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004458:	42470000 	.word	0x42470000
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42471000 	.word	0x42471000

08004468 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004468:	4770      	bx	lr

0800446a <HAL_SDRAM_Init>:
{
 800446a:	b538      	push	{r3, r4, r5, lr}
 800446c:	460d      	mov	r5, r1
  if (hsdram == NULL)
 800446e:	4604      	mov	r4, r0
 8004470:	b1c8      	cbz	r0, 80044a6 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004472:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004476:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800447a:	b91b      	cbnz	r3, 8004484 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800447c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004480:	f7ff fff2 	bl	8004468 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800448a:	1d21      	adds	r1, r4, #4
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	f000 fc75 	bl	8004d7c <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	4629      	mov	r1, r5
 8004498:	f000 fcab 	bl	8004df2 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800449c:	2301      	movs	r3, #1
 800449e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80044a2:	2000      	movs	r0, #0
}
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7fc      	b.n	80044a4 <HAL_SDRAM_Init+0x3a>

080044aa <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80044aa:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80044ac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80044b0:	2b02      	cmp	r3, #2
{
 80044b2:	4605      	mov	r5, r0
 80044b4:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80044b6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80044b8:	d012      	beq.n	80044e0 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80044ba:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80044be:	2c01      	cmp	r4, #1
 80044c0:	d10f      	bne.n	80044e2 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80044c8:	6828      	ldr	r0, [r5, #0]
 80044ca:	f000 fcc8 	bl	8004e5e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80044ce:	6833      	ldr	r3, [r6, #0]
 80044d0:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80044d2:	bf06      	itte	eq
 80044d4:	2305      	moveq	r3, #5
 80044d6:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80044da:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80044de:	2000      	movs	r0, #0
}
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
 80044e4:	e7fc      	b.n	80044e0 <HAL_SDRAM_SendCommand+0x36>

080044e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80044e6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80044e8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80044ec:	2b02      	cmp	r3, #2
{
 80044ee:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80044f0:	b2d8      	uxtb	r0, r3
 80044f2:	d00d      	beq.n	8004510 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80044f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	b2dd      	uxtb	r5, r3
 80044fc:	d109      	bne.n	8004512 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044fe:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004500:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004502:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004506:	f000 fcd0 	bl	8004eaa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800450a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800450e:	2000      	movs	r0, #0
}
 8004510:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004512:	2001      	movs	r0, #1
 8004514:	e7fc      	b.n	8004510 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

08004518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	461f      	mov	r7, r3
 800451e:	4689      	mov	r9, r1
 8004520:	4690      	mov	r8, r2
 8004522:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004524:	f7fe faaa 	bl	8002a7c <HAL_GetTick>
 8004528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452a:	443b      	add	r3, r7
 800452c:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800452e:	f7fe faa5 	bl	8002a7c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004534:	681e      	ldr	r6, [r3, #0]
 8004536:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 800453a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800453c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800453e:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	6893      	ldr	r3, [r2, #8]
 8004544:	ea39 0303 	bics.w	r3, r9, r3
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	4543      	cmp	r3, r8
 8004550:	d101      	bne.n	8004556 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	e02e      	b.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004556:	1c7b      	adds	r3, r7, #1
 8004558:	d0f3      	beq.n	8004542 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800455a:	f7fe fa8f 	bl	8002a7c <HAL_GetTick>
 800455e:	eba0 000a 	sub.w	r0, r0, sl
 8004562:	42a8      	cmp	r0, r5
 8004564:	d329      	bcc.n	80045ba <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800456e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004570:	6862      	ldr	r2, [r4, #4]
 8004572:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004576:	d10a      	bne.n	800458e <SPI_WaitFlagStateUntilTimeout+0x76>
 8004578:	68a2      	ldr	r2, [r4, #8]
 800457a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800457e:	d002      	beq.n	8004586 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004580:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004584:	d103      	bne.n	800458e <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800458e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004590:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004594:	d107      	bne.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80045ac:	2300      	movs	r3, #0
 80045ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80045b2:	2003      	movs	r0, #3
}
 80045b4:	b002      	add	sp, #8
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80045ba:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80045bc:	2b00      	cmp	r3, #0
      count--;
 80045be:	9b01      	ldr	r3, [sp, #4]
 80045c0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80045c4:	bf08      	it	eq
 80045c6:	2500      	moveq	r5, #0
      count--;
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	e7b9      	b.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x28>
 80045cc:	20000100 	.word	0x20000100

080045d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045d2:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	6841      	ldr	r1, [r0, #4]
 80045d6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80045da:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045dc:	d122      	bne.n	8004624 <SPI_EndRxTransaction+0x54>
 80045de:	6881      	ldr	r1, [r0, #8]
 80045e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80045e4:	d002      	beq.n	80045ec <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045ea:	d107      	bne.n	80045fc <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045ec:	6825      	ldr	r5, [r4, #0]
 80045ee:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80045f4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80045f8:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045fa:	d009      	beq.n	8004610 <SPI_EndRxTransaction+0x40>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045fc:	9200      	str	r2, [sp, #0]
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	2200      	movs	r2, #0
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ff88 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004608:	b930      	cbnz	r0, 8004618 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800460a:	2000      	movs	r0, #0
}
 800460c:	b003      	add	sp, #12
 800460e:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004610:	9200      	str	r2, [sp, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	2200      	movs	r2, #0
 8004616:	e7f4      	b.n	8004602 <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004618:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800461a:	f043 0320 	orr.w	r3, r3, #32
 800461e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004620:	2003      	movs	r0, #3
 8004622:	e7f3      	b.n	800460c <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	9200      	str	r2, [sp, #0]
 8004626:	2101      	movs	r1, #1
 8004628:	2200      	movs	r2, #0
 800462a:	e7eb      	b.n	8004604 <SPI_EndRxTransaction+0x34>

0800462c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b530      	push	{r4, r5, lr}
 800462e:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004630:	4913      	ldr	r1, [pc, #76]	; (8004680 <SPI_EndRxTxTransaction+0x54>)
 8004632:	680d      	ldr	r5, [r1, #0]
 8004634:	4913      	ldr	r1, [pc, #76]	; (8004684 <SPI_EndRxTxTransaction+0x58>)
 8004636:	fbb5 f5f1 	udiv	r5, r5, r1
 800463a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800463e:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004640:	6841      	ldr	r1, [r0, #4]
{
 8004642:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004644:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8004648:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800464a:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800464c:	d10c      	bne.n	8004668 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800464e:	9200      	str	r2, [sp, #0]
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	2200      	movs	r2, #0
 8004654:	f7ff ff60 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004658:	b178      	cbz	r0, 800467a <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800465c:	f043 0320 	orr.w	r3, r3, #32
 8004660:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004662:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8004664:	b005      	add	sp, #20
 8004666:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	b133      	cbz	r3, 800467a <SPI_EndRxTxTransaction+0x4e>
      count--;
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	3b01      	subs	r3, #1
 8004670:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	061b      	lsls	r3, r3, #24
 8004678:	d4f6      	bmi.n	8004668 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 800467a:	2000      	movs	r0, #0
 800467c:	e7f2      	b.n	8004664 <SPI_EndRxTxTransaction+0x38>
 800467e:	bf00      	nop
 8004680:	20000100 	.word	0x20000100
 8004684:	016e3600 	.word	0x016e3600

08004688 <HAL_SPI_MspInit>:
}
 8004688:	4770      	bx	lr

0800468a <HAL_SPI_Init>:
{
 800468a:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 800468c:	4604      	mov	r4, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	d05a      	beq.n	8004748 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004692:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d153      	bne.n	8004740 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004698:	6842      	ldr	r2, [r0, #4]
 800469a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800469e:	d000      	beq.n	80046a2 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a0:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80046a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046aa:	b923      	cbnz	r3, 80046b6 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80046ac:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ffe9 	bl	8004688 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80046b6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b8:	68a5      	ldr	r5, [r4, #8]
 80046ba:	69a2      	ldr	r2, [r4, #24]
 80046bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80046c4:	680b      	ldr	r3, [r1, #0]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80046d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80046d6:	432b      	orrs	r3, r5
 80046d8:	68e5      	ldr	r5, [r4, #12]
 80046da:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80046de:	432b      	orrs	r3, r5
 80046e0:	6925      	ldr	r5, [r4, #16]
 80046e2:	f005 0502 	and.w	r5, r5, #2
 80046e6:	432b      	orrs	r3, r5
 80046e8:	6965      	ldr	r5, [r4, #20]
 80046ea:	f005 0501 	and.w	r5, r5, #1
 80046ee:	432b      	orrs	r3, r5
 80046f0:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80046f4:	432b      	orrs	r3, r5
 80046f6:	69e5      	ldr	r5, [r4, #28]
 80046f8:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80046fc:	432b      	orrs	r3, r5
 80046fe:	6a25      	ldr	r5, [r4, #32]
 8004700:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8004704:	432b      	orrs	r3, r5
 8004706:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 800470a:	432b      	orrs	r3, r5
 800470c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800470e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004710:	0c12      	lsrs	r2, r2, #16
 8004712:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004716:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800471a:	f002 0204 	and.w	r2, r2, #4
 800471e:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004722:	bf08      	it	eq
 8004724:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004726:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004728:	bf08      	it	eq
 800472a:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472c:	69cb      	ldr	r3, [r1, #28]
 800472e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004732:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004734:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004736:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004738:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800473a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800473e:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004740:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004746:	e7ac      	b.n	80046a2 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004748:	2001      	movs	r0, #1
 800474a:	e7f8      	b.n	800473e <HAL_SPI_Init+0xb4>

0800474c <HAL_SPI_MspDeInit>:
 800474c:	4770      	bx	lr

0800474e <HAL_SPI_DeInit>:
{
 800474e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004750:	4604      	mov	r4, r0
 8004752:	b180      	cbz	r0, 8004776 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004754:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800475c:	6813      	ldr	r3, [r2, #0]
 800475e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004762:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004764:	f7ff fff2 	bl	800474c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004768:	2000      	movs	r0, #0
 800476a:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 800476c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004770:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8004774:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
 8004778:	e7fc      	b.n	8004774 <HAL_SPI_DeInit+0x26>

0800477a <HAL_SPI_Transmit>:
{
 800477a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800477e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004780:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004784:	2b01      	cmp	r3, #1
{
 8004786:	4604      	mov	r4, r0
 8004788:	460e      	mov	r6, r1
 800478a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800478c:	f000 80b9 	beq.w	8004902 <HAL_SPI_Transmit+0x188>
 8004790:	2301      	movs	r3, #1
 8004792:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004796:	f7fe f971 	bl	8002a7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800479a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800479e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80047a0:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047a2:	b2d8      	uxtb	r0, r3
 80047a4:	f040 80ab 	bne.w	80048fe <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	d077      	beq.n	800489c <HAL_SPI_Transmit+0x122>
 80047ac:	f1b8 0f00 	cmp.w	r8, #0
 80047b0:	d074      	beq.n	800489c <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047b2:	2303      	movs	r3, #3
 80047b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80047bc:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80047c0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047c4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047c6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ca:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80047cc:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ce:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80047d4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d8:	d107      	bne.n	80047ea <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e8:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d107      	bne.n	8004802 <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80047f2:	682b      	ldr	r3, [r5, #0]
 80047f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004800:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004802:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004804:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004806:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004808:	bf5e      	ittt	pl
 800480a:	682b      	ldrpl	r3, [r5, #0]
 800480c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004810:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004812:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004816:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004818:	d14c      	bne.n	80048b4 <HAL_SPI_Transmit+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481a:	b113      	cbz	r3, 8004822 <HAL_SPI_Transmit+0xa8>
 800481c:	f1b8 0f01 	cmp.w	r8, #1
 8004820:	d107      	bne.n	8004832 <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	f836 3b02 	ldrh.w	r3, [r6], #2
 8004826:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004828:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800482a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800482c:	3b01      	subs	r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004832:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	b9f3      	cbnz	r3, 8004876 <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004838:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483e:	d104      	bne.n	800484a <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004848:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484a:	464a      	mov	r2, r9
 800484c:	4639      	mov	r1, r7
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff feec 	bl	800462c <SPI_EndRxTxTransaction>
 8004854:	b108      	cbz	r0, 800485a <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004856:	2320      	movs	r3, #32
 8004858:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	b933      	cbnz	r3, 800486c <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	9201      	str	r2, [sp, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800486e:	3800      	subs	r0, #0
 8004870:	bf18      	it	ne
 8004872:	2001      	movne	r0, #1
error:
 8004874:	e012      	b.n	800489c <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	6893      	ldr	r3, [r2, #8]
 800487a:	0798      	lsls	r0, r3, #30
 800487c:	d505      	bpl.n	800488a <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004880:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004884:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004886:	6323      	str	r3, [r4, #48]	; 0x30
 8004888:	e7cf      	b.n	800482a <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488a:	f7fe f8f7 	bl	8002a7c <HAL_GetTick>
 800488e:	eba0 0009 	sub.w	r0, r0, r9
 8004892:	42b8      	cmp	r0, r7
 8004894:	d30b      	bcc.n	80048ae <HAL_SPI_Transmit+0x134>
 8004896:	1c79      	adds	r1, r7, #1
 8004898:	d0cb      	beq.n	8004832 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 800489a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800489c:	2301      	movs	r3, #1
 800489e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048a2:	2300      	movs	r3, #0
 80048a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80048a8:	b003      	add	sp, #12
 80048aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ae:	2f00      	cmp	r7, #0
 80048b0:	d1bf      	bne.n	8004832 <HAL_SPI_Transmit+0xb8>
 80048b2:	e7f2      	b.n	800489a <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b4:	b113      	cbz	r3, 80048bc <HAL_SPI_Transmit+0x142>
 80048b6:	f1b8 0f01 	cmp.w	r8, #1
 80048ba:	d108      	bne.n	80048ce <HAL_SPI_Transmit+0x154>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048bc:	7833      	ldrb	r3, [r6, #0]
 80048be:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048c2:	3301      	adds	r3, #1
 80048c4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80048c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80048ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0b0      	beq.n	8004838 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	0792      	lsls	r2, r2, #30
 80048dc:	d503      	bpl.n	80048e6 <HAL_SPI_Transmit+0x16c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048e0:	7812      	ldrb	r2, [r2, #0]
 80048e2:	731a      	strb	r2, [r3, #12]
 80048e4:	e7ec      	b.n	80048c0 <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e6:	f7fe f8c9 	bl	8002a7c <HAL_GetTick>
 80048ea:	eba0 0009 	sub.w	r0, r0, r9
 80048ee:	42b8      	cmp	r0, r7
 80048f0:	d302      	bcc.n	80048f8 <HAL_SPI_Transmit+0x17e>
 80048f2:	1c7b      	adds	r3, r7, #1
 80048f4:	d0eb      	beq.n	80048ce <HAL_SPI_Transmit+0x154>
 80048f6:	e7d0      	b.n	800489a <HAL_SPI_Transmit+0x120>
 80048f8:	2f00      	cmp	r7, #0
 80048fa:	d1e8      	bne.n	80048ce <HAL_SPI_Transmit+0x154>
 80048fc:	e7cd      	b.n	800489a <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 80048fe:	2002      	movs	r0, #2
 8004900:	e7cc      	b.n	800489c <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 8004902:	2002      	movs	r0, #2
 8004904:	e7d0      	b.n	80048a8 <HAL_SPI_Transmit+0x12e>

08004906 <HAL_SPI_TransmitReceive>:
{
 8004906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800490a:	b085      	sub	sp, #20
 800490c:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8004912:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004916:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8004918:	2b01      	cmp	r3, #1
{
 800491a:	4604      	mov	r4, r0
 800491c:	4688      	mov	r8, r1
 800491e:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8004920:	f000 813a 	beq.w	8004b98 <HAL_SPI_TransmitReceive+0x292>
 8004924:	2301      	movs	r3, #1
 8004926:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800492a:	f7fe f8a7 	bl	8002a7c <HAL_GetTick>
  tmp_state           = hspi->State;
 800492e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004932:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004934:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004936:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004938:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800493a:	d00a      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x4c>
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	f040 8128 	bne.w	8004b94 <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004944:	68a2      	ldr	r2, [r4, #8]
 8004946:	2a00      	cmp	r2, #0
 8004948:	f040 8124 	bne.w	8004b94 <HAL_SPI_TransmitReceive+0x28e>
 800494c:	2904      	cmp	r1, #4
 800494e:	f040 8121 	bne.w	8004b94 <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	f000 810f 	beq.w	8004b78 <HAL_SPI_TransmitReceive+0x272>
 800495a:	2d00      	cmp	r5, #0
 800495c:	f000 810c 	beq.w	8004b78 <HAL_SPI_TransmitReceive+0x272>
 8004960:	f1b9 0f00 	cmp.w	r9, #0
 8004964:	f000 8108 	beq.w	8004b78 <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004968:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800496c:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800496e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004970:	bf1c      	itt	ne
 8004972:	2205      	movne	r2, #5
 8004974:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004978:	2200      	movs	r2, #0
 800497a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800497c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004980:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8004982:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004986:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 800498a:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 800498c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004990:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004994:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004998:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499c:	d107      	bne.n	80049ae <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 800499e:	682a      	ldr	r2, [r5, #0]
 80049a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a4:	602a      	str	r2, [r5, #0]
 80049a6:	682a      	ldr	r2, [r5, #0]
 80049a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ac:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ae:	682a      	ldr	r2, [r5, #0]
 80049b0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80049b2:	bf5e      	ittt	pl
 80049b4:	682a      	ldrpl	r2, [r5, #0]
 80049b6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80049ba:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049bc:	68e2      	ldr	r2, [r4, #12]
 80049be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80049c2:	d169      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c4:	b113      	cbz	r3, 80049cc <HAL_SPI_TransmitReceive+0xc6>
 80049c6:	f1b9 0f01 	cmp.w	r9, #1
 80049ca:	d108      	bne.n	80049de <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049cc:	4641      	mov	r1, r8
 80049ce:	f831 3b02 	ldrh.w	r3, [r1], #2
 80049d2:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80049d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80049de:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b9b3      	cbnz	r3, 8004a14 <HAL_SPI_TransmitReceive+0x10e>
 80049e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	b99b      	cbnz	r3, 8004a14 <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f2:	f040 80ac 	bne.w	8004b4e <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80049f6:	2201      	movs	r2, #1
 80049f8:	9700      	str	r7, [sp, #0]
 80049fa:	4633      	mov	r3, r6
 80049fc:	4611      	mov	r1, r2
 80049fe:	4620      	mov	r0, r4
 8004a00:	f7ff fd8a 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f000 809e 	beq.w	8004b46 <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6563      	str	r3, [r4, #84]	; 0x54
 8004a12:	e020      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	6893      	ldr	r3, [r2, #8]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	d504      	bpl.n	8004a26 <HAL_SPI_TransmitReceive+0x120>
 8004a1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	b10b      	cbz	r3, 8004a26 <HAL_SPI_TransmitReceive+0x120>
 8004a22:	bb1d      	cbnz	r5, 8004a6c <HAL_SPI_TransmitReceive+0x166>
{
 8004a24:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a26:	6891      	ldr	r1, [r2, #8]
 8004a28:	f011 0101 	ands.w	r1, r1, #1
 8004a2c:	d00c      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x142>
 8004a2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b14b      	cbz	r3, 8004a48 <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a36:	68d2      	ldr	r2, [r2, #12]
 8004a38:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a3c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004a46:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a48:	f7fe f818 	bl	8002a7c <HAL_GetTick>
 8004a4c:	1bc0      	subs	r0, r0, r7
 8004a4e:	42b0      	cmp	r0, r6
 8004a50:	d3c6      	bcc.n	80049e0 <HAL_SPI_TransmitReceive+0xda>
 8004a52:	1c70      	adds	r0, r6, #1
 8004a54:	d0c4      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 8004a56:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004a64:	4628      	mov	r0, r5
 8004a66:	b005      	add	sp, #20
 8004a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a6e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004a72:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a74:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004a7e:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004a80:	b2ad      	uxth	r5, r5
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	d1ce      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x11e>
 8004a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d1ca      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e7c6      	b.n	8004a26 <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a98:	b113      	cbz	r3, 8004aa0 <HAL_SPI_TransmitReceive+0x19a>
 8004a9a:	f1b9 0f01 	cmp.w	r9, #1
 8004a9e:	d109      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa0:	f898 3000 	ldrb.w	r3, [r8]
 8004aa4:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004aac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ab4:	2501      	movs	r5, #1
 8004ab6:	e022      	b.n	8004afe <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	6893      	ldr	r3, [r2, #8]
 8004abc:	0799      	lsls	r1, r3, #30
 8004abe:	d504      	bpl.n	8004aca <HAL_SPI_TransmitReceive+0x1c4>
 8004ac0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	b10b      	cbz	r3, 8004aca <HAL_SPI_TransmitReceive+0x1c4>
 8004ac6:	bb1d      	cbnz	r5, 8004b10 <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 8004ac8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	6891      	ldr	r1, [r2, #8]
 8004ace:	f011 0101 	ands.w	r1, r1, #1
 8004ad2:	d00d      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x1ea>
 8004ad4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	b153      	cbz	r3, 8004af0 <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004aee:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004af0:	f7fd ffc4 	bl	8002a7c <HAL_GetTick>
 8004af4:	1bc0      	subs	r0, r0, r7
 8004af6:	42b0      	cmp	r0, r6
 8004af8:	d322      	bcc.n	8004b40 <HAL_SPI_TransmitReceive+0x23a>
 8004afa:	1c73      	adds	r3, r6, #1
 8004afc:	d1ab      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004afe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1d8      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x1b2>
 8004b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1d4      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x1b2>
 8004b0e:	e76d      	b.n	80049ec <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b18:	3301      	adds	r3, #1
 8004b1a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004b24:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004b26:	b2ad      	uxth	r5, r5
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	d1cd      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x1c2>
 8004b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d1c9      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e7c4      	b.n	8004aca <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	d1dc      	bne.n	8004afe <HAL_SPI_TransmitReceive+0x1f8>
 8004b44:	e787      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8004b4c:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	6895      	ldr	r5, [r2, #8]
 8004b52:	f015 0510 	ands.w	r5, r5, #16
 8004b56:	d007      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b5a:	f043 0302 	orr.w	r3, r3, #2
 8004b5e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004b60:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004b64:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004b66:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	463a      	mov	r2, r7
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff fd5d 	bl	800462c <SPI_EndRxTxTransaction>
 8004b72:	b118      	cbz	r0, 8004b7c <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b74:	2320      	movs	r3, #32
 8004b76:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b78:	2501      	movs	r5, #1
 8004b7a:	e76d      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b7c:	68a3      	ldr	r3, [r4, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f47f af6a 	bne.w	8004a58 <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	9203      	str	r2, [sp, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	e761      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8004b94:	2502      	movs	r5, #2
 8004b96:	e75f      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8004b98:	2502      	movs	r5, #2
 8004b9a:	e763      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x15e>

08004b9c <HAL_SPI_Receive>:
{
 8004b9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004ba0:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ba6:	6843      	ldr	r3, [r0, #4]
 8004ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004bac:	4604      	mov	r4, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bb2:	d10c      	bne.n	8004bce <HAL_SPI_Receive+0x32>
 8004bb4:	6883      	ldr	r3, [r0, #8]
 8004bb6:	b953      	cbnz	r3, 8004bce <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bb8:	2304      	movs	r3, #4
 8004bba:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	9500      	str	r5, [sp, #0]
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	f7ff fe9f 	bl	8004906 <HAL_SPI_TransmitReceive>
}
 8004bc8:	b004      	add	sp, #16
 8004bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8004bce:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	f000 80cd 	beq.w	8004d72 <HAL_SPI_Receive+0x1d6>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004bde:	f7fd ff4d 	bl	8002a7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004be2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004be6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004be8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004bea:	b2d8      	uxtb	r0, r3
 8004bec:	f040 80bf 	bne.w	8004d6e <HAL_SPI_Receive+0x1d2>
  if ((pData == NULL) || (Size == 0U))
 8004bf0:	f1b8 0f00 	cmp.w	r8, #0
 8004bf4:	f000 808a 	beq.w	8004d0c <HAL_SPI_Receive+0x170>
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	f000 8087 	beq.w	8004d0c <HAL_SPI_Receive+0x170>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c00:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c04:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c06:	2304      	movs	r3, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8004c10:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c14:	6560      	str	r0, [r4, #84]	; 0x54
    SPI_RESET_CRC(hspi);
 8004c16:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004c18:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c1a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c1c:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c1e:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c20:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c22:	d10b      	bne.n	8004c3c <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c32:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 8004c34:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004c36:	3a01      	subs	r2, #1
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3c:	68a2      	ldr	r2, [r4, #8]
 8004c3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c42:	d107      	bne.n	8004c54 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c52:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004c58:	bf5e      	ittt	pl
 8004c5a:	681a      	ldrpl	r2, [r3, #0]
 8004c5c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004c60:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	b1f3      	cbz	r3, 8004ca4 <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8004c66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b1fb      	cbz	r3, 8004cac <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	07d1      	lsls	r1, r2, #31
 8004c72:	d555      	bpl.n	8004d20 <HAL_SPI_Receive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c78:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004c86:	e7ee      	b.n	8004c66 <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	07d7      	lsls	r7, r2, #31
 8004c8e:	d535      	bpl.n	8004cfc <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c98:	3301      	adds	r3, #1
 8004c9a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004ca4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ed      	bne.n	8004c88 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d144      	bne.n	8004d3e <HAL_SPI_Receive+0x1a2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cbc:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	9600      	str	r6, [sp, #0]
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fc26 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004ccc:	b9e8      	cbnz	r0, 8004d0a <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cce:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd8:	bf0b      	itete	eq
 8004cda:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cdc:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cde:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ce0:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	9600      	str	r6, [sp, #0]
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7ff fc14 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004cf0:	b308      	cbz	r0, 8004d36 <HAL_SPI_Receive+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004cf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	6563      	str	r3, [r4, #84]	; 0x54
 8004cfa:	e006      	b.n	8004d0a <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfc:	f7fd febe 	bl	8002a7c <HAL_GetTick>
 8004d00:	1b80      	subs	r0, r0, r6
 8004d02:	42a8      	cmp	r0, r5
 8004d04:	d309      	bcc.n	8004d1a <HAL_SPI_Receive+0x17e>
 8004d06:	1c68      	adds	r0, r5, #1
 8004d08:	d0cc      	beq.n	8004ca4 <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8004d0a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d12:	2300      	movs	r3, #0
 8004d14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004d18:	e756      	b.n	8004bc8 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1a:	2d00      	cmp	r5, #0
 8004d1c:	d1c2      	bne.n	8004ca4 <HAL_SPI_Receive+0x108>
 8004d1e:	e7f4      	b.n	8004d0a <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d20:	f7fd feac 	bl	8002a7c <HAL_GetTick>
 8004d24:	1b80      	subs	r0, r0, r6
 8004d26:	42a8      	cmp	r0, r5
 8004d28:	d302      	bcc.n	8004d30 <HAL_SPI_Receive+0x194>
 8004d2a:	1c6a      	adds	r2, r5, #1
 8004d2c:	d09b      	beq.n	8004c66 <HAL_SPI_Receive+0xca>
 8004d2e:	e7ec      	b.n	8004d0a <HAL_SPI_Receive+0x16e>
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	d198      	bne.n	8004c66 <HAL_SPI_Receive+0xca>
 8004d34:	e7e9      	b.n	8004d0a <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 8004d3c:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3e:	4632      	mov	r2, r6
 8004d40:	4629      	mov	r1, r5
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff fc44 	bl	80045d0 <SPI_EndRxTransaction>
 8004d48:	b108      	cbz	r0, 8004d4e <HAL_SPI_Receive+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	6893      	ldr	r3, [r2, #8]
 8004d52:	06db      	lsls	r3, r3, #27
 8004d54:	d506      	bpl.n	8004d64 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004d56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004d5e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d62:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d64:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004d66:	3800      	subs	r0, #0
 8004d68:	bf18      	it	ne
 8004d6a:	2001      	movne	r0, #1
error :
 8004d6c:	e7ce      	b.n	8004d0c <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8004d6e:	2002      	movs	r0, #2
 8004d70:	e7cc      	b.n	8004d0c <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8004d72:	2002      	movs	r0, #2
 8004d74:	e728      	b.n	8004bc8 <HAL_SPI_Receive+0x2c>

08004d76 <HAL_SPI_GetState>:
  return hspi->State;
 8004d76:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004d7a:	4770      	bx	lr

08004d7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004d80:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004d84:	680a      	ldr	r2, [r1, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004d86:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8004d8a:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004d8e:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8004d92:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8004d96:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004d98:	b9a2      	cbnz	r2, 8004dc4 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004d9a:	ea43 0209 	orr.w	r2, r3, r9
 8004d9e:	432a      	orrs	r2, r5
 8004da0:	ea42 0308 	orr.w	r3, r2, r8
 8004da4:	6801      	ldr	r1, [r0, #0]
 8004da6:	ea43 030e 	orr.w	r3, r3, lr
 8004daa:	ea43 030c 	orr.w	r3, r3, ip
 8004dae:	433b      	orrs	r3, r7
 8004db0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004db4:	4333      	orrs	r3, r6
 8004db6:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004dc4:	6802      	ldr	r2, [r0, #0]
 8004dc6:	ea43 0309 	orr.w	r3, r3, r9
 8004dca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004dd2:	ea45 0308 	orr.w	r3, r5, r8
 8004dd6:	6842      	ldr	r2, [r0, #4]
 8004dd8:	ea43 030e 	orr.w	r3, r3, lr
 8004ddc:	ea43 030c 	orr.w	r3, r3, ip
 8004de0:	433b      	orrs	r3, r7
 8004de2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004de6:	4333      	orrs	r3, r6
 8004de8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004dec:	4313      	orrs	r3, r2
 8004dee:	6043      	str	r3, [r0, #4]
 8004df0:	e7e5      	b.n	8004dbe <FMC_SDRAM_Init+0x42>

08004df2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004df2:	68cb      	ldr	r3, [r1, #12]
 8004df4:	f103 3cff 	add.w	ip, r3, #4294967295
 8004df8:	694b      	ldr	r3, [r1, #20]
{
 8004dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004dfc:	680f      	ldr	r7, [r1, #0]
 8004dfe:	684c      	ldr	r4, [r1, #4]
 8004e00:	688e      	ldr	r6, [r1, #8]
 8004e02:	690d      	ldr	r5, [r1, #16]
 8004e04:	6989      	ldr	r1, [r1, #24]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	051b      	lsls	r3, r3, #20
 8004e0a:	3c01      	subs	r4, #1
 8004e0c:	3e01      	subs	r6, #1
 8004e0e:	3d01      	subs	r5, #1
 8004e10:	3901      	subs	r1, #1
 8004e12:	3f01      	subs	r7, #1
 8004e14:	0124      	lsls	r4, r4, #4
 8004e16:	0236      	lsls	r6, r6, #8
 8004e18:	042d      	lsls	r5, r5, #16
 8004e1a:	0609      	lsls	r1, r1, #24
 8004e1c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8004e20:	b95a      	cbnz	r2, 8004e3a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004e22:	433b      	orrs	r3, r7
 8004e24:	4323      	orrs	r3, r4
 8004e26:	6882      	ldr	r2, [r0, #8]
 8004e28:	4333      	orrs	r3, r6
 8004e2a:	432b      	orrs	r3, r5
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004e32:	4313      	orrs	r3, r2
 8004e34:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8004e36:	2000      	movs	r0, #0
 8004e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004e3a:	6882      	ldr	r2, [r0, #8]
 8004e3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e40:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8004e44:	431a      	orrs	r2, r3
 8004e46:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004e48:	ea44 0306 	orr.w	r3, r4, r6
 8004e4c:	68c2      	ldr	r2, [r0, #12]
 8004e4e:	433b      	orrs	r3, r7
 8004e50:	432b      	orrs	r3, r5
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60c3      	str	r3, [r0, #12]
 8004e5c:	e7eb      	b.n	8004e36 <FMC_SDRAM_Timing_Init+0x44>

08004e5e <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e5e:	b570      	push	{r4, r5, r6, lr}
 8004e60:	4604      	mov	r4, r0
 8004e62:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004e64:	6902      	ldr	r2, [r0, #16]
 8004e66:	e9d1 3000 	ldrd	r3, r0, [r1]
 8004e6a:	4303      	orrs	r3, r0
 8004e6c:	68c8      	ldr	r0, [r1, #12]
 8004e6e:	0d92      	lsrs	r2, r2, #22
 8004e70:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8004e74:	0592      	lsls	r2, r2, #22
 8004e76:	4313      	orrs	r3, r2
 8004e78:	688a      	ldr	r2, [r1, #8]
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004e80:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e82:	f7fd fdfb 	bl	8002a7c <HAL_GetTick>
 8004e86:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004e88:	69a3      	ldr	r3, [r4, #24]
 8004e8a:	f013 0320 	ands.w	r3, r3, #32
 8004e8e:	d101      	bne.n	8004e94 <FMC_SDRAM_SendCommand+0x36>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004e90:	4618      	mov	r0, r3
 8004e92:	e003      	b.n	8004e9c <FMC_SDRAM_SendCommand+0x3e>
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	1c6b      	adds	r3, r5, #1
 8004e96:	d0f7      	beq.n	8004e88 <FMC_SDRAM_SendCommand+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004e98:	b90d      	cbnz	r5, 8004e9e <FMC_SDRAM_SendCommand+0x40>
        return HAL_TIMEOUT;
 8004e9a:	2003      	movs	r0, #3
}
 8004e9c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004e9e:	f7fd fded 	bl	8002a7c <HAL_GetTick>
 8004ea2:	1b80      	subs	r0, r0, r6
 8004ea4:	42a8      	cmp	r0, r5
 8004ea6:	d9ef      	bls.n	8004e88 <FMC_SDRAM_SendCommand+0x2a>
 8004ea8:	e7f7      	b.n	8004e9a <FMC_SDRAM_SendCommand+0x3c>

08004eaa <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004eaa:	6943      	ldr	r3, [r0, #20]
 8004eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004eb0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004eb4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004eb8:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8004eba:	2000      	movs	r0, #0
 8004ebc:	4770      	bx	lr
	...

08004ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ef8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ec6:	e003      	b.n	8004ed0 <LoopCopyDataInit>

08004ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ece:	3104      	adds	r1, #4

08004ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ed8:	d3f6      	bcc.n	8004ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8004eda:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004edc:	e002      	b.n	8004ee4 <LoopFillZerobss>

08004ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ee0:	f842 3b04 	str.w	r3, [r2], #4

08004ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ee8:	d3f9      	bcc.n	8004ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004eea:	f7fd fd57 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eee:	f001 fb6d 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ef2:	f000 fab3 	bl	800545c <main>
  bx  lr    
 8004ef6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004ef8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004efc:	0800dd34 	.word	0x0800dd34
  ldr  r0, =_sdata
 8004f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f04:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8004f08:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8004f0c:	20004268 	.word	0x20004268

08004f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f10:	e7fe      	b.n	8004f10 <ADC_IRQHandler>
	...

08004f14 <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature: feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8004f14:	b570      	push	{r4, r5, r6, lr}
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8004f16:	4b9e      	ldr	r3, [pc, #632]	; (8005190 <LCD_Show_Feature+0x27c>)
{
 8004f18:	b086      	sub	sp, #24
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8004f1a:	6859      	ldr	r1, [r3, #4]
{
 8004f1c:	4604      	mov	r4, r0
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	466a      	mov	r2, sp
 8004f22:	c203      	stmia	r2!, {r0, r1}
 8004f24:	6898      	ldr	r0, [r3, #8]
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8004f26:	6919      	ldr	r1, [r3, #16]
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8004f28:	6010      	str	r0, [r2, #0]
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8004f2a:	68d8      	ldr	r0, [r3, #12]
 8004f2c:	aa03      	add	r2, sp, #12
 8004f2e:	c203      	stmia	r2!, {r0, r1}
 8004f30:	6958      	ldr	r0, [r3, #20]
 8004f32:	6010      	str	r0, [r2, #0]
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);  
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	f7fc fc9c 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	f7fc fc8c 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize()- 104);
 8004f44:	f7fc fc34 	bl	80017b0 <BSP_LCD_GetXSize>
 8004f48:	4605      	mov	r5, r0
 8004f4a:	f7fc fc39 	bl	80017c0 <BSP_LCD_GetYSize>
 8004f4e:	f1a5 0218 	sub.w	r2, r5, #24
 8004f52:	3868      	subs	r0, #104	; 0x68
 8004f54:	b283      	uxth	r3, r0
 8004f56:	b292      	uxth	r2, r2
 8004f58:	215c      	movs	r1, #92	; 0x5c
 8004f5a:	200c      	movs	r0, #12
 8004f5c:	f7fc fdca 	bl	8001af4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004f60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004f64:	f7fc fc7a 	bl	800185c <BSP_LCD_SetTextColor>
  
  switch (feature)
 8004f68:	2c01      	cmp	r4, #1
 8004f6a:	d043      	beq.n	8004ff4 <LCD_Show_Feature+0xe0>
 8004f6c:	2c02      	cmp	r4, #2
 8004f6e:	f000 80bf 	beq.w	80050f0 <LCD_Show_Feature+0x1dc>
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	d13c      	bne.n	8004ff0 <LCD_Show_Feature+0xdc>
  {
  case 0:
    /* Text Feature */
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8004f76:	4a87      	ldr	r2, [pc, #540]	; (8005194 <LCD_Show_Feature+0x280>)
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
    BSP_LCD_SetFont(&Font16);
 8004f78:	4d87      	ldr	r5, [pc, #540]	; (8005198 <LCD_Show_Feature+0x284>)
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	2164      	movs	r1, #100	; 0x64
 8004f7e:	200e      	movs	r0, #14
 8004f80:	f7fc ffde 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8004f84:	4620      	mov	r0, r4
 8004f86:	4a85      	ldr	r2, [pc, #532]	; (800519c <LCD_Show_Feature+0x288>)
    BSP_LCD_SetFont(&Font20);
 8004f88:	4c85      	ldr	r4, [pc, #532]	; (80051a0 <LCD_Show_Feature+0x28c>)
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	2173      	movs	r1, #115	; 0x73
 8004f8e:	f7fc ffd7 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 8004f92:	4a84      	ldr	r2, [pc, #528]	; (80051a4 <LCD_Show_Feature+0x290>)
 8004f94:	2302      	movs	r3, #2
 8004f96:	2182      	movs	r1, #130	; 0x82
 8004f98:	f64f 70f2 	movw	r0, #65522	; 0xfff2
 8004f9c:	f7fc ffd0 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 8004fa0:	4881      	ldr	r0, [pc, #516]	; (80051a8 <LCD_Show_Feature+0x294>)
 8004fa2:	f7fc fc73 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
 8004fa6:	4a81      	ldr	r2, [pc, #516]	; (80051ac <LCD_Show_Feature+0x298>)
 8004fa8:	2303      	movs	r3, #3
 8004faa:	21b4      	movs	r1, #180	; 0xb4
 8004fac:	200e      	movs	r0, #14
 8004fae:	f7fc ffc7 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font20);
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7fc fc6a 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
 8004fb8:	f7fc fbfa 	bl	80017b0 <BSP_LCD_GetXSize>
 8004fbc:	88e1      	ldrh	r1, [r4, #6]
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <LCD_Show_Feature+0x29c>)
 8004fc0:	0840      	lsrs	r0, r0, #1
 8004fc2:	31b4      	adds	r1, #180	; 0xb4
 8004fc4:	3814      	subs	r0, #20
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	b289      	uxth	r1, r1
 8004fca:	b280      	uxth	r0, r0
 8004fcc:	f7fc ffb8 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f7fc fc5b 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 180 + Font20.Height + Font16.Height, (uint8_t*)"Font16", LEFT_MODE);
 8004fd6:	f7fc fbeb 	bl	80017b0 <BSP_LCD_GetXSize>
 8004fda:	88eb      	ldrh	r3, [r5, #6]
 8004fdc:	88e1      	ldrh	r1, [r4, #6]
 8004fde:	4a75      	ldr	r2, [pc, #468]	; (80051b4 <LCD_Show_Feature+0x2a0>)
 8004fe0:	4419      	add	r1, r3
 8004fe2:	31b4      	adds	r1, #180	; 0xb4
 8004fe4:	3850      	subs	r0, #80	; 0x50
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	b289      	uxth	r1, r1
 8004fea:	b280      	uxth	r0, r0
 8004fec:	f7fc ffa8 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
    HAL_Delay(500);    
    break;
  }
}
 8004ff0:	b006      	add	sp, #24
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8004ff4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004ff8:	f7fc fc30 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(20, 100, 60 , 40);
 8004ffc:	2328      	movs	r3, #40	; 0x28
 8004ffe:	223c      	movs	r2, #60	; 0x3c
 8005000:	2164      	movs	r1, #100	; 0x64
 8005002:	2014      	movs	r0, #20
 8005004:	f7fc fcce 	bl	80019a4 <BSP_LCD_DrawRect>
    BSP_LCD_FillRect(20, 150, 60 , 40); 
 8005008:	2328      	movs	r3, #40	; 0x28
 800500a:	223c      	movs	r2, #60	; 0x3c
 800500c:	2196      	movs	r1, #150	; 0x96
 800500e:	2014      	movs	r0, #20
 8005010:	f7fc fd70 	bl	8001af4 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_GRAY); 
 8005014:	4868      	ldr	r0, [pc, #416]	; (80051b8 <LCD_Show_Feature+0x2a4>)
 8005016:	f7fc fc21 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(50, 220, 20);
 800501a:	2214      	movs	r2, #20
 800501c:	21dc      	movs	r1, #220	; 0xdc
 800501e:	2032      	movs	r0, #50	; 0x32
 8005020:	f7fd f970 	bl	8002304 <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(120, 220, 20);
 8005024:	2214      	movs	r2, #20
 8005026:	21dc      	movs	r1, #220	; 0xdc
 8005028:	2078      	movs	r0, #120	; 0x78
 800502a:	f7fd fa0d 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800502e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005032:	f7fc fc13 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawPolygon(Points, 3);
 8005036:	4668      	mov	r0, sp
 8005038:	2103      	movs	r1, #3
 800503a:	f7fd f85b 	bl	80020f4 <BSP_LCD_DrawPolygon>
    BSP_LCD_FillPolygon(Points2, 3);
 800503e:	2103      	movs	r1, #3
 8005040:	a803      	add	r0, sp, #12
 8005042:	f7fd f8e0 	bl	8002206 <BSP_LCD_FillPolygon>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005046:	485d      	ldr	r0, [pc, #372]	; (80051bc <LCD_Show_Feature+0x2a8>)
 8005048:	f7fc fc08 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 45, 120, 30, 20);
 800504c:	f7fc fbb0 	bl	80017b0 <BSP_LCD_GetXSize>
 8005050:	2314      	movs	r3, #20
 8005052:	221e      	movs	r2, #30
 8005054:	2178      	movs	r1, #120	; 0x78
 8005056:	382d      	subs	r0, #45	; 0x2d
 8005058:	f7fd fa5e 	bl	8002518 <BSP_LCD_DrawEllipse>
    BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 45, 170, 30, 20);
 800505c:	f7fc fba8 	bl	80017b0 <BSP_LCD_GetXSize>
 8005060:	2314      	movs	r3, #20
 8005062:	221e      	movs	r2, #30
 8005064:	21aa      	movs	r1, #170	; 0xaa
 8005066:	382d      	subs	r0, #45	; 0x2d
 8005068:	f7fc fda8 	bl	8001bbc <BSP_LCD_FillEllipse>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 800506c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005070:	f7fc fbf4 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8005074:	f7fc fba4 	bl	80017c0 <BSP_LCD_GetYSize>
 8005078:	4604      	mov	r4, r0
 800507a:	f7fc fb99 	bl	80017b0 <BSP_LCD_GetXSize>
 800507e:	f1a4 011e 	sub.w	r1, r4, #30
 8005082:	b289      	uxth	r1, r1
 8005084:	2205      	movs	r2, #5
 8005086:	fbb0 f2f2 	udiv	r2, r0, r2
 800508a:	2014      	movs	r0, #20
 800508c:	b292      	uxth	r2, r2
 800508e:	f7fc fc33 	bl	80018f8 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 20, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 50);
 8005092:	f7fc fb8d 	bl	80017b0 <BSP_LCD_GetXSize>
 8005096:	4604      	mov	r4, r0
 8005098:	f7fc fb92 	bl	80017c0 <BSP_LCD_GetYSize>
 800509c:	4605      	mov	r5, r0
 800509e:	f7fc fb87 	bl	80017b0 <BSP_LCD_GetXSize>
 80050a2:	4606      	mov	r6, r0
 80050a4:	f7fc fb8c 	bl	80017c0 <BSP_LCD_GetYSize>
 80050a8:	3c96      	subs	r4, #150	; 0x96
 80050aa:	3832      	subs	r0, #50	; 0x32
 80050ac:	f1a6 0214 	sub.w	r2, r6, #20
 80050b0:	f1a5 0114 	sub.w	r1, r5, #20
 80050b4:	b283      	uxth	r3, r0
 80050b6:	b292      	uxth	r2, r2
 80050b8:	b289      	uxth	r1, r1
 80050ba:	b2a0      	uxth	r0, r4
 80050bc:	f7fc ffb0 	bl	8002020 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 50, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 20);
 80050c0:	f7fc fb76 	bl	80017b0 <BSP_LCD_GetXSize>
 80050c4:	4604      	mov	r4, r0
 80050c6:	f7fc fb7b 	bl	80017c0 <BSP_LCD_GetYSize>
 80050ca:	4605      	mov	r5, r0
 80050cc:	f7fc fb70 	bl	80017b0 <BSP_LCD_GetXSize>
 80050d0:	4606      	mov	r6, r0
 80050d2:	f7fc fb75 	bl	80017c0 <BSP_LCD_GetYSize>
 80050d6:	3c96      	subs	r4, #150	; 0x96
 80050d8:	3814      	subs	r0, #20
 80050da:	f1a6 0214 	sub.w	r2, r6, #20
 80050de:	f1a5 0132 	sub.w	r1, r5, #50	; 0x32
 80050e2:	b283      	uxth	r3, r0
 80050e4:	b292      	uxth	r2, r2
 80050e6:	b289      	uxth	r1, r1
 80050e8:	b2a0      	uxth	r0, r4
 80050ea:	f7fc ff99 	bl	8002020 <BSP_LCD_DrawLine>
    break;
 80050ee:	e77f      	b.n	8004ff0 <LCD_Show_Feature+0xdc>
    BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 80050f0:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	2014      	movs	r0, #20
 80050f6:	f7fc fc6f 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 80050fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050fe:	f7fd fcc3 	bl	8002a88 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, 100, (uint8_t *)stlogo);
 8005102:	f7fc fb55 	bl	80017b0 <BSP_LCD_GetXSize>
 8005106:	4a2e      	ldr	r2, [pc, #184]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 8005108:	2164      	movs	r1, #100	; 0x64
 800510a:	3864      	subs	r0, #100	; 0x64
 800510c:	f7fc fc64 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005114:	f7fd fcb8 	bl	8002a88 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005118:	f7fc fb52 	bl	80017c0 <BSP_LCD_GetYSize>
 800511c:	38c4      	subs	r0, #196	; 0xc4
 800511e:	0841      	lsrs	r1, r0, #1
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 8005122:	3164      	adds	r1, #100	; 0x64
 8005124:	2014      	movs	r0, #20
 8005126:	f7fc fc57 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 800512a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800512e:	f7fd fcab 	bl	8002a88 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005132:	f7fc fb3d 	bl	80017b0 <BSP_LCD_GetXSize>
 8005136:	4604      	mov	r4, r0
 8005138:	f7fc fb42 	bl	80017c0 <BSP_LCD_GetYSize>
 800513c:	f1a0 01c4 	sub.w	r1, r0, #196	; 0xc4
 8005140:	0849      	lsrs	r1, r1, #1
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 8005144:	3164      	adds	r1, #100	; 0x64
 8005146:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 800514a:	f7fc fc45 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);     
 800514e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005152:	f7fd fc99 	bl	8002a88 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 8005156:	f7fc fb33 	bl	80017c0 <BSP_LCD_GetYSize>
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 800515c:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8005160:	2014      	movs	r0, #20
 8005162:	f7fc fc39 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800516a:	f7fd fc8d 	bl	8002a88 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 800516e:	f7fc fb1f 	bl	80017b0 <BSP_LCD_GetXSize>
 8005172:	4604      	mov	r4, r0
 8005174:	f7fc fb24 	bl	80017c0 <BSP_LCD_GetYSize>
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <LCD_Show_Feature+0x2ac>)
 800517a:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 800517e:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8005182:	f7fc fc29 	bl	80019d8 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8005186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800518a:	f7fd fc7d 	bl	8002a88 <HAL_Delay>
}
 800518e:	e72f      	b.n	8004ff0 <LCD_Show_Feature+0xdc>
 8005190:	0800b614 	.word	0x0800b614
 8005194:	0800da02 	.word	0x0800da02
 8005198:	200000ec 	.word	0x200000ec
 800519c:	0800da14 	.word	0x0800da14
 80051a0:	200000f4 	.word	0x200000f4
 80051a4:	0800da28 	.word	0x0800da28
 80051a8:	200000d4 	.word	0x200000d4
 80051ac:	0800da3b 	.word	0x0800da3b
 80051b0:	0800da42 	.word	0x0800da42
 80051b4:	0800da49 	.word	0x0800da49
 80051b8:	ff808080 	.word	0xff808080
 80051bc:	ffff0000 	.word	0xffff0000
 80051c0:	0800b62c 	.word	0x0800b62c

080051c4 <LCD_demo>:
{ 
 80051c4:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80051c6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ca:	f7fc fb77 	bl	80018bc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80051ce:	4832      	ldr	r0, [pc, #200]	; (8005298 <LCD_demo+0xd4>)
 80051d0:	f7fc fb44 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80051d4:	f7fc faec 	bl	80017b0 <BSP_LCD_GetXSize>
 80051d8:	2100      	movs	r1, #0
 80051da:	b282      	uxth	r2, r0
 80051dc:	2350      	movs	r3, #80	; 0x50
 80051de:	4608      	mov	r0, r1
 80051e0:	f7fc fc88 	bl	8001af4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	f7fc fb38 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 80051ec:	482a      	ldr	r0, [pc, #168]	; (8005298 <LCD_demo+0xd4>)
 80051ee:	f7fc fb41 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80051f2:	482a      	ldr	r0, [pc, #168]	; (800529c <LCD_demo+0xd8>)
 80051f4:	f7fc fb4a 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"LCD", CENTER_MODE);
 80051f8:	2100      	movs	r1, #0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4a28      	ldr	r2, [pc, #160]	; (80052a0 <LCD_demo+0xdc>)
 80051fe:	2301      	movs	r3, #1
 8005200:	f7fc fe9e 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8005204:	4827      	ldr	r0, [pc, #156]	; (80052a4 <LCD_demo+0xe0>)
 8005206:	f7fc fb41 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows the different", CENTER_MODE);
 800520a:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <LCD_demo+0xe4>)
 800520c:	2301      	movs	r3, #1
 800520e:	211e      	movs	r1, #30
 8005210:	2000      	movs	r0, #0
 8005212:	f7fc fe95 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"LCD Features, use BUTTON", CENTER_MODE);
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <LCD_demo+0xe8>)
 8005218:	2301      	movs	r3, #1
 800521a:	212d      	movs	r1, #45	; 0x2d
 800521c:	2000      	movs	r0, #0
 800521e:	f7fc fe8f 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to display next page", CENTER_MODE);
 8005222:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <LCD_demo+0xec>)
 8005224:	2301      	movs	r3, #1
 8005226:	213c      	movs	r1, #60	; 0x3c
 8005228:	2000      	movs	r0, #0
 800522a:	f7fc fe89 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 800522e:	481a      	ldr	r0, [pc, #104]	; (8005298 <LCD_demo+0xd4>)
 8005230:	f7fc fb14 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8005234:	f7fc fabc 	bl	80017b0 <BSP_LCD_GetXSize>
 8005238:	4604      	mov	r4, r0
 800523a:	f7fc fac1 	bl	80017c0 <BSP_LCD_GetYSize>
 800523e:	f1a4 0214 	sub.w	r2, r4, #20
 8005242:	3864      	subs	r0, #100	; 0x64
 8005244:	b283      	uxth	r3, r0
 8005246:	b292      	uxth	r2, r2
 8005248:	215a      	movs	r1, #90	; 0x5a
 800524a:	200a      	movs	r0, #10
 800524c:	f7fc fbaa 	bl	80019a4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8005250:	f7fc faae 	bl	80017b0 <BSP_LCD_GetXSize>
 8005254:	4604      	mov	r4, r0
 8005256:	f7fc fab3 	bl	80017c0 <BSP_LCD_GetYSize>
 800525a:	f1a4 0216 	sub.w	r2, r4, #22
 800525e:	3866      	subs	r0, #102	; 0x66
 8005260:	b283      	uxth	r3, r0
  LCD_Feature = 0;
 8005262:	4c14      	ldr	r4, [pc, #80]	; (80052b4 <LCD_demo+0xf0>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8005264:	200b      	movs	r0, #11
 8005266:	b292      	uxth	r2, r2
 8005268:	215b      	movs	r1, #91	; 0x5b
 800526a:	f7fc fb9b 	bl	80019a4 <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 800526e:	2000      	movs	r0, #0
 8005270:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature); 
 8005272:	f7ff fe4f 	bl	8004f14 <LCD_Show_Feature>
    if(CheckForUserInput() > 0)
 8005276:	f000 f967 	bl	8005548 <CheckForUserInput>
 800527a:	b138      	cbz	r0, 800528c <LCD_demo+0xc8>
      if(++LCD_Feature < LCD_FEATURES_NUM)
 800527c:	7820      	ldrb	r0, [r4, #0]
 800527e:	3001      	adds	r0, #1
 8005280:	b2c0      	uxtb	r0, r0
 8005282:	2802      	cmp	r0, #2
 8005284:	7020      	strb	r0, [r4, #0]
 8005286:	d805      	bhi.n	8005294 <LCD_demo+0xd0>
        LCD_Show_Feature (LCD_Feature); 
 8005288:	f7ff fe44 	bl	8004f14 <LCD_Show_Feature>
    HAL_Delay(100);
 800528c:	2064      	movs	r0, #100	; 0x64
 800528e:	f7fd fbfb 	bl	8002a88 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8005292:	e7f0      	b.n	8005276 <LCD_demo+0xb2>
}
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	ff0000ff 	.word	0xff0000ff
 800529c:	200000d4 	.word	0x200000d4
 80052a0:	0800da50 	.word	0x0800da50
 80052a4:	200000e4 	.word	0x200000e4
 80052a8:	0800da54 	.word	0x0800da54
 80052ac:	0800da75 	.word	0x0800da75
 80052b0:	0800da8e 	.word	0x0800da8e
 80052b4:	200005a0 	.word	0x200005a0

080052b8 <Log_demo>:
  * @brief  LCD Log demo 
  * @param  None
  * @retval None
  */
void Log_demo(void)
{ 
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i = 0;

  /* Initialize LCD Log module */
  LCD_LOG_Init();
 80052ba:	f000 fff7 	bl	80062ac <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t*)"This is the header");
 80052be:	481a      	ldr	r0, [pc, #104]	; (8005328 <Log_demo+0x70>)
 80052c0:	f000 fffe 	bl	80062c0 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t*)"This is the footer");
 80052c4:	4819      	ldr	r0, [pc, #100]	; (800532c <Log_demo+0x74>)
 80052c6:	f001 f831 	bl	800632c <LCD_LOG_SetFooter>
  
  /* Wait For User inputs */
  while(CheckForUserInput() == 0);
 80052ca:	f000 f93d 	bl	8005548 <CheckForUserInput>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d0fb      	beq.n	80052ca <Log_demo+0x12>
  
  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 80052d2:	4d17      	ldr	r5, [pc, #92]	; (8005330 <Log_demo+0x78>)
 80052d4:	4f17      	ldr	r7, [pc, #92]	; (8005334 <Log_demo+0x7c>)
 80052d6:	4e18      	ldr	r6, [pc, #96]	; (8005338 <Log_demo+0x80>)
 80052d8:	2400      	movs	r4, #0
 80052da:	4621      	mov	r1, r4
 80052dc:	4630      	mov	r0, r6
 80052de:	602f      	str	r7, [r5, #0]
  for (i = 0; i < 10; i++)
 80052e0:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 80052e2:	f001 f99f 	bl	8006624 <iprintf>
    HAL_Delay(100);
 80052e6:	2064      	movs	r0, #100	; 0x64
 80052e8:	f7fd fbce 	bl	8002a88 <HAL_Delay>
  for (i = 0; i < 10; i++)
 80052ec:	2c0a      	cmp	r4, #10
 80052ee:	d1f4      	bne.n	80052da <Log_demo+0x22>
  }
  
  HAL_Delay(1500);
 80052f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052f4:	f7fd fbc8 	bl	8002a88 <HAL_Delay>
  
   /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 80052f8:	f001 f85a 	bl	80063b0 <LCD_LOG_ClearTextZone>
  
   /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 80052fc:	4f0d      	ldr	r7, [pc, #52]	; (8005334 <Log_demo+0x7c>)
 80052fe:	4e0e      	ldr	r6, [pc, #56]	; (8005338 <Log_demo+0x80>)
  LCD_LOG_ClearTextZone();
 8005300:	2400      	movs	r4, #0
    LCD_UsrLog ("This is Line %d \n", i);
 8005302:	4621      	mov	r1, r4
 8005304:	4630      	mov	r0, r6
 8005306:	602f      	str	r7, [r5, #0]
  for (i = 0; i < 30; i++)
 8005308:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 800530a:	f001 f98b 	bl	8006624 <iprintf>
    HAL_Delay(100);
 800530e:	2064      	movs	r0, #100	; 0x64
 8005310:	f7fd fbba 	bl	8002a88 <HAL_Delay>
  for (i = 0; i < 30; i++)
 8005314:	2c1e      	cmp	r4, #30
 8005316:	d1f4      	bne.n	8005302 <Log_demo+0x4a>
  }
  
  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if(CheckForUserInput() > 0)
 8005318:	f000 f916 	bl	8005548 <CheckForUserInput>
 800531c:	b918      	cbnz	r0, 8005326 <Log_demo+0x6e>
    {
      return;
    }    
    HAL_Delay (10);
 800531e:	200a      	movs	r0, #10
 8005320:	f7fd fbb2 	bl	8002a88 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8005324:	e7f8      	b.n	8005318 <Log_demo+0x60>
  }
}
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	0800daa3 	.word	0x0800daa3
 800532c:	0800dab6 	.word	0x0800dab6
 8005330:	200005ec 	.word	0x200005ec
 8005334:	ff000080 	.word	0xff000080
 8005338:	0800dac9 	.word	0x0800dac9

0800533c <Display_DemoDescription>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 800533c:	b530      	push	{r4, r5, lr}
  uint8_t desc[50];
  
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 800533e:	2001      	movs	r0, #1
{
 8005340:	b08f      	sub	sp, #60	; 0x3c
  BSP_LCD_SelectLayer(1);
 8005342:	f7fc fa85 	bl	8001850 <BSP_LCD_SelectLayer>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005346:	4837      	ldr	r0, [pc, #220]	; (8005424 <Display_DemoDescription+0xe8>)
  
  BSP_LCD_SetFont(&Font8);
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t*)"Copyright (c) STMicroelectronics 2017", CENTER_MODE);
  
  BSP_LCD_SetFont(&Font12);
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005348:	4d37      	ldr	r5, [pc, #220]	; (8005428 <Display_DemoDescription+0xec>)
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800534a:	f7fc fa9f 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	f7fc fa8f 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005356:	f04f 30ff 	mov.w	r0, #4294967295
 800535a:	f7fc faaf 	bl	80018bc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);  
 800535e:	4833      	ldr	r0, [pc, #204]	; (800542c <Display_DemoDescription+0xf0>)
 8005360:	f7fc fa7c 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
 8005364:	4a32      	ldr	r2, [pc, #200]	; (8005430 <Display_DemoDescription+0xf4>)
 8005366:	2301      	movs	r3, #1
 8005368:	210a      	movs	r1, #10
 800536a:	2000      	movs	r0, #0
 800536c:	f7fc fde8 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8005370:	4830      	ldr	r0, [pc, #192]	; (8005434 <Display_DemoDescription+0xf8>)
 8005372:	f7fc fa8b 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t*)"Drivers examples", CENTER_MODE);
 8005376:	2301      	movs	r3, #1
 8005378:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <Display_DemoDescription+0xfc>)
 800537a:	2123      	movs	r1, #35	; 0x23
 800537c:	2000      	movs	r0, #0
 800537e:	f7fc fddf 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80)/2, 65, (uint8_t *)stlogo);
 8005382:	f7fc fa15 	bl	80017b0 <BSP_LCD_GetXSize>
 8005386:	3850      	subs	r0, #80	; 0x50
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <Display_DemoDescription+0x100>)
 800538a:	2141      	movs	r1, #65	; 0x41
 800538c:	0840      	lsrs	r0, r0, #1
 800538e:	f7fc fb23 	bl	80019d8 <BSP_LCD_DrawBitmap>
  BSP_LCD_SetFont(&Font8);
 8005392:	482b      	ldr	r0, [pc, #172]	; (8005440 <Display_DemoDescription+0x104>)
 8005394:	f7fc fa7a 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t*)"Copyright (c) STMicroelectronics 2017", CENTER_MODE);
 8005398:	f7fc fa12 	bl	80017c0 <BSP_LCD_GetYSize>
 800539c:	3814      	subs	r0, #20
 800539e:	b281      	uxth	r1, r0
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <Display_DemoDescription+0x108>)
 80053a2:	2301      	movs	r3, #1
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fc fdcb 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80053aa:	4827      	ldr	r0, [pc, #156]	; (8005448 <Display_DemoDescription+0x10c>)
 80053ac:	f7fc fa6e 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7fc fa53 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 80053b6:	f7fc fa03 	bl	80017c0 <BSP_LCD_GetYSize>
 80053ba:	4604      	mov	r4, r0
 80053bc:	f7fc f9f8 	bl	80017b0 <BSP_LCD_GetXSize>
 80053c0:	0861      	lsrs	r1, r4, #1
 80053c2:	310f      	adds	r1, #15
 80053c4:	b282      	uxth	r2, r0
 80053c6:	233c      	movs	r3, #60	; 0x3c
 80053c8:	b289      	uxth	r1, r1
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fc fb92 	bl	8001af4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	f7fc fa42 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 80053d8:	4628      	mov	r0, r5
 80053da:	f7fc fa4b 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"Press USER Button to start:", CENTER_MODE);
 80053de:	f7fc f9ef 	bl	80017c0 <BSP_LCD_GetYSize>
 80053e2:	0840      	lsrs	r0, r0, #1
 80053e4:	f100 011e 	add.w	r1, r0, #30
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <Display_DemoDescription+0x110>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	b289      	uxth	r1, r1
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fc fda6 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc,"%s example", BSP_examples[DemoIndex].DemoName);
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <Display_DemoDescription+0x114>)
 80053f6:	4a17      	ldr	r2, [pc, #92]	; (8005454 <Display_DemoDescription+0x118>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	213c      	movs	r1, #60	; 0x3c
 80053fc:	fb01 2203 	mla	r2, r1, r3, r2
 8005400:	3204      	adds	r2, #4
 8005402:	4915      	ldr	r1, [pc, #84]	; (8005458 <Display_DemoDescription+0x11c>)
 8005404:	a801      	add	r0, sp, #4
 8005406:	f001 f925 	bl	8006654 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 45, (uint8_t *)desc, CENTER_MODE);   
 800540a:	f7fc f9d9 	bl	80017c0 <BSP_LCD_GetYSize>
 800540e:	0840      	lsrs	r0, r0, #1
 8005410:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 8005414:	2301      	movs	r3, #1
 8005416:	aa01      	add	r2, sp, #4
 8005418:	b289      	uxth	r1, r1
 800541a:	2000      	movs	r0, #0
 800541c:	f7fc fd90 	bl	8001f40 <BSP_LCD_DisplayStringAt>
}
 8005420:	b00f      	add	sp, #60	; 0x3c
 8005422:	bd30      	pop	{r4, r5, pc}
 8005424:	200000d4 	.word	0x200000d4
 8005428:	ff0000ff 	.word	0xff0000ff
 800542c:	ff000080 	.word	0xff000080
 8005430:	0800dadb 	.word	0x0800dadb
 8005434:	200000ec 	.word	0x200000ec
 8005438:	0800daea 	.word	0x0800daea
 800543c:	0800b62c 	.word	0x0800b62c
 8005440:	200000dc 	.word	0x200000dc
 8005444:	0800dafb 	.word	0x0800dafb
 8005448:	200000e4 	.word	0x200000e4
 800544c:	0800db21 	.word	0x0800db21
 8005450:	200005a1 	.word	0x200005a1
 8005454:	2000010c 	.word	0x2000010c
 8005458:	0800db3d 	.word	0x0800db3d

0800545c <main>:
{ 
 800545c:	b500      	push	{lr}
 800545e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8005460:	f7fd fae6 	bl	8002a30 <HAL_Init>
  BSP_LED_Init(LED3);
 8005464:	2000      	movs	r0, #0
 8005466:	f7fb fee9 	bl	800123c <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 800546a:	2001      	movs	r0, #1
 800546c:	f7fb fee6 	bl	800123c <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005470:	2400      	movs	r4, #0
 8005472:	4b31      	ldr	r3, [pc, #196]	; (8005538 <main+0xdc>)
 8005474:	9401      	str	r4, [sp, #4]
 8005476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <main+0xe0>)
 800548a:	9402      	str	r4, [sp, #8]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800549a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800549c:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800549e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054a4:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054a6:	e9cd 5308 	strd	r5, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 360;
 80054ae:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054b0:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 80054b4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80054b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80054bc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80054be:	2307      	movs	r3, #7
 80054c0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054c2:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80054c4:	f7fe fc1c 	bl	8003d00 <HAL_RCC_OscConfig>
  HAL_PWREx_EnableOverDrive();
 80054c8:	f7fe fbe0 	bl	8003c8c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80054cc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054ce:	e9cd 3603 	strd	r3, r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80054d2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80054d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054da:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80054de:	a803      	add	r0, sp, #12
 80054e0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054e2:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80054e4:	f7fe fdea 	bl	80040bc <HAL_RCC_ClockConfig>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80054e8:	4629      	mov	r1, r5
 80054ea:	4620      	mov	r0, r4
 80054ec:	f7fb feee 	bl	80012cc <BSP_PB_Init>
  BSP_LCD_Init();
 80054f0:	f7fc fc5c 	bl	8001dac <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 80054f4:	4628      	mov	r0, r5
 80054f6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80054fa:	f7fc f969 	bl	80017d0 <BSP_LCD_LayerDefaultInit>
  Display_DemoDescription();
 80054fe:	f7ff ff1d 	bl	800533c <Display_DemoDescription>
      BSP_examples[DemoIndex++].DemoFunc();
 8005502:	4d0f      	ldr	r5, [pc, #60]	; (8005540 <main+0xe4>)
 8005504:	4e0f      	ldr	r6, [pc, #60]	; (8005544 <main+0xe8>)
    if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 8005506:	2000      	movs	r0, #0
 8005508:	f7fb ff1a 	bl	8001340 <BSP_PB_GetState>
 800550c:	2800      	cmp	r0, #0
 800550e:	d1fa      	bne.n	8005506 <main+0xaa>
      while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 8005510:	2000      	movs	r0, #0
 8005512:	f7fb ff15 	bl	8001340 <BSP_PB_GetState>
 8005516:	2800      	cmp	r0, #0
 8005518:	d0fa      	beq.n	8005510 <main+0xb4>
      BSP_examples[DemoIndex++].DemoFunc();
 800551a:	782b      	ldrb	r3, [r5, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	702a      	strb	r2, [r5, #0]
 8005520:	223c      	movs	r2, #60	; 0x3c
 8005522:	4353      	muls	r3, r2
 8005524:	58f3      	ldr	r3, [r6, r3]
 8005526:	4798      	blx	r3
      if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8005528:	782b      	ldrb	r3, [r5, #0]
 800552a:	2b03      	cmp	r3, #3
        DemoIndex = 0;
 800552c:	bf88      	it	hi
 800552e:	702c      	strbhi	r4, [r5, #0]
      Display_DemoDescription();
 8005530:	f7ff ff04 	bl	800533c <Display_DemoDescription>
 8005534:	e7e7      	b.n	8005506 <main+0xaa>
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	40007000 	.word	0x40007000
 8005540:	200005a1 	.word	0x200005a1
 8005544:	2000010c 	.word	0x2000010c

08005548 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8005548:	b508      	push	{r3, lr}
  if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 800554a:	2000      	movs	r0, #0
 800554c:	f7fb fef8 	bl	8001340 <BSP_PB_GetState>
 8005550:	b930      	cbnz	r0, 8005560 <CheckForUserInput+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 8005552:	2000      	movs	r0, #0
 8005554:	f7fb fef4 	bl	8001340 <BSP_PB_GetState>
 8005558:	2800      	cmp	r0, #0
 800555a:	d0fa      	beq.n	8005552 <CheckForUserInput+0xa>
    return 1;
 800555c:	2001      	movs	r0, #1
  }
  return 0;
}
 800555e:	bd08      	pop	{r3, pc}
  return 0;
 8005560:	2000      	movs	r0, #0
 8005562:	e7fc      	b.n	800555e <CheckForUserInput+0x16>

08005564 <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8005564:	b510      	push	{r4, lr}
  static uint8_t ticks = 0;
  
  if(ticks++ > 100)
 8005566:	4c07      	ldr	r4, [pc, #28]	; (8005584 <Toggle_Leds+0x20>)
 8005568:	7863      	ldrb	r3, [r4, #1]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	2b64      	cmp	r3, #100	; 0x64
 800556e:	7062      	strb	r2, [r4, #1]
 8005570:	d907      	bls.n	8005582 <Toggle_Leds+0x1e>
  {
    BSP_LED_Toggle(LED3);
 8005572:	2000      	movs	r0, #0
 8005574:	f7fb fe9c 	bl	80012b0 <BSP_LED_Toggle>
    BSP_LED_Toggle(LED4);
 8005578:	2001      	movs	r0, #1
 800557a:	f7fb fe99 	bl	80012b0 <BSP_LED_Toggle>
    ticks = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	7063      	strb	r3, [r4, #1]
  }
}
 8005582:	bd10      	pop	{r4, pc}
 8005584:	200005a1 	.word	0x200005a1

08005588 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 if (GPIO_Pin == KEY_BUTTON_PIN)
 8005588:	2801      	cmp	r0, #1
 {
   ubKeyPressed = SET;
 800558a:	bf04      	itt	eq
 800558c:	4b01      	ldreq	r3, [pc, #4]	; (8005594 <HAL_GPIO_EXTI_Callback+0xc>)
 800558e:	7098      	strbeq	r0, [r3, #2]
 }
}
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	200005a1 	.word	0x200005a1

08005598 <Gyroscope_DrawBackground>:
  * @param  Localstate: Touch zone state
  * @retval None
  */
static void Gyroscope_DrawBackground (uint8_t Localstate)
{
  switch(Localstate)
 8005598:	2810      	cmp	r0, #16
{
 800559a:	b510      	push	{r4, lr}
  switch(Localstate)
 800559c:	d814      	bhi.n	80055c8 <Gyroscope_DrawBackground+0x30>
 800559e:	2810      	cmp	r0, #16
 80055a0:	d815      	bhi.n	80055ce <Gyroscope_DrawBackground+0x36>
 80055a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80055a6:	0015      	.short	0x0015
 80055a8:	00a70085 	.word	0x00a70085
 80055ac:	00c60014 	.word	0x00c60014
 80055b0:	00140014 	.word	0x00140014
 80055b4:	00e60014 	.word	0x00e60014
 80055b8:	00140014 	.word	0x00140014
 80055bc:	00140014 	.word	0x00140014
 80055c0:	00140014 	.word	0x00140014
 80055c4:	01090014 	.word	0x01090014
 80055c8:	2820      	cmp	r0, #32
 80055ca:	f000 8115 	beq.w	80057f8 <Gyroscope_DrawBackground+0x260>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
    break;
  }
}
 80055ce:	bd10      	pop	{r4, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80055d0:	489a      	ldr	r0, [pc, #616]	; (800583c <Gyroscope_DrawBackground+0x2a4>)
 80055d2:	f7fc f943 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 80055d6:	f7fc f8eb 	bl	80017b0 <BSP_LCD_GetXSize>
 80055da:	2405      	movs	r4, #5
 80055dc:	221e      	movs	r2, #30
 80055de:	21c8      	movs	r1, #200	; 0xc8
 80055e0:	fbb0 f0f4 	udiv	r0, r0, r4
 80055e4:	b280      	uxth	r0, r0
 80055e6:	f7fc ff2f 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 80055ea:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80055ee:	f7fc f935 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 80055f2:	f7fc f8dd 	bl	80017b0 <BSP_LCD_GetXSize>
 80055f6:	fbb0 f0f4 	udiv	r0, r0, r4
 80055fa:	0080      	lsls	r0, r0, #2
 80055fc:	221e      	movs	r2, #30
 80055fe:	21c8      	movs	r1, #200	; 0xc8
 8005600:	b280      	uxth	r0, r0
 8005602:	f7fc ff21 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8005606:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800560a:	f7fc f927 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 800560e:	f7fc f8cf 	bl	80017b0 <BSP_LCD_GetXSize>
 8005612:	221e      	movs	r2, #30
 8005614:	2182      	movs	r1, #130	; 0x82
 8005616:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800561a:	f7fc ff15 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 800561e:	4888      	ldr	r0, [pc, #544]	; (8005840 <Gyroscope_DrawBackground+0x2a8>)
 8005620:	f7fc f91c 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 8005624:	f7fc f8c4 	bl	80017b0 <BSP_LCD_GetXSize>
 8005628:	221e      	movs	r2, #30
 800562a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800562e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005632:	f7fc ff09 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 8005636:	4883      	ldr	r0, [pc, #524]	; (8005844 <Gyroscope_DrawBackground+0x2ac>)
 8005638:	f7fc f910 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 800563c:	f7fc f8b8 	bl	80017b0 <BSP_LCD_GetXSize>
 8005640:	221e      	movs	r2, #30
 8005642:	21c8      	movs	r1, #200	; 0xc8
 8005644:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005648:	f7fc fefe 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	f7fc f904 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS - 2);        
 8005654:	f7fc f8ac 	bl	80017b0 <BSP_LCD_GetXSize>
 8005658:	221c      	movs	r2, #28
 800565a:	21c8      	movs	r1, #200	; 0xc8
 800565c:	fbb0 f0f4 	udiv	r0, r0, r4
 8005660:	b280      	uxth	r0, r0
 8005662:	f7fc fef1 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS,  CIRCLE_RADIUS - 2); 
 8005666:	f7fc f8a3 	bl	80017b0 <BSP_LCD_GetXSize>
 800566a:	fbb0 f0f4 	udiv	r0, r0, r4
 800566e:	0080      	lsls	r0, r0, #2
 8005670:	221c      	movs	r2, #28
 8005672:	21c8      	movs	r1, #200	; 0xc8
 8005674:	b280      	uxth	r0, r0
 8005676:	f7fc fee7 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS - 2);
 800567a:	f7fc f899 	bl	80017b0 <BSP_LCD_GetXSize>
 800567e:	221c      	movs	r2, #28
 8005680:	2182      	movs	r1, #130	; 0x82
 8005682:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005686:	f7fc fedf 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS - 2);
 800568a:	f7fc f891 	bl	80017b0 <BSP_LCD_GetXSize>
 800568e:	221c      	movs	r2, #28
 8005690:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005694:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005698:	f7fc fed6 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 800569c:	f7fc f888 	bl	80017b0 <BSP_LCD_GetXSize>
}
 80056a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 80056a4:	221c      	movs	r2, #28
 80056a6:	21c8      	movs	r1, #200	; 0xc8
 80056a8:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80056ac:	f7fc becc 	b.w	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80056b0:	4863      	ldr	r0, [pc, #396]	; (8005840 <Gyroscope_DrawBackground+0x2a8>)
 80056b2:	f7fc f8d3 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 80056b6:	f7fc f87b 	bl	80017b0 <BSP_LCD_GetXSize>
 80056ba:	221e      	movs	r2, #30
 80056bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80056c0:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80056c4:	f7fc fec0 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80056c8:	485f      	ldr	r0, [pc, #380]	; (8005848 <Gyroscope_DrawBackground+0x2b0>)
 80056ca:	f7fc f8df 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	f7fc f8c3 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80056d6:	485a      	ldr	r0, [pc, #360]	; (8005840 <Gyroscope_DrawBackground+0x2a8>)
 80056d8:	f7fc f8cc 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_DOWN_X_POS-(CIRCLE_RADIUS/2), CIRCLE_DOWN_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X+",LEFT_MODE);
 80056dc:	f7fc f868 	bl	80017b0 <BSP_LCD_GetXSize>
 80056e0:	4a5a      	ldr	r2, [pc, #360]	; (800584c <Gyroscope_DrawBackground+0x2b4>)
 80056e2:	0840      	lsrs	r0, r0, #1
 80056e4:	380f      	subs	r0, #15
 80056e6:	2303      	movs	r3, #3
 80056e8:	21ff      	movs	r1, #255	; 0xff
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 80056ea:	b280      	uxth	r0, r0
}
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 80056f0:	f7fc bc26 	b.w	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80056f4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80056f8:	f7fc f8b0 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 80056fc:	f7fc f858 	bl	80017b0 <BSP_LCD_GetXSize>
 8005700:	221e      	movs	r2, #30
 8005702:	2182      	movs	r1, #130	; 0x82
 8005704:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005708:	f7fc fe9e 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 800570c:	484e      	ldr	r0, [pc, #312]	; (8005848 <Gyroscope_DrawBackground+0x2b0>)
 800570e:	f7fc f8bd 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005712:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005716:	f7fc f8a1 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 800571a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800571e:	f7fc f8a9 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 8005722:	f7fc f845 	bl	80017b0 <BSP_LCD_GetXSize>
 8005726:	0840      	lsrs	r0, r0, #1
 8005728:	4a49      	ldr	r2, [pc, #292]	; (8005850 <Gyroscope_DrawBackground+0x2b8>)
 800572a:	380f      	subs	r0, #15
 800572c:	2303      	movs	r3, #3
 800572e:	2173      	movs	r1, #115	; 0x73
 8005730:	e7db      	b.n	80056ea <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005732:	4842      	ldr	r0, [pc, #264]	; (800583c <Gyroscope_DrawBackground+0x2a4>)
 8005734:	f7fc f892 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 8005738:	f7fc f83a 	bl	80017b0 <BSP_LCD_GetXSize>
 800573c:	2405      	movs	r4, #5
 800573e:	221e      	movs	r2, #30
 8005740:	21c8      	movs	r1, #200	; 0xc8
 8005742:	fbb0 f0f4 	udiv	r0, r0, r4
 8005746:	b280      	uxth	r0, r0
 8005748:	f7fc fe7e 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 800574c:	483e      	ldr	r0, [pc, #248]	; (8005848 <Gyroscope_DrawBackground+0x2b0>)
 800574e:	f7fc f89d 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005752:	f04f 30ff 	mov.w	r0, #4294967295
 8005756:	f7fc f881 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800575a:	4838      	ldr	r0, [pc, #224]	; (800583c <Gyroscope_DrawBackground+0x2a4>)
 800575c:	f7fc f88a 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_LEFT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_LEFT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y-", LEFT_MODE);
 8005760:	f7fc f826 	bl	80017b0 <BSP_LCD_GetXSize>
 8005764:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <Gyroscope_DrawBackground+0x2bc>)
 8005766:	fbb0 f0f4 	udiv	r0, r0, r4
 800576a:	2303      	movs	r3, #3
 800576c:	380f      	subs	r0, #15
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 800576e:	21b9      	movs	r1, #185	; 0xb9
 8005770:	e7bb      	b.n	80056ea <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005772:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005776:	f7fc f871 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 800577a:	f7fc f819 	bl	80017b0 <BSP_LCD_GetXSize>
 800577e:	2405      	movs	r4, #5
 8005780:	fbb0 f0f4 	udiv	r0, r0, r4
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	221e      	movs	r2, #30
 8005788:	21c8      	movs	r1, #200	; 0xc8
 800578a:	b280      	uxth	r0, r0
 800578c:	f7fc fe5c 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 8005790:	482d      	ldr	r0, [pc, #180]	; (8005848 <Gyroscope_DrawBackground+0x2b0>)
 8005792:	f7fc f87b 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005796:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800579a:	f7fc f85f 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800579e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80057a2:	f7fc f867 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 80057a6:	f7fc f803 	bl	80017b0 <BSP_LCD_GetXSize>
 80057aa:	fbb0 f0f4 	udiv	r0, r0, r4
 80057ae:	0080      	lsls	r0, r0, #2
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <Gyroscope_DrawBackground+0x2c0>)
 80057b2:	380f      	subs	r0, #15
 80057b4:	2303      	movs	r3, #3
 80057b6:	e7da      	b.n	800576e <Gyroscope_DrawBackground+0x1d6>
    if((state & 32) == 0)
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <Gyroscope_DrawBackground+0x2c4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	069a      	lsls	r2, r3, #26
 80057be:	d40a      	bmi.n	80057d6 <Gyroscope_DrawBackground+0x23e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80057c0:	4820      	ldr	r0, [pc, #128]	; (8005844 <Gyroscope_DrawBackground+0x2ac>)
 80057c2:	f7fc f84b 	bl	800185c <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 80057c6:	f7fb fff3 	bl	80017b0 <BSP_LCD_GetXSize>
 80057ca:	221e      	movs	r2, #30
 80057cc:	21c8      	movs	r1, #200	; 0xc8
 80057ce:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80057d2:	f7fc fe39 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 80057d6:	4822      	ldr	r0, [pc, #136]	; (8005860 <Gyroscope_DrawBackground+0x2c8>)
 80057d8:	f7fc f858 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	f7fc f83c 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 80057e4:	4817      	ldr	r0, [pc, #92]	; (8005844 <Gyroscope_DrawBackground+0x2ac>)
 80057e6:	f7fc f845 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS-(CIRCLE_RADIUS/2), CIRCLE_CENTRAL_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Z-", LEFT_MODE);
 80057ea:	f7fb ffe1 	bl	80017b0 <BSP_LCD_GetXSize>
 80057ee:	0840      	lsrs	r0, r0, #1
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <Gyroscope_DrawBackground+0x2cc>)
 80057f2:	380f      	subs	r0, #15
 80057f4:	2303      	movs	r3, #3
 80057f6:	e7ba      	b.n	800576e <Gyroscope_DrawBackground+0x1d6>
    if((state & 16) == 0)
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <Gyroscope_DrawBackground+0x2c4>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	06db      	lsls	r3, r3, #27
 80057fe:	d40a      	bmi.n	8005816 <Gyroscope_DrawBackground+0x27e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 8005800:	4810      	ldr	r0, [pc, #64]	; (8005844 <Gyroscope_DrawBackground+0x2ac>)
 8005802:	f7fc f82b 	bl	800185c <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8005806:	f7fb ffd3 	bl	80017b0 <BSP_LCD_GetXSize>
 800580a:	221e      	movs	r2, #30
 800580c:	21c8      	movs	r1, #200	; 0xc8
 800580e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005812:	f7fc fe19 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 8005816:	4812      	ldr	r0, [pc, #72]	; (8005860 <Gyroscope_DrawBackground+0x2c8>)
 8005818:	f7fc f838 	bl	800188c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800581c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005820:	f7fc f81c 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8005824:	4807      	ldr	r0, [pc, #28]	; (8005844 <Gyroscope_DrawBackground+0x2ac>)
 8005826:	f7fc f825 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 800582a:	f7fb ffc1 	bl	80017b0 <BSP_LCD_GetXSize>
 800582e:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <Gyroscope_DrawBackground+0x2d0>)
 8005830:	2303      	movs	r3, #3
 8005832:	21c8      	movs	r1, #200	; 0xc8
 8005834:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8005838:	e758      	b.n	80056ec <Gyroscope_DrawBackground+0x154>
 800583a:	bf00      	nop
 800583c:	ff0000ff 	.word	0xff0000ff
 8005840:	ffff0000 	.word	0xffff0000
 8005844:	ffffa500 	.word	0xffffa500
 8005848:	200000d4 	.word	0x200000d4
 800584c:	0800db48 	.word	0x0800db48
 8005850:	0800db4b 	.word	0x0800db4b
 8005854:	0800db4e 	.word	0x0800db4e
 8005858:	0800db51 	.word	0x0800db51
 800585c:	200005a4 	.word	0x200005a4
 8005860:	200000ec 	.word	0x200000ec
 8005864:	0800db54 	.word	0x0800db54
 8005868:	0800db57 	.word	0x0800db57

0800586c <MEMS_demo>:
{
 800586c:	b538      	push	{r3, r4, r5, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
{
 8005872:	ed2d 8b02 	vpush	{d8}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005876:	f7fc f821 	bl	80018bc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800587a:	4892      	ldr	r0, [pc, #584]	; (8005ac4 <MEMS_demo+0x258>)
 800587c:	f7fb ffee 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8005880:	f7fb ff96 	bl	80017b0 <BSP_LCD_GetXSize>
 8005884:	2100      	movs	r1, #0
 8005886:	b282      	uxth	r2, r0
 8005888:	2350      	movs	r3, #80	; 0x50
 800588a:	4608      	mov	r0, r1
 800588c:	f7fc f932 	bl	8001af4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	f7fb ffe2 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8005898:	488a      	ldr	r0, [pc, #552]	; (8005ac4 <MEMS_demo+0x258>)
 800589a:	f7fb ffeb 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800589e:	488a      	ldr	r0, [pc, #552]	; (8005ac8 <MEMS_demo+0x25c>)
 80058a0:	f7fb fff4 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"MEMS", CENTER_MODE);
 80058a4:	2100      	movs	r1, #0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4a88      	ldr	r2, [pc, #544]	; (8005acc <MEMS_demo+0x260>)
 80058aa:	2301      	movs	r3, #1
 80058ac:	f7fc fb48 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80058b0:	4887      	ldr	r0, [pc, #540]	; (8005ad0 <MEMS_demo+0x264>)
 80058b2:	f7fb ffeb 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows MEMS Features", CENTER_MODE);
 80058b6:	4a87      	ldr	r2, [pc, #540]	; (8005ad4 <MEMS_demo+0x268>)
 80058b8:	2301      	movs	r3, #1
 80058ba:	211e      	movs	r1, #30
 80058bc:	2000      	movs	r0, #0
 80058be:	f7fc fb3f 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"move board around axis", CENTER_MODE);
 80058c2:	4a85      	ldr	r2, [pc, #532]	; (8005ad8 <MEMS_demo+0x26c>)
 80058c4:	2301      	movs	r3, #1
 80058c6:	212d      	movs	r1, #45	; 0x2d
 80058c8:	2000      	movs	r0, #0
 80058ca:	f7fc fb39 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to start test", CENTER_MODE);
 80058ce:	4a83      	ldr	r2, [pc, #524]	; (8005adc <MEMS_demo+0x270>)
 80058d0:	2301      	movs	r3, #1
 80058d2:	213c      	movs	r1, #60	; 0x3c
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fc fb33 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80058da:	487a      	ldr	r0, [pc, #488]	; (8005ac4 <MEMS_demo+0x258>)
 80058dc:	f7fb ffbe 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80058e0:	f7fb ff66 	bl	80017b0 <BSP_LCD_GetXSize>
 80058e4:	4604      	mov	r4, r0
 80058e6:	f7fb ff6b 	bl	80017c0 <BSP_LCD_GetYSize>
 80058ea:	f1a4 0214 	sub.w	r2, r4, #20
 80058ee:	3864      	subs	r0, #100	; 0x64
 80058f0:	b283      	uxth	r3, r0
 80058f2:	b292      	uxth	r2, r2
 80058f4:	215a      	movs	r1, #90	; 0x5a
 80058f6:	200a      	movs	r0, #10
 80058f8:	f7fc f854 	bl	80019a4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80058fc:	f7fb ff58 	bl	80017b0 <BSP_LCD_GetXSize>
 8005900:	4604      	mov	r4, r0
 8005902:	f7fb ff5d 	bl	80017c0 <BSP_LCD_GetYSize>
 8005906:	f1a4 0216 	sub.w	r2, r4, #22
 800590a:	3866      	subs	r0, #102	; 0x66
 800590c:	b283      	uxth	r3, r0
 800590e:	b292      	uxth	r2, r2
 8005910:	215b      	movs	r1, #91	; 0x5b
 8005912:	200b      	movs	r0, #11
 8005914:	f7fc f846 	bl	80019a4 <BSP_LCD_DrawRect>
  if (BSP_GYRO_Init() != GYRO_OK)
 8005918:	f7fb fee8 	bl	80016ec <BSP_GYRO_Init>
 800591c:	4c70      	ldr	r4, [pc, #448]	; (8005ae0 <MEMS_demo+0x274>)
 800591e:	2800      	cmp	r0, #0
 8005920:	d072      	beq.n	8005a08 <MEMS_demo+0x19c>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	f7fb ffa5 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800592a:	486e      	ldr	r0, [pc, #440]	; (8005ae4 <MEMS_demo+0x278>)
 800592c:	f7fb ff96 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8005930:	f7fb ff46 	bl	80017c0 <BSP_LCD_GetYSize>
 8005934:	385f      	subs	r0, #95	; 0x5f
 8005936:	b281      	uxth	r1, r0
 8005938:	4a6b      	ldr	r2, [pc, #428]	; (8005ae8 <MEMS_demo+0x27c>)
 800593a:	2301      	movs	r3, #1
 800593c:	2000      	movs	r0, #0
 800593e:	f7fc faff 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"MEMS cannot be initialized", CENTER_MODE);
 8005942:	f7fb ff3d 	bl	80017c0 <BSP_LCD_GetYSize>
 8005946:	3850      	subs	r0, #80	; 0x50
 8005948:	b281      	uxth	r1, r0
 800594a:	4a68      	ldr	r2, [pc, #416]	; (8005aec <MEMS_demo+0x280>)
 800594c:	2301      	movs	r3, #1
 800594e:	2000      	movs	r0, #0
 8005950:	f7fc faf6 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_GYRO_Reset();
 8005954:	f7fb feea 	bl	800172c <BSP_GYRO_Reset>
    BSP_GYRO_GetXYZ(Buffer);
 8005958:	4d65      	ldr	r5, [pc, #404]	; (8005af0 <MEMS_demo+0x284>)
      if(Buffer[2] < -10000.0f)
 800595a:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8005af4 <MEMS_demo+0x288>
      else if(Buffer[2] > 10000.0f)
 800595e:	eddf 8a66 	vldr	s17, [pc, #408]	; 8005af8 <MEMS_demo+0x28c>
    BSP_GYRO_GetXYZ(Buffer);
 8005962:	4628      	mov	r0, r5
 8005964:	f7fb feea 	bl	800173c <BSP_GYRO_GetXYZ>
    Xval = ABS((Buffer[0]));
 8005968:	ed94 5a01 	vldr	s10, [r4, #4]
    Yval = ABS((Buffer[1])); 
 800596c:	edd4 5a02 	vldr	s11, [r4, #8]
    Zval = ABS((Buffer[2])); 
 8005970:	ed94 6a03 	vldr	s12, [r4, #12]
        if((state & 1) == 0)
 8005974:	7823      	ldrb	r3, [r4, #0]
    Xval = ABS((Buffer[0]));
 8005976:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Yval = ABS((Buffer[1])); 
 800597e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
    Xval = ABS((Buffer[0]));
 8005982:	bf4c      	ite	mi
 8005984:	eef1 6a45 	vnegmi.f32	s13, s10
 8005988:	eef0 6a45 	vmovpl.f32	s13, s10
    Yval = ABS((Buffer[1])); 
 800598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005990:	bf4c      	ite	mi
 8005992:	eeb1 7a65 	vnegmi.f32	s14, s11
 8005996:	eeb0 7a65 	vmovpl.f32	s14, s11
    Zval = ABS((Buffer[2])); 
 800599a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if((Xval>Yval) && (Xval>Zval))
 80059a2:	eef4 6ac7 	vcmpe.f32	s13, s14
    Zval = ABS((Buffer[2])); 
 80059a6:	bf4c      	ite	mi
 80059a8:	eef1 7a46 	vnegmi.f32	s15, s12
 80059ac:	eef0 7a46 	vmovpl.f32	s15, s12
    if((Xval>Yval) && (Xval>Zval))
 80059b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Xval = ABS((Buffer[0]));
 80059b4:	edc4 6a04 	vstr	s13, [r4, #16]
    Yval = ABS((Buffer[1])); 
 80059b8:	ed84 7a05 	vstr	s14, [r4, #20]
    Zval = ABS((Buffer[2])); 
 80059bc:	edc4 7a06 	vstr	s15, [r4, #24]
    if((Xval>Yval) && (Xval>Zval))
 80059c0:	dd34      	ble.n	8005a2c <MEMS_demo+0x1c0>
 80059c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	dd2f      	ble.n	8005a2c <MEMS_demo+0x1c0>
      if(Buffer[0] > 10000.0f)
 80059cc:	eeb4 5ae8 	vcmpe.f32	s10, s17
 80059d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d4:	dd1c      	ble.n	8005a10 <MEMS_demo+0x1a4>
        if((state & 1) == 0)
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d40a      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(1);			
 80059da:	2001      	movs	r0, #1
 80059dc:	f7ff fddc 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 1;
 80059e0:	7823      	ldrb	r3, [r4, #0]
 80059e2:	f043 0301 	orr.w	r3, r3, #1
          HAL_Delay(1000);			
 80059e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          state |= 32;
 80059ea:	7023      	strb	r3, [r4, #0]
          HAL_Delay(1000);			
 80059ec:	f7fd f84c 	bl	8002a88 <HAL_Delay>
    if (state != 0x3F)	
 80059f0:	7823      	ldrb	r3, [r4, #0]
 80059f2:	2b3f      	cmp	r3, #63	; 0x3f
 80059f4:	d1b5      	bne.n	8005962 <MEMS_demo+0xf6>
    else if (CheckForUserInput() > 0)
 80059f6:	f7ff fda7 	bl	8005548 <CheckForUserInput>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d0af      	beq.n	800595e <MEMS_demo+0xf2>
      state = 0;    
 80059fe:	2300      	movs	r3, #0
 8005a00:	7023      	strb	r3, [r4, #0]
}
 8005a02:	ecbd 8b02 	vpop	{d8}
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
    Gyroscope_DrawBackground(state);
 8005a08:	7820      	ldrb	r0, [r4, #0]
 8005a0a:	f7ff fdc5 	bl	8005598 <Gyroscope_DrawBackground>
 8005a0e:	e7a1      	b.n	8005954 <MEMS_demo+0xe8>
      else if(Buffer[0] < -10000.0f)
 8005a10:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	d5ea      	bpl.n	80059f0 <MEMS_demo+0x184>
        if((state & 2) == 0)
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	d4e8      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(2);            
 8005a1e:	2002      	movs	r0, #2
 8005a20:	f7ff fdba 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 2;
 8005a24:	7823      	ldrb	r3, [r4, #0]
 8005a26:	f043 0302 	orr.w	r3, r3, #2
 8005a2a:	e7dc      	b.n	80059e6 <MEMS_demo+0x17a>
    else if ((Yval>Xval) && (Yval>Zval))
 8005a2c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a34:	d520      	bpl.n	8005a78 <MEMS_demo+0x20c>
 8005a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3e:	dd1b      	ble.n	8005a78 <MEMS_demo+0x20c>
      if(Buffer[1] < -10000.0f)
 8005a40:	eef4 5ac8 	vcmpe.f32	s11, s16
 8005a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a48:	d508      	bpl.n	8005a5c <MEMS_demo+0x1f0>
        if((state & 4) == 0)
 8005a4a:	0758      	lsls	r0, r3, #29
 8005a4c:	d4d0      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(4);            
 8005a4e:	2004      	movs	r0, #4
 8005a50:	f7ff fda2 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 4;
 8005a54:	7823      	ldrb	r3, [r4, #0]
 8005a56:	f043 0304 	orr.w	r3, r3, #4
 8005a5a:	e7c4      	b.n	80059e6 <MEMS_demo+0x17a>
      else if(Buffer[1] > 10000.0f)
 8005a5c:	eef4 5ae8 	vcmpe.f32	s11, s17
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	ddc4      	ble.n	80059f0 <MEMS_demo+0x184>
        if((state & 8) == 0)
 8005a66:	0719      	lsls	r1, r3, #28
 8005a68:	d4c2      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(8);            
 8005a6a:	2008      	movs	r0, #8
 8005a6c:	f7ff fd94 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 8;
 8005a70:	7823      	ldrb	r3, [r4, #0]
 8005a72:	f043 0308 	orr.w	r3, r3, #8
 8005a76:	e7b6      	b.n	80059e6 <MEMS_demo+0x17a>
    else if ((Zval>Xval) && (Zval>Yval))
 8005a78:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	d5b6      	bpl.n	80059f0 <MEMS_demo+0x184>
 8005a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	d5b1      	bpl.n	80059f0 <MEMS_demo+0x184>
      if(Buffer[2] < -10000.0f)
 8005a8c:	eeb4 6ac8 	vcmpe.f32	s12, s16
 8005a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a94:	d508      	bpl.n	8005aa8 <MEMS_demo+0x23c>
        if((state & 16) == 0)
 8005a96:	06da      	lsls	r2, r3, #27
 8005a98:	d4aa      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(16);            
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f7ff fd7c 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 16;
 8005aa0:	7823      	ldrb	r3, [r4, #0]
 8005aa2:	f043 0310 	orr.w	r3, r3, #16
 8005aa6:	e79e      	b.n	80059e6 <MEMS_demo+0x17a>
      else if(Buffer[2] > 10000.0f)
 8005aa8:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8005aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab0:	dd9e      	ble.n	80059f0 <MEMS_demo+0x184>
        if((state & 32) == 0)
 8005ab2:	069b      	lsls	r3, r3, #26
 8005ab4:	d49c      	bmi.n	80059f0 <MEMS_demo+0x184>
          Gyroscope_DrawBackground(32);            
 8005ab6:	2020      	movs	r0, #32
 8005ab8:	f7ff fd6e 	bl	8005598 <Gyroscope_DrawBackground>
          state |= 32;
 8005abc:	7823      	ldrb	r3, [r4, #0]
 8005abe:	f043 0320 	orr.w	r3, r3, #32
 8005ac2:	e790      	b.n	80059e6 <MEMS_demo+0x17a>
 8005ac4:	ff0000ff 	.word	0xff0000ff
 8005ac8:	200000d4 	.word	0x200000d4
 8005acc:	0800db5a 	.word	0x0800db5a
 8005ad0:	200000e4 	.word	0x200000e4
 8005ad4:	0800db5f 	.word	0x0800db5f
 8005ad8:	0800db80 	.word	0x0800db80
 8005adc:	0800db97 	.word	0x0800db97
 8005ae0:	200005a4 	.word	0x200005a4
 8005ae4:	ffff0000 	.word	0xffff0000
 8005ae8:	0800dba5 	.word	0x0800dba5
 8005aec:	0800dbab 	.word	0x0800dbab
 8005af0:	200005a8 	.word	0x200005a8
 8005af4:	c61c4000 	.word	0xc61c4000
 8005af8:	461c4000 	.word	0x461c4000

08005afc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005afc:	4770      	bx	lr

08005afe <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005afe:	e7fe      	b.n	8005afe <HardFault_Handler>

08005b00 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005b00:	e7fe      	b.n	8005b00 <MemManage_Handler>

08005b02 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005b02:	e7fe      	b.n	8005b02 <BusFault_Handler>

08005b04 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005b04:	e7fe      	b.n	8005b04 <UsageFault_Handler>

08005b06 <SVC_Handler>:
 8005b06:	4770      	bx	lr

08005b08 <DebugMon_Handler>:
 8005b08:	4770      	bx	lr

08005b0a <PendSV_Handler>:
 8005b0a:	4770      	bx	lr

08005b0c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005b0c:	b508      	push	{r3, lr}
  HAL_IncTick();
 8005b0e:	f7fc ffa9 	bl	8002a64 <HAL_IncTick>
  Toggle_Leds();
}
 8005b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Toggle_Leds();
 8005b16:	f7ff bd25 	b.w	8005564 <Toggle_Leds>

08005b1a <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f7fd bb36 	b.w	800318c <HAL_GPIO_EXTI_IRQHandler>

08005b20 <Touchscreen_demo>:
  * @brief  Touchscreen Demo
  * @param  None
  * @retval None
  */
void Touchscreen_demo(void)
{ 
 8005b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t status = 0;
  uint16_t x,y;
  uint8_t state = 0;
  
  if(IsCalibrationDone() == 0)
 8005b24:	f000 fba8 	bl	8006278 <IsCalibrationDone>
 8005b28:	b908      	cbnz	r0, 8005b2e <Touchscreen_demo+0xe>
  {
    Touchscreen_Calibration();
 8005b2a:	f000 fa9d 	bl	8006068 <Touchscreen_Calibration>
  * @retval None
  */
static void Touchscreen_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b32:	f7fb fec3 	bl	80018bc <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005b36:	48bf      	ldr	r0, [pc, #764]	; (8005e34 <Touchscreen_demo+0x314>)
 8005b38:	f7fb fe90 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8005b3c:	f7fb fe38 	bl	80017b0 <BSP_LCD_GetXSize>
 8005b40:	2100      	movs	r1, #0
 8005b42:	b282      	uxth	r2, r0
 8005b44:	2350      	movs	r3, #80	; 0x50
 8005b46:	4608      	mov	r0, r1
 8005b48:	f7fb ffd4 	bl	8001af4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	f7fb fe84 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8005b54:	48b7      	ldr	r0, [pc, #732]	; (8005e34 <Touchscreen_demo+0x314>)
 8005b56:	f7fb fe8d 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8005b5a:	48b7      	ldr	r0, [pc, #732]	; (8005e38 <Touchscreen_demo+0x318>)
 8005b5c:	f7fb fe96 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Touchscreen", CENTER_MODE);
 8005b60:	2100      	movs	r1, #0
 8005b62:	4608      	mov	r0, r1
 8005b64:	4ab5      	ldr	r2, [pc, #724]	; (8005e3c <Touchscreen_demo+0x31c>)
 8005b66:	2301      	movs	r3, #1
 8005b68:	f7fc f9ea 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8005b6c:	48b4      	ldr	r0, [pc, #720]	; (8005e40 <Touchscreen_demo+0x320>)
 8005b6e:	f7fb fe8d 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Please use the Touchscreen to", CENTER_MODE);
 8005b72:	4ab4      	ldr	r2, [pc, #720]	; (8005e44 <Touchscreen_demo+0x324>)
 8005b74:	2301      	movs	r3, #1
 8005b76:	211e      	movs	r1, #30
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fc f9e1 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"activate the colored circle", CENTER_MODE);
 8005b7e:	4ab2      	ldr	r2, [pc, #712]	; (8005e48 <Touchscreen_demo+0x328>)
 8005b80:	2301      	movs	r3, #1
 8005b82:	212d      	movs	r1, #45	; 0x2d
 8005b84:	2000      	movs	r0, #0
 8005b86:	f7fc f9db 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"inside the rectangle", CENTER_MODE);
 8005b8a:	4ab0      	ldr	r2, [pc, #704]	; (8005e4c <Touchscreen_demo+0x32c>)
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	213c      	movs	r1, #60	; 0x3c
 8005b90:	2000      	movs	r0, #0
 8005b92:	f7fc f9d5 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8005b96:	48a7      	ldr	r0, [pc, #668]	; (8005e34 <Touchscreen_demo+0x314>)
 8005b98:	f7fb fe60 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8005b9c:	f7fb fe08 	bl	80017b0 <BSP_LCD_GetXSize>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	f7fb fe0d 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ba6:	f1a4 0214 	sub.w	r2, r4, #20
 8005baa:	3864      	subs	r0, #100	; 0x64
 8005bac:	b283      	uxth	r3, r0
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	215a      	movs	r1, #90	; 0x5a
 8005bb2:	200a      	movs	r0, #10
 8005bb4:	f7fb fef6 	bl	80019a4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102); 
 8005bb8:	f7fb fdfa 	bl	80017b0 <BSP_LCD_GetXSize>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	f7fb fdff 	bl	80017c0 <BSP_LCD_GetYSize>
 8005bc2:	f1a4 0216 	sub.w	r2, r4, #22
 8005bc6:	3866      	subs	r0, #102	; 0x66
 8005bc8:	b283      	uxth	r3, r0
 8005bca:	b292      	uxth	r2, r2
 8005bcc:	215b      	movs	r1, #91	; 0x5b
 8005bce:	200b      	movs	r0, #11
 8005bd0:	f7fb fee8 	bl	80019a4 <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8005bd4:	f7fb fdec 	bl	80017b0 <BSP_LCD_GetXSize>
 8005bd8:	4604      	mov	r4, r0
 8005bda:	f7fb fdf1 	bl	80017c0 <BSP_LCD_GetYSize>
 8005bde:	b281      	uxth	r1, r0
 8005be0:	b2a0      	uxth	r0, r4
 8005be2:	f7fc fe67 	bl	80028b4 <BSP_TS_Init>
  if (status != TS_OK)
 8005be6:	4680      	mov	r8, r0
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f000 818d 	beq.w	8005f08 <Touchscreen_demo+0x3e8>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	f7fb fe3f 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005bf6:	4896      	ldr	r0, [pc, #600]	; (8005e50 <Touchscreen_demo+0x330>)
 8005bf8:	f7fb fe30 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8005bfc:	f7fb fde0 	bl	80017c0 <BSP_LCD_GetYSize>
 8005c00:	385f      	subs	r0, #95	; 0x5f
 8005c02:	b281      	uxth	r1, r0
 8005c04:	4a93      	ldr	r2, [pc, #588]	; (8005e54 <Touchscreen_demo+0x334>)
 8005c06:	2301      	movs	r3, #1
 8005c08:	2000      	movs	r0, #0
 8005c0a:	f7fc f999 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8005c0e:	f7fb fdd7 	bl	80017c0 <BSP_LCD_GetYSize>
 8005c12:	3850      	subs	r0, #80	; 0x50
 8005c14:	b281      	uxth	r1, r0
 8005c16:	4a90      	ldr	r2, [pc, #576]	; (8005e58 <Touchscreen_demo+0x338>)
 8005c18:	2301      	movs	r3, #1
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7fc f990 	bl	8001f40 <BSP_LCD_DisplayStringAt>
      BSP_TS_GetState(&TS_State);
 8005c20:	4f8e      	ldr	r7, [pc, #568]	; (8005e5c <Touchscreen_demo+0x33c>)
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
    break;
    
  case 2:
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005c22:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8005e50 <Touchscreen_demo+0x330>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005c26:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8005e34 <Touchscreen_demo+0x314>
{ 
 8005c2a:	2400      	movs	r4, #0
    if (status == TS_OK)
 8005c2c:	f1b8 0f00 	cmp.w	r8, #0
 8005c30:	f040 8166 	bne.w	8005f00 <Touchscreen_demo+0x3e0>
      BSP_TS_GetState(&TS_State);
 8005c34:	4889      	ldr	r0, [pc, #548]	; (8005e5c <Touchscreen_demo+0x33c>)
 8005c36:	f7fc fe59 	bl	80028ec <BSP_TS_GetState>
      if (TS_State.TouchDetected) {
 8005c3a:	883b      	ldrh	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 815f 	beq.w	8005f00 <Touchscreen_demo+0x3e0>
        x = Calibration_GetX(TS_State.X);
 8005c42:	8878      	ldrh	r0, [r7, #2]
 8005c44:	f000 faf8 	bl	8006238 <Calibration_GetX>
 8005c48:	4605      	mov	r5, r0
        y = Calibration_GetY(TS_State.Y);
 8005c4a:	88b8      	ldrh	r0, [r7, #4]
 8005c4c:	f000 fb04 	bl	8006258 <Calibration_GetY>
        if((TS_State.TouchDetected) && 
 8005c50:	883b      	ldrh	r3, [r7, #0]
        y = Calibration_GetY(TS_State.Y);
 8005c52:	4606      	mov	r6, r0
        if((TS_State.TouchDetected) && 
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8153 	beq.w	8005f00 <Touchscreen_demo+0x3e0>
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8005c5a:	f7fb fdb1 	bl	80017c0 <BSP_LCD_GetYSize>
 8005c5e:	3878      	subs	r0, #120	; 0x78
        if((TS_State.TouchDetected) && 
 8005c60:	4286      	cmp	r6, r0
 8005c62:	f240 814d 	bls.w	8005f00 <Touchscreen_demo+0x3e0>
             (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 8005c66:	f7fb fdab 	bl	80017c0 <BSP_LCD_GetYSize>
 8005c6a:	383c      	subs	r0, #60	; 0x3c
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8005c6c:	4286      	cmp	r6, r0
 8005c6e:	f080 8147 	bcs.w	8005f00 <Touchscreen_demo+0x3e0>
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8005c72:	f7fb fd9d 	bl	80017b0 <BSP_LCD_GetXSize>
 8005c76:	f04f 0b05 	mov.w	fp, #5
 8005c7a:	fbb0 f0fb 	udiv	r0, r0, fp
 8005c7e:	381e      	subs	r0, #30
 8005c80:	4285      	cmp	r5, r0
 8005c82:	d93b      	bls.n	8005cfc <Touchscreen_demo+0x1dc>
             (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 8005c84:	f7fb fd94 	bl	80017b0 <BSP_LCD_GetXSize>
 8005c88:	fbb0 f0fb 	udiv	r0, r0, fp
 8005c8c:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8005c8e:	4285      	cmp	r5, r0
 8005c90:	d234      	bcs.n	8005cfc <Touchscreen_demo+0x1dc>
            if((state & 1) == 0)
 8005c92:	07e0      	lsls	r0, r4, #31
 8005c94:	d432      	bmi.n	8005cfc <Touchscreen_demo+0x1dc>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005c96:	4650      	mov	r0, sl
 8005c98:	f7fb fde0 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8005c9c:	f7fb fd88 	bl	80017b0 <BSP_LCD_GetXSize>
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	f7fb fd8d 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ca6:	fbb6 f6fb 	udiv	r6, r6, fp
 8005caa:	385a      	subs	r0, #90	; 0x5a
 8005cac:	b281      	uxth	r1, r0
 8005cae:	221e      	movs	r2, #30
 8005cb0:	b2b0      	uxth	r0, r6
 8005cb2:	f7fc fbc9 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	f7fb fdcf 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8005cbe:	f7fb fd77 	bl	80017b0 <BSP_LCD_GetXSize>
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	f7fb fd7c 	bl	80017c0 <BSP_LCD_GetYSize>
 8005cc8:	fbb6 f6fb 	udiv	r6, r6, fp
 8005ccc:	385a      	subs	r0, #90	; 0x5a
 8005cce:	b281      	uxth	r1, r0
 8005cd0:	221c      	movs	r2, #28
 8005cd2:	b2b0      	uxth	r0, r6
 8005cd4:	f7fc fbb8 	bl	8002448 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005cd8:	4650      	mov	r0, sl
 8005cda:	f7fb fdbf 	bl	800185c <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8005cde:	f7fb fd67 	bl	80017b0 <BSP_LCD_GetXSize>
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	f7fb fd6c 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ce8:	fbb6 f6fb 	udiv	r6, r6, fp
 8005cec:	385a      	subs	r0, #90	; 0x5a
 8005cee:	b281      	uxth	r1, r0
 8005cf0:	221e      	movs	r2, #30
 8005cf2:	b2b0      	uxth	r0, r6
 8005cf4:	f7fc fba8 	bl	8002448 <BSP_LCD_FillCircle>
              state |= 1;
 8005cf8:	f044 0401 	orr.w	r4, r4, #1
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 8005cfc:	f7fb fd58 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d00:	f04f 0b05 	mov.w	fp, #5
 8005d04:	0040      	lsls	r0, r0, #1
 8005d06:	fbb0 f0fb 	udiv	r0, r0, fp
 8005d0a:	381e      	subs	r0, #30
 8005d0c:	4285      	cmp	r5, r0
 8005d0e:	d93f      	bls.n	8005d90 <Touchscreen_demo+0x270>
             (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 8005d10:	f7fb fd4e 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d14:	0040      	lsls	r0, r0, #1
 8005d16:	fbb0 f0fb 	udiv	r0, r0, fp
 8005d1a:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 8005d1c:	4285      	cmp	r5, r0
 8005d1e:	d237      	bcs.n	8005d90 <Touchscreen_demo+0x270>
            if((state & 2) == 0)
 8005d20:	07a1      	lsls	r1, r4, #30
 8005d22:	d435      	bmi.n	8005d90 <Touchscreen_demo+0x270>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005d24:	4648      	mov	r0, r9
 8005d26:	f7fb fd99 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8005d2a:	f7fb fd41 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d2e:	4606      	mov	r6, r0
 8005d30:	f7fb fd46 	bl	80017c0 <BSP_LCD_GetYSize>
 8005d34:	385a      	subs	r0, #90	; 0x5a
 8005d36:	b281      	uxth	r1, r0
 8005d38:	221e      	movs	r2, #30
 8005d3a:	0076      	lsls	r6, r6, #1
 8005d3c:	fbb6 f6fb 	udiv	r6, r6, fp
 8005d40:	b2b0      	uxth	r0, r6
 8005d42:	f7fc fb81 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	f7fb fd87 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2); 
 8005d4e:	f7fb fd2f 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d52:	4606      	mov	r6, r0
 8005d54:	f7fb fd34 	bl	80017c0 <BSP_LCD_GetYSize>
 8005d58:	385a      	subs	r0, #90	; 0x5a
 8005d5a:	b281      	uxth	r1, r0
 8005d5c:	221c      	movs	r2, #28
 8005d5e:	0076      	lsls	r6, r6, #1
 8005d60:	fbb6 f6fb 	udiv	r6, r6, fp
 8005d64:	b2b0      	uxth	r0, r6
 8005d66:	f7fc fb6f 	bl	8002448 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f7fb fd76 	bl	800185c <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8005d70:	f7fb fd1e 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d74:	4606      	mov	r6, r0
 8005d76:	f7fb fd23 	bl	80017c0 <BSP_LCD_GetYSize>
 8005d7a:	385a      	subs	r0, #90	; 0x5a
 8005d7c:	b281      	uxth	r1, r0
 8005d7e:	0076      	lsls	r6, r6, #1
 8005d80:	221e      	movs	r2, #30
 8005d82:	fbb6 f6fb 	udiv	r6, r6, fp
 8005d86:	b2b0      	uxth	r0, r6
 8005d88:	f7fc fb5e 	bl	8002448 <BSP_LCD_FillCircle>
              state |= 2;
 8005d8c:	f044 0402 	orr.w	r4, r4, #2
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8005d90:	f7fb fd0e 	bl	80017b0 <BSP_LCD_GetXSize>
 8005d94:	f04f 0b05 	mov.w	fp, #5
 8005d98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005d9c:	fbb0 f0fb 	udiv	r0, r0, fp
 8005da0:	381e      	subs	r0, #30
 8005da2:	4285      	cmp	r5, r0
 8005da4:	d95c      	bls.n	8005e60 <Touchscreen_demo+0x340>
             (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 8005da6:	f7fb fd03 	bl	80017b0 <BSP_LCD_GetXSize>
 8005daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005dae:	fbb0 f0fb 	udiv	r0, r0, fp
 8005db2:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8005db4:	4285      	cmp	r5, r0
 8005db6:	d253      	bcs.n	8005e60 <Touchscreen_demo+0x340>
            if((state & 4) == 0)
 8005db8:	0762      	lsls	r2, r4, #29
 8005dba:	d451      	bmi.n	8005e60 <Touchscreen_demo+0x340>
    break;
    
  case 4:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8005dbc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8005dc0:	f7fb fd4c 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8005dc4:	f7fb fcf4 	bl	80017b0 <BSP_LCD_GetXSize>
 8005dc8:	4606      	mov	r6, r0
 8005dca:	f7fb fcf9 	bl	80017c0 <BSP_LCD_GetYSize>
 8005dce:	385a      	subs	r0, #90	; 0x5a
 8005dd0:	b281      	uxth	r1, r0
 8005dd2:	221e      	movs	r2, #30
 8005dd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005dd8:	fbb6 f6fb 	udiv	r6, r6, fp
 8005ddc:	b2b0      	uxth	r0, r6
 8005dde:	f7fc fb33 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	f7fb fd39 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 8005dea:	f7fb fce1 	bl	80017b0 <BSP_LCD_GetXSize>
 8005dee:	4606      	mov	r6, r0
 8005df0:	f7fb fce6 	bl	80017c0 <BSP_LCD_GetYSize>
 8005df4:	385a      	subs	r0, #90	; 0x5a
 8005df6:	b281      	uxth	r1, r0
 8005df8:	221c      	movs	r2, #28
 8005dfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005dfe:	fbb6 f6fb 	udiv	r6, r6, fp
 8005e02:	b2b0      	uxth	r0, r6
 8005e04:	f7fc fb20 	bl	8002448 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8005e08:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8005e0c:	f7fb fd26 	bl	800185c <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8005e10:	f7fb fcce 	bl	80017b0 <BSP_LCD_GetXSize>
 8005e14:	4606      	mov	r6, r0
 8005e16:	f7fb fcd3 	bl	80017c0 <BSP_LCD_GetYSize>
 8005e1a:	385a      	subs	r0, #90	; 0x5a
 8005e1c:	b281      	uxth	r1, r0
 8005e1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005e22:	221e      	movs	r2, #30
 8005e24:	fbb6 f6fb 	udiv	r6, r6, fp
 8005e28:	b2b0      	uxth	r0, r6
 8005e2a:	f7fc fb0d 	bl	8002448 <BSP_LCD_FillCircle>
              state |= 4;
 8005e2e:	f044 0404 	orr.w	r4, r4, #4
 8005e32:	e015      	b.n	8005e60 <Touchscreen_demo+0x340>
 8005e34:	ff0000ff 	.word	0xff0000ff
 8005e38:	200000d4 	.word	0x200000d4
 8005e3c:	0800dc48 	.word	0x0800dc48
 8005e40:	200000e4 	.word	0x200000e4
 8005e44:	0800dbc6 	.word	0x0800dbc6
 8005e48:	0800dbe4 	.word	0x0800dbe4
 8005e4c:	0800dc00 	.word	0x0800dc00
 8005e50:	ffff0000 	.word	0xffff0000
 8005e54:	0800dba5 	.word	0x0800dba5
 8005e58:	0800dc15 	.word	0x0800dc15
 8005e5c:	200005c0 	.word	0x200005c0
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8005e60:	f7fb fca6 	bl	80017b0 <BSP_LCD_GetXSize>
 8005e64:	2605      	movs	r6, #5
 8005e66:	0080      	lsls	r0, r0, #2
 8005e68:	fbb0 f0f6 	udiv	r0, r0, r6
 8005e6c:	381e      	subs	r0, #30
 8005e6e:	4285      	cmp	r5, r0
 8005e70:	d941      	bls.n	8005ef6 <Touchscreen_demo+0x3d6>
             (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 8005e72:	f7fb fc9d 	bl	80017b0 <BSP_LCD_GetXSize>
 8005e76:	0080      	lsls	r0, r0, #2
 8005e78:	fbb0 f0f6 	udiv	r0, r0, r6
 8005e7c:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8005e7e:	4285      	cmp	r5, r0
 8005e80:	d239      	bcs.n	8005ef6 <Touchscreen_demo+0x3d6>
            if((state & 8) == 0)
 8005e82:	0723      	lsls	r3, r4, #28
 8005e84:	d437      	bmi.n	8005ef6 <Touchscreen_demo+0x3d6>
    break;
    
  case 8:
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005e86:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005e8a:	f7fb fce7 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8005e8e:	f7fb fc8f 	bl	80017b0 <BSP_LCD_GetXSize>
 8005e92:	4605      	mov	r5, r0
 8005e94:	f7fb fc94 	bl	80017c0 <BSP_LCD_GetYSize>
 8005e98:	385a      	subs	r0, #90	; 0x5a
 8005e9a:	b281      	uxth	r1, r0
 8005e9c:	221e      	movs	r2, #30
 8005e9e:	00ad      	lsls	r5, r5, #2
 8005ea0:	fbb5 f5f6 	udiv	r5, r5, r6
 8005ea4:	b2a8      	uxth	r0, r5
 8005ea6:	f7fc facf 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005eae:	f7fb fcd5 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2); 
 8005eb2:	f7fb fc7d 	bl	80017b0 <BSP_LCD_GetXSize>
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	f7fb fc82 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ebc:	385a      	subs	r0, #90	; 0x5a
 8005ebe:	b281      	uxth	r1, r0
 8005ec0:	221c      	movs	r2, #28
 8005ec2:	00ad      	lsls	r5, r5, #2
 8005ec4:	fbb5 f5f6 	udiv	r5, r5, r6
 8005ec8:	b2a8      	uxth	r0, r5
 8005eca:	f7fc fabd 	bl	8002448 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005ece:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005ed2:	f7fb fcc3 	bl	800185c <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8005ed6:	f7fb fc6b 	bl	80017b0 <BSP_LCD_GetXSize>
 8005eda:	4605      	mov	r5, r0
 8005edc:	f7fb fc70 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ee0:	385a      	subs	r0, #90	; 0x5a
 8005ee2:	b281      	uxth	r1, r0
 8005ee4:	00ad      	lsls	r5, r5, #2
 8005ee6:	221e      	movs	r2, #30
 8005ee8:	fbb5 f5f6 	udiv	r5, r5, r6
 8005eec:	b2a8      	uxth	r0, r5
 8005eee:	f7fc faab 	bl	8002448 <BSP_LCD_FillCircle>
              state |= 8;
 8005ef2:	f044 0408 	orr.w	r4, r4, #8
          if (state != 0x0F)
 8005ef6:	2c0f      	cmp	r4, #15
 8005ef8:	f000 808a 	beq.w	8006010 <Touchscreen_demo+0x4f0>
            TS_State.TouchDetected = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	803b      	strh	r3, [r7, #0]
    HAL_Delay(100);
 8005f00:	2064      	movs	r0, #100	; 0x64
 8005f02:	f7fc fdc1 	bl	8002a88 <HAL_Delay>
    if (status == TS_OK)
 8005f06:	e691      	b.n	8005c2c <Touchscreen_demo+0x10c>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005f08:	4845      	ldr	r0, [pc, #276]	; (8006020 <Touchscreen_demo+0x500>)
 8005f0a:	f7fb fca7 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8005f0e:	f7fb fc4f 	bl	80017b0 <BSP_LCD_GetXSize>
 8005f12:	4605      	mov	r5, r0
 8005f14:	f7fb fc54 	bl	80017c0 <BSP_LCD_GetYSize>
 8005f18:	385a      	subs	r0, #90	; 0x5a
 8005f1a:	2405      	movs	r4, #5
 8005f1c:	b281      	uxth	r1, r0
 8005f1e:	221e      	movs	r2, #30
 8005f20:	fbb5 f5f4 	udiv	r5, r5, r4
 8005f24:	b2a8      	uxth	r0, r5
 8005f26:	f7fc fa8f 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005f2a:	483e      	ldr	r0, [pc, #248]	; (8006024 <Touchscreen_demo+0x504>)
 8005f2c:	f7fb fc96 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8005f30:	f7fb fc3e 	bl	80017b0 <BSP_LCD_GetXSize>
 8005f34:	4605      	mov	r5, r0
 8005f36:	f7fb fc43 	bl	80017c0 <BSP_LCD_GetYSize>
 8005f3a:	385a      	subs	r0, #90	; 0x5a
 8005f3c:	b281      	uxth	r1, r0
 8005f3e:	221e      	movs	r2, #30
 8005f40:	006d      	lsls	r5, r5, #1
 8005f42:	fbb5 f5f4 	udiv	r5, r5, r4
 8005f46:	b2a8      	uxth	r0, r5
 8005f48:	f7fc fa7e 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8005f4c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8005f50:	f7fb fc84 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8005f54:	f7fb fc2c 	bl	80017b0 <BSP_LCD_GetXSize>
 8005f58:	4605      	mov	r5, r0
 8005f5a:	f7fb fc31 	bl	80017c0 <BSP_LCD_GetYSize>
 8005f5e:	385a      	subs	r0, #90	; 0x5a
 8005f60:	b281      	uxth	r1, r0
 8005f62:	221e      	movs	r2, #30
 8005f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f68:	fbb5 f5f4 	udiv	r5, r5, r4
 8005f6c:	b2a8      	uxth	r0, r5
 8005f6e:	f7fc fa6b 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005f72:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005f76:	f7fb fc71 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8005f7a:	f7fb fc19 	bl	80017b0 <BSP_LCD_GetXSize>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	f7fb fc1e 	bl	80017c0 <BSP_LCD_GetYSize>
 8005f84:	385a      	subs	r0, #90	; 0x5a
 8005f86:	b281      	uxth	r1, r0
 8005f88:	221e      	movs	r2, #30
 8005f8a:	00ad      	lsls	r5, r5, #2
 8005f8c:	fbb5 f5f4 	udiv	r5, r5, r4
 8005f90:	b2a8      	uxth	r0, r5
 8005f92:	f7fc fa59 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	f7fb fc5f 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8005f9e:	f7fb fc07 	bl	80017b0 <BSP_LCD_GetXSize>
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	f7fb fc0c 	bl	80017c0 <BSP_LCD_GetYSize>
 8005fa8:	fbb5 f5f4 	udiv	r5, r5, r4
 8005fac:	385a      	subs	r0, #90	; 0x5a
 8005fae:	b281      	uxth	r1, r0
 8005fb0:	221c      	movs	r2, #28
 8005fb2:	b2a8      	uxth	r0, r5
 8005fb4:	f7fc fa48 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8005fb8:	f7fb fbfa 	bl	80017b0 <BSP_LCD_GetXSize>
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	f7fb fbff 	bl	80017c0 <BSP_LCD_GetYSize>
 8005fc2:	385a      	subs	r0, #90	; 0x5a
 8005fc4:	b281      	uxth	r1, r0
 8005fc6:	221c      	movs	r2, #28
 8005fc8:	006d      	lsls	r5, r5, #1
 8005fca:	fbb5 f5f4 	udiv	r5, r5, r4
 8005fce:	b2a8      	uxth	r0, r5
 8005fd0:	f7fc fa3a 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8005fd4:	f7fb fbec 	bl	80017b0 <BSP_LCD_GetXSize>
 8005fd8:	4605      	mov	r5, r0
 8005fda:	f7fb fbf1 	bl	80017c0 <BSP_LCD_GetYSize>
 8005fde:	385a      	subs	r0, #90	; 0x5a
 8005fe0:	b281      	uxth	r1, r0
 8005fe2:	221c      	movs	r2, #28
 8005fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe8:	fbb5 f5f4 	udiv	r5, r5, r4
 8005fec:	b2a8      	uxth	r0, r5
 8005fee:	f7fc fa2b 	bl	8002448 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 8005ff2:	f7fb fbdd 	bl	80017b0 <BSP_LCD_GetXSize>
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	f7fb fbe2 	bl	80017c0 <BSP_LCD_GetYSize>
 8005ffc:	385a      	subs	r0, #90	; 0x5a
 8005ffe:	00ad      	lsls	r5, r5, #2
 8006000:	b281      	uxth	r1, r0
 8006002:	fbb5 f4f4 	udiv	r4, r5, r4
 8006006:	221c      	movs	r2, #28
 8006008:	b2a0      	uxth	r0, r4
 800600a:	f7fc fa1d 	bl	8002448 <BSP_LCD_FillCircle>
    break; 
  }
}
 800600e:	e607      	b.n	8005c20 <Touchscreen_demo+0x100>
            if(CheckForUserInput() > 0)
 8006010:	f7ff fa9a 	bl	8005548 <CheckForUserInput>
 8006014:	2800      	cmp	r0, #0
 8006016:	f43f af73 	beq.w	8005f00 <Touchscreen_demo+0x3e0>
}
 800601a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	bf00      	nop
 8006020:	ff0000ff 	.word	0xff0000ff
 8006024:	ffff0000 	.word	0xffff0000

08006028 <WaitForPressedState>:
  * @brief  Wait For Pressed State.
  * @param  None
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8006028:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  do 
  {
    BSP_TS_GetState(&State);
    HAL_Delay(10);
    if (State.TouchDetected == Pressed) 
 800602a:	4604      	mov	r4, r0
    BSP_TS_GetState(&State);
 800602c:	4668      	mov	r0, sp
 800602e:	f7fc fc5d 	bl	80028ec <BSP_TS_GetState>
    HAL_Delay(10);
 8006032:	200a      	movs	r0, #10
 8006034:	f7fc fd28 	bl	8002a88 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8006038:	f8bd 3000 	ldrh.w	r3, [sp]
 800603c:	42a3      	cmp	r3, r4
 800603e:	d1f5      	bne.n	800602c <WaitForPressedState+0x4>
    {
      uint16_t TimeStart = HAL_GetTick();
 8006040:	f7fc fd1c 	bl	8002a7c <HAL_GetTick>
        BSP_TS_GetState(&State);
        HAL_Delay(10);
        if (State.TouchDetected != Pressed) 
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8006044:	b285      	uxth	r5, r0
        BSP_TS_GetState(&State);
 8006046:	4668      	mov	r0, sp
 8006048:	f7fc fc50 	bl	80028ec <BSP_TS_GetState>
        HAL_Delay(10);
 800604c:	200a      	movs	r0, #10
 800604e:	f7fc fd1b 	bl	8002a88 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8006052:	f8bd 3000 	ldrh.w	r3, [sp]
 8006056:	42a3      	cmp	r3, r4
 8006058:	d1e8      	bne.n	800602c <WaitForPressedState+0x4>
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 800605a:	f7fc fd0f 	bl	8002a7c <HAL_GetTick>
 800605e:	3864      	subs	r0, #100	; 0x64
 8006060:	42a8      	cmp	r0, r5
 8006062:	d9f0      	bls.n	8006046 <WaitForPressedState+0x1e>
          return;
        }
      } while (1);
    }
  } while (1);
}
 8006064:	b003      	add	sp, #12
 8006066:	bd30      	pop	{r4, r5, pc}

08006068 <Touchscreen_Calibration>:
{ 
 8006068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	f7fb fc24 	bl	80018bc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006074:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006078:	f7fb fbf0 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	f7fb fbf8 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 8006084:	4864      	ldr	r0, [pc, #400]	; (8006218 <Touchscreen_Calibration+0x1b0>)
 8006086:	f7fb fc01 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 800608a:	f7fb fb99 	bl	80017c0 <BSP_LCD_GetYSize>
 800608e:	0840      	lsrs	r0, r0, #1
 8006090:	f1a0 011b 	sub.w	r1, r0, #27
 8006094:	4a61      	ldr	r2, [pc, #388]	; (800621c <Touchscreen_Calibration+0x1b4>)
 8006096:	2301      	movs	r3, #1
 8006098:	b289      	uxth	r1, r1
 800609a:	2000      	movs	r0, #0
 800609c:	f7fb ff50 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 80060a0:	f7fb fb8e 	bl	80017c0 <BSP_LCD_GetYSize>
 80060a4:	0840      	lsrs	r0, r0, #1
 80060a6:	f1a0 010c 	sub.w	r1, r0, #12
 80060aa:	4a5d      	ldr	r2, [pc, #372]	; (8006220 <Touchscreen_Calibration+0x1b8>)
 80060ac:	2301      	movs	r3, #1
 80060ae:	b289      	uxth	r1, r1
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7fb ff45 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 80060b6:	f7fb fb83 	bl	80017c0 <BSP_LCD_GetYSize>
 80060ba:	0840      	lsrs	r0, r0, #1
 80060bc:	1cc1      	adds	r1, r0, #3
 80060be:	b289      	uxth	r1, r1
 80060c0:	4a58      	ldr	r2, [pc, #352]	; (8006224 <Touchscreen_Calibration+0x1bc>)
 80060c2:	2301      	movs	r3, #1
 80060c4:	2000      	movs	r0, #0
 80060c6:	f7fb ff3b 	bl	8001f40 <BSP_LCD_DisplayStringAt>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80060ca:	f7fb fb71 	bl	80017b0 <BSP_LCD_GetXSize>
 80060ce:	4604      	mov	r4, r0
 80060d0:	f7fb fb76 	bl	80017c0 <BSP_LCD_GetYSize>
 80060d4:	b281      	uxth	r1, r0
 80060d6:	b2a0      	uxth	r0, r4
 80060d8:	f7fc fbec 	bl	80028b4 <BSP_TS_Init>
  if (status != TS_OK)
 80060dc:	b1e0      	cbz	r0, 8006118 <Touchscreen_Calibration+0xb0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 80060de:	f04f 30ff 	mov.w	r0, #4294967295
 80060e2:	f7fb fbc7 	bl	8001874 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80060e6:	4850      	ldr	r0, [pc, #320]	; (8006228 <Touchscreen_Calibration+0x1c0>)
 80060e8:	f7fb fbb8 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 80060ec:	f7fb fb68 	bl	80017c0 <BSP_LCD_GetYSize>
 80060f0:	385f      	subs	r0, #95	; 0x5f
 80060f2:	b281      	uxth	r1, r0
 80060f4:	4a4d      	ldr	r2, [pc, #308]	; (800622c <Touchscreen_Calibration+0x1c4>)
 80060f6:	2301      	movs	r3, #1
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7fb ff21 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 80060fe:	f7fb fb5f 	bl	80017c0 <BSP_LCD_GetYSize>
 8006102:	3850      	subs	r0, #80	; 0x50
 8006104:	b281      	uxth	r1, r0
 8006106:	4a4a      	ldr	r2, [pc, #296]	; (8006230 <Touchscreen_Calibration+0x1c8>)
 8006108:	2301      	movs	r3, #1
 800610a:	2000      	movs	r0, #0
 800610c:	f7fb ff18 	bl	8001f40 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5);
 8006110:	2005      	movs	r0, #5
 8006112:	f7fc fcb9 	bl	8002a88 <HAL_Delay>
  while (1)
 8006116:	e7fb      	b.n	8006110 <Touchscreen_Calibration+0xa8>
      aLogX[0] = 15;
 8006118:	4d46      	ldr	r5, [pc, #280]	; (8006234 <Touchscreen_Calibration+0x1cc>)
 800611a:	230f      	movs	r3, #15
 800611c:	802b      	strh	r3, [r5, #0]
      aLogY[0] = 15;
 800611e:	80ab      	strh	r3, [r5, #4]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8006120:	f7fb fb46 	bl	80017b0 <BSP_LCD_GetXSize>
 8006124:	380f      	subs	r0, #15
 8006126:	8068      	strh	r0, [r5, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8006128:	f7fb fb4a 	bl	80017c0 <BSP_LCD_GetYSize>
 800612c:	1d2f      	adds	r7, r5, #4
 800612e:	380f      	subs	r0, #15
 8006130:	80e8      	strh	r0, [r5, #6]
      for (i = 0; i < 2; i++) 
 8006132:	f105 0908 	add.w	r9, r5, #8
 8006136:	f105 080c 	add.w	r8, r5, #12
 800613a:	46bb      	mov	fp, r7
 800613c:	462c      	mov	r4, r5
  BSP_TS_GetState(&TS_State);
 800613e:	f105 0a10 	add.w	sl, r5, #16
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8006142:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8006146:	f937 1b02 	ldrsh.w	r1, [r7], #2
 800614a:	9101      	str	r1, [sp, #4]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800614c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006150:	f7fb fb84 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8006154:	9901      	ldr	r1, [sp, #4]
 8006156:	b2b6      	uxth	r6, r6
 8006158:	b289      	uxth	r1, r1
 800615a:	2205      	movs	r2, #5
 800615c:	4630      	mov	r0, r6
 800615e:	9101      	str	r1, [sp, #4]
 8006160:	f7fc f972 	bl	8002448 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	f7fb fb78 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 800616c:	9901      	ldr	r1, [sp, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	4630      	mov	r0, r6
 8006172:	f7fc f969 	bl	8002448 <BSP_LCD_FillCircle>
  WaitForPressedState(1);
 8006176:	2001      	movs	r0, #1
 8006178:	f7ff ff56 	bl	8006028 <WaitForPressedState>
  BSP_TS_GetState(&TS_State);
 800617c:	4650      	mov	r0, sl
 800617e:	f7fc fbb5 	bl	80028ec <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8006182:	8a63      	ldrh	r3, [r4, #18]
 8006184:	f829 3b02 	strh.w	r3, [r9], #2
  *pPhysY = TS_State.Y; 
 8006188:	8aa3      	ldrh	r3, [r4, #20]
 800618a:	f828 3b02 	strh.w	r3, [r8], #2
  WaitForPressedState(0);
 800618e:	2000      	movs	r0, #0
 8006190:	f7ff ff4a 	bl	8006028 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	f7fb fb60 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 800619c:	9901      	ldr	r1, [sp, #4]
 800619e:	2205      	movs	r2, #5
 80061a0:	4630      	mov	r0, r6
 80061a2:	f7fc f951 	bl	8002448 <BSP_LCD_FillCircle>
      for (i = 0; i < 2; i++) 
 80061a6:	455d      	cmp	r5, fp
 80061a8:	d1cb      	bne.n	8006142 <Touchscreen_Calibration+0xda>
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 80061aa:	f9b4 0000 	ldrsh.w	r0, [r4]
 80061ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80061b2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80061b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80061ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80061be:	1a12      	subs	r2, r2, r0
 80061c0:	1a5b      	subs	r3, r3, r1
 80061c2:	436a      	muls	r2, r5
 80061c4:	fb92 f2f3 	sdiv	r2, r2, r3
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80061c8:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80061cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80061d0:	fb11 f102 	smulbb	r1, r1, r2
 80061d4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80061d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80061dc:	8361      	strh	r1, [r4, #26]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80061de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80061e2:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 80061e6:	8322      	strh	r2, [r4, #24]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80061e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ec:	1a5b      	subs	r3, r3, r1
 80061ee:	1a80      	subs	r0, r0, r2
 80061f0:	436b      	muls	r3, r5
 80061f2:	fb93 f3f0 	sdiv	r3, r3, r0
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80061f6:	ebc1 1041 	rsb	r0, r1, r1, lsl #5
 80061fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80061fe:	fb12 f203 	smulbb	r2, r2, r3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8006202:	83a3      	strh	r3, [r4, #28]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8006204:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
      Calibration_Done = 1;
 8006208:	2301      	movs	r3, #1
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 800620a:	83e2      	strh	r2, [r4, #30]
      Calibration_Done = 1;
 800620c:	f884 3020 	strb.w	r3, [r4, #32]
}
 8006210:	b003      	add	sp, #12
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	200000e4 	.word	0x200000e4
 800621c:	0800dc37 	.word	0x0800dc37
 8006220:	0800dc54 	.word	0x0800dc54
 8006224:	0800dc6e 	.word	0x0800dc6e
 8006228:	ffff0000 	.word	0xffff0000
 800622c:	0800dba5 	.word	0x0800dba5
 8006230:	0800dc15 	.word	0x0800dc15
 8006234:	200005c8 	.word	0x200005c8

08006238 <Calibration_GetX>:
  * @param  x : X position
  * @retval Calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
  return (((A1 * x) + B1)/1000);
 8006238:	4a06      	ldr	r2, [pc, #24]	; (8006254 <Calibration_GetX+0x1c>)
 800623a:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
 800623e:	f9b2 1018 	ldrsh.w	r1, [r2, #24]
 8006242:	fb00 3001 	mla	r0, r0, r1, r3
 8006246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800624a:	fb90 f0f3 	sdiv	r0, r0, r3
}
 800624e:	b280      	uxth	r0, r0
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	200005c8 	.word	0x200005c8

08006258 <Calibration_GetY>:
  * @param  y : Y position
  * @retval Calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
  return (((A2 * y) + B2)/1000);
 8006258:	4a06      	ldr	r2, [pc, #24]	; (8006274 <Calibration_GetY+0x1c>)
 800625a:	f9b2 301e 	ldrsh.w	r3, [r2, #30]
 800625e:	f9b2 101c 	ldrsh.w	r1, [r2, #28]
 8006262:	fb00 3001 	mla	r0, r0, r1, r3
 8006266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800626a:	fb90 f0f3 	sdiv	r0, r0, r3
}
 800626e:	b280      	uxth	r0, r0
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	200005c8 	.word	0x200005c8

08006278 <IsCalibrationDone>:
  * @retval Calibration state (1 : calibrated / 0: no)
  */ 
uint8_t IsCalibrationDone(void)
{
  return (Calibration_Done);
}
 8006278:	4b01      	ldr	r3, [pc, #4]	; (8006280 <IsCalibrationDone+0x8>)
 800627a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800627e:	4770      	bx	lr
 8006280:	200005c8 	.word	0x200005c8

08006284 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <LCD_LOG_DeInit+0x20>)
 8006286:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <LCD_LOG_DeInit+0x24>)
 8006288:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800628a:	2101      	movs	r1, #1
  LCD_CacheBuffer_xptr = 0;
 800628c:	2200      	movs	r2, #0
 800628e:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 8006290:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 8006292:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 8006294:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8006296:	819a      	strh	r2, [r3, #12]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8006298:	7399      	strb	r1, [r3, #14]
  LCD_ScrollActive = DISABLE;
 800629a:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 800629c:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 800629e:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 80062a0:	825a      	strh	r2, [r3, #18]
}
 80062a2:	4770      	bx	lr
 80062a4:	200005ec 	.word	0x200005ec
 80062a8:	ff000080 	.word	0xff000080

080062ac <LCD_LOG_Init>:
{
 80062ac:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 80062ae:	f7ff ffe9 	bl	8006284 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80062b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80062ba:	f7fb baff 	b.w	80018bc <BSP_LCD_Clear>
	...

080062c0 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80062c0:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80062c2:	4c16      	ldr	r4, [pc, #88]	; (800631c <LCD_LOG_SetHeader+0x5c>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80062c4:	4e16      	ldr	r6, [pc, #88]	; (8006320 <LCD_LOG_SetHeader+0x60>)
{
 80062c6:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7fb fadf 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7fb fac4 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80062d4:	f7fb fa6c 	bl	80017b0 <BSP_LCD_GetXSize>
 80062d8:	88e3      	ldrh	r3, [r4, #6]
 80062da:	2100      	movs	r1, #0
 80062dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80062e0:	b282      	uxth	r2, r0
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4608      	mov	r0, r1
 80062e6:	f7fb fc05 	bl	8001af4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	f7fb fab5 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7fb fabe 	bl	8001874 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80062f8:	88e1      	ldrh	r1, [r4, #6]
 80062fa:	462a      	mov	r2, r5
 80062fc:	2301      	movs	r3, #1
 80062fe:	2000      	movs	r0, #0
 8006300:	f7fb fe1e 	bl	8001f40 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8006304:	f04f 30ff 	mov.w	r0, #4294967295
 8006308:	f7fb fab4 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <LCD_LOG_SetHeader+0x64>)
 800630e:	f7fb faa5 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
}
 8006312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8006316:	4804      	ldr	r0, [pc, #16]	; (8006328 <LCD_LOG_SetHeader+0x68>)
 8006318:	f7fb bab8 	b.w	800188c <BSP_LCD_SetFont>
 800631c:	200000ec 	.word	0x200000ec
 8006320:	ff0000ff 	.word	0xff0000ff
 8006324:	ff000080 	.word	0xff000080
 8006328:	200000e4 	.word	0x200000e4

0800632c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 800632c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800632e:	4c1d      	ldr	r4, [pc, #116]	; (80063a4 <LCD_LOG_SetFooter+0x78>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8006330:	4e1d      	ldr	r6, [pc, #116]	; (80063a8 <LCD_LOG_SetFooter+0x7c>)
{
 8006332:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8006334:	4620      	mov	r0, r4
 8006336:	f7fb faa9 	bl	800188c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800633a:	4630      	mov	r0, r6
 800633c:	f7fb fa8e 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8006340:	f7fb fa3e 	bl	80017c0 <BSP_LCD_GetYSize>
 8006344:	88e1      	ldrh	r1, [r4, #6]
 8006346:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 800634a:	31fc      	adds	r1, #252	; 0xfc
 800634c:	4401      	add	r1, r0
 800634e:	b289      	uxth	r1, r1
 8006350:	9101      	str	r1, [sp, #4]
 8006352:	f7fb fa2d 	bl	80017b0 <BSP_LCD_GetXSize>
 8006356:	88e3      	ldrh	r3, [r4, #6]
 8006358:	9901      	ldr	r1, [sp, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	b282      	uxth	r2, r0
 800635e:	b29b      	uxth	r3, r3
 8006360:	2000      	movs	r0, #0
 8006362:	f7fb fbc7 	bl	8001af4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	f7fb fa77 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800636e:	4630      	mov	r0, r6
 8006370:	f7fb fa80 	bl	8001874 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8006374:	f7fb fa24 	bl	80017c0 <BSP_LCD_GetYSize>
 8006378:	88e1      	ldrh	r1, [r4, #6]
 800637a:	1a41      	subs	r1, r0, r1
 800637c:	2301      	movs	r3, #1
 800637e:	462a      	mov	r2, r5
 8006380:	b289      	uxth	r1, r1
 8006382:	2000      	movs	r0, #0
 8006384:	f7fb fddc 	bl	8001f40 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	f7fb fa72 	bl	8001874 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8006390:	4806      	ldr	r0, [pc, #24]	; (80063ac <LCD_LOG_SetFooter+0x80>)
 8006392:	f7fb fa63 	bl	800185c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8006396:	4620      	mov	r0, r4
}
 8006398:	b002      	add	sp, #8
 800639a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800639e:	f7fb ba75 	b.w	800188c <BSP_LCD_SetFont>
 80063a2:	bf00      	nop
 80063a4:	200000e4 	.word	0x200000e4
 80063a8:	ff0000ff 	.word	0xff0000ff
 80063ac:	ff000080 	.word	0xff000080

080063b0 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 80063b0:	b510      	push	{r4, lr}
 80063b2:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 80063b4:	4620      	mov	r0, r4
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 80063b6:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 80063b8:	f7fb fbd2 	bl	8001b60 <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 80063bc:	2c15      	cmp	r4, #21
 80063be:	d1f9      	bne.n	80063b4 <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 80063c4:	f7ff bf5e 	b.w	8006284 <LCD_LOG_DeInit>

080063c8 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 80063cc:	4c1b      	ldr	r4, [pc, #108]	; (800643c <LCD_LOG_UpdateDisplay+0x74>)
 80063ce:	4f1c      	ldr	r7, [pc, #112]	; (8006440 <LCD_LOG_UpdateDisplay+0x78>)
 80063d0:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 80063d2:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 80063d4:	2b0f      	cmp	r3, #15
 80063d6:	d811      	bhi.n	80063fc <LCD_LOG_UpdateDisplay+0x34>
 80063d8:	4293      	cmp	r3, r2
 80063da:	d311      	bcc.n	8006400 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 80063dc:	2584      	movs	r5, #132	; 0x84
 80063de:	fb05 7303 	mla	r3, r5, r3, r7
 80063e2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80063e6:	f7fb fa39 	bl	800185c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80063ea:	8921      	ldrh	r1, [r4, #8]
 80063ec:	1d08      	adds	r0, r1, #4
 80063ee:	b280      	uxth	r0, r0
 80063f0:	fb05 7101 	mla	r1, r5, r1, r7
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 80063f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80063f8:	f7fb be00 	b.w	8001ffc <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d201      	bcs.n	8006404 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8006400:	3375      	adds	r3, #117	; 0x75
 8006402:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8006404:	3b10      	subs	r3, #16
 8006406:	b29c      	uxth	r4, r3
 8006408:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800640a:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800640e:	f04f 0984 	mov.w	r9, #132	; 0x84
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8006412:	19a5      	adds	r5, r4, r6
 8006414:	fbb5 f1f8 	udiv	r1, r5, r8
 8006418:	fb08 5511 	mls	r5, r8, r1, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800641c:	fb09 7505 	mla	r5, r9, r5, r7
 8006420:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8006424:	f7fb fa1a 	bl	800185c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8006428:	1d30      	adds	r0, r6, #4
 800642a:	4629      	mov	r1, r5
 800642c:	b280      	uxth	r0, r0
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800642e:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8006430:	f7fb fde4 	bl	8001ffc <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8006434:	2e11      	cmp	r6, #17
 8006436:	d1ec      	bne.n	8006412 <LCD_LOG_UpdateDisplay+0x4a>
}
 8006438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643c:	200005ec 	.word	0x200005ec
 8006440:	20000600 	.word	0x20000600

08006444 <__io_putchar>:
{
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 8006448:	4c37      	ldr	r4, [pc, #220]	; (8006528 <__io_putchar+0xe4>)
{
 800644a:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800644c:	f7fb fa2a 	bl	80018a4 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 8006450:	7c23      	ldrb	r3, [r4, #16]
  sFONT *cFont = BSP_LCD_GetFont();
 8006452:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 8006454:	b9e3      	cbnz	r3, 8006490 <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 8006456:	7be2      	ldrb	r2, [r4, #15]
 8006458:	2a01      	cmp	r2, #1
 800645a:	d106      	bne.n	800646a <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800645c:	89a2      	ldrh	r2, [r4, #12]
 800645e:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8006460:	8962      	ldrh	r2, [r4, #10]
 8006462:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollActive = DISABLE;
 8006464:	73e3      	strb	r3, [r4, #15]
      LCD_Scrolled = DISABLE;
 8006466:	7463      	strb	r3, [r4, #17]
      LCD_ScrollBackStep = 0;
 8006468:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800646a:	88a6      	ldrh	r6, [r4, #4]
 800646c:	f7fb f9a0 	bl	80017b0 <BSP_LCD_GetXSize>
 8006470:	88bb      	ldrh	r3, [r7, #4]
 8006472:	fbb0 f0f3 	udiv	r0, r0, r3
 8006476:	4286      	cmp	r6, r0
 8006478:	4e2c      	ldr	r6, [pc, #176]	; (800652c <__io_putchar+0xe8>)
 800647a:	d20c      	bcs.n	8006496 <__io_putchar+0x52>
 800647c:	2d0a      	cmp	r5, #10
 800647e:	d00a      	beq.n	8006496 <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8006480:	88a2      	ldrh	r2, [r4, #4]
 8006482:	8923      	ldrh	r3, [r4, #8]
 8006484:	1c51      	adds	r1, r2, #1
 8006486:	80a1      	strh	r1, [r4, #4]
 8006488:	2184      	movs	r1, #132	; 0x84
 800648a:	fb01 6603 	mla	r6, r1, r3, r6
 800648e:	54b5      	strb	r5, [r6, r2]
}
 8006490:	4628      	mov	r0, r5
 8006492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8006496:	88e3      	ldrh	r3, [r4, #6]
 8006498:	8922      	ldrh	r2, [r4, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	d808      	bhi.n	80064b0 <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800649e:	7ba2      	ldrb	r2, [r4, #14]
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d133      	bne.n	800650c <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 80064a4:	3301      	adds	r3, #1
 80064a6:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 80064a8:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 80064aa:	bf14      	ite	ne
 80064ac:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 80064ae:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80064b0:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80064b4:	f04f 0984 	mov.w	r9, #132	; 0x84
 80064b8:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80064bc:	f7fb f978 	bl	80017b0 <BSP_LCD_GetXSize>
 80064c0:	88bb      	ldrh	r3, [r7, #4]
 80064c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80064c6:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80064c8:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80064ca:	d822      	bhi.n	8006512 <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80064cc:	2284      	movs	r2, #132	; 0x84
 80064ce:	fb02 6303 	mla	r3, r2, r3, r6
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_CacheBuffer_xptr = 0;
 80064d8:	2700      	movs	r7, #0
 80064da:	80a7      	strh	r7, [r4, #4]
      LCD_LOG_UpdateDisplay (); 
 80064dc:	f7ff ff74 	bl	80063c8 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 80064e0:	8923      	ldrh	r3, [r4, #8]
 80064e2:	3301      	adds	r3, #1
 80064e4:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80064e6:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 80064e8:	bf09      	itett	eq
 80064ea:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 80064ec:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 80064ee:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 80064f0:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80064f2:	bf08      	it	eq
 80064f4:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 80064f6:	2d0a      	cmp	r5, #10
 80064f8:	d0ca      	beq.n	8006490 <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80064fa:	88a3      	ldrh	r3, [r4, #4]
 80064fc:	8922      	ldrh	r2, [r4, #8]
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	80a1      	strh	r1, [r4, #4]
 8006502:	2184      	movs	r1, #132	; 0x84
 8006504:	fb01 6602 	mla	r6, r1, r2, r6
 8006508:	54f5      	strb	r5, [r6, r3]
 800650a:	e7c1      	b.n	8006490 <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800650c:	2300      	movs	r3, #0
 800650e:	73a3      	strb	r3, [r4, #14]
 8006510:	e7ce      	b.n	80064b0 <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8006512:	88a2      	ldrh	r2, [r4, #4]
 8006514:	fb09 6303 	mla	r3, r9, r3, r6
 8006518:	1c51      	adds	r1, r2, #1
 800651a:	f803 a002 	strb.w	sl, [r3, r2]
 800651e:	80a1      	strh	r1, [r4, #4]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8006520:	f108 0801 	add.w	r8, r8, #1
 8006524:	e7ca      	b.n	80064bc <__io_putchar+0x78>
 8006526:	bf00      	nop
 8006528:	200005ec 	.word	0x200005ec
 800652c:	20000600 	.word	0x20000600

08006530 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8006530:	4a0d      	ldr	r2, [pc, #52]	; (8006568 <_sbrk+0x38>)
 8006532:	6811      	ldr	r1, [r2, #0]
{
 8006534:	b508      	push	{r3, lr}
 8006536:	4603      	mov	r3, r0
	if (heap_end == 0)
 8006538:	b909      	cbnz	r1, 800653e <_sbrk+0xe>
		heap_end = &end;
 800653a:	490c      	ldr	r1, [pc, #48]	; (800656c <_sbrk+0x3c>)
 800653c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800653e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 8006542:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8006544:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
 8006548:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800654a:	4403      	add	r3, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 800654c:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 8006550:	428b      	cmp	r3, r1
 8006552:	d906      	bls.n	8006562 <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006554:	f000 f834 	bl	80065c0 <__errno>
 8006558:	230c      	movs	r3, #12
 800655a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006560:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8006562:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8006564:	e7fc      	b.n	8006560 <_sbrk+0x30>
 8006566:	bf00      	nop
 8006568:	20004254 	.word	0x20004254
 800656c:	20004268 	.word	0x20004268

08006570 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	460d      	mov	r5, r1
 8006574:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006576:	460e      	mov	r6, r1
 8006578:	1b73      	subs	r3, r6, r5
 800657a:	429c      	cmp	r4, r3
 800657c:	dc01      	bgt.n	8006582 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 800657e:	4620      	mov	r0, r4
 8006580:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8006582:	f816 0b01 	ldrb.w	r0, [r6], #1
 8006586:	f7ff ff5d 	bl	8006444 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800658a:	e7f5      	b.n	8006578 <_write+0x8>

0800658c <_close>:

int _close(int file)
{
	return -1;
}
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	4770      	bx	lr

08006592 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006596:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr

0800659c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800659c:	2001      	movs	r0, #1
 800659e:	4770      	bx	lr

080065a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80065a0:	2000      	movs	r0, #0
 80065a2:	4770      	bx	lr

080065a4 <_read>:

int _read(int file, char *ptr, int len)
{
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	460d      	mov	r5, r1
 80065a8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065aa:	460e      	mov	r6, r1
 80065ac:	1b73      	subs	r3, r6, r5
 80065ae:	429c      	cmp	r4, r3
 80065b0:	dc01      	bgt.n	80065b6 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80065b2:	4620      	mov	r0, r4
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80065b6:	f3af 8000 	nop.w
 80065ba:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065be:	e7f5      	b.n	80065ac <_read+0x8>

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	200001fc 	.word	0x200001fc

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f001 f98a 	bl	80078f8 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	0800dd2c 	.word	0x0800dd2c
 8006608:	0800dd2c 	.word	0x0800dd2c
 800660c:	0800dd2c 	.word	0x0800dd2c
 8006610:	0800dd30 	.word	0x0800dd30

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <iprintf>:
 8006624:	b40f      	push	{r0, r1, r2, r3}
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <iprintf+0x2c>)
 8006628:	b513      	push	{r0, r1, r4, lr}
 800662a:	681c      	ldr	r4, [r3, #0]
 800662c:	b124      	cbz	r4, 8006638 <iprintf+0x14>
 800662e:	69a3      	ldr	r3, [r4, #24]
 8006630:	b913      	cbnz	r3, 8006638 <iprintf+0x14>
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f886 	bl	8006744 <__sinit>
 8006638:	ab05      	add	r3, sp, #20
 800663a:	9a04      	ldr	r2, [sp, #16]
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fb39 	bl	8006cb8 <_vfiprintf_r>
 8006646:	b002      	add	sp, #8
 8006648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	200001fc 	.word	0x200001fc

08006654 <siprintf>:
 8006654:	b40e      	push	{r1, r2, r3}
 8006656:	b500      	push	{lr}
 8006658:	b09c      	sub	sp, #112	; 0x70
 800665a:	ab1d      	add	r3, sp, #116	; 0x74
 800665c:	9002      	str	r0, [sp, #8]
 800665e:	9006      	str	r0, [sp, #24]
 8006660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <siprintf+0x38>)
 8006666:	9107      	str	r1, [sp, #28]
 8006668:	9104      	str	r1, [sp, #16]
 800666a:	4909      	ldr	r1, [pc, #36]	; (8006690 <siprintf+0x3c>)
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	a902      	add	r1, sp, #8
 8006678:	f000 f9f4 	bl	8006a64 <_svfiprintf_r>
 800667c:	9b02      	ldr	r3, [sp, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	b01c      	add	sp, #112	; 0x70
 8006684:	f85d eb04 	ldr.w	lr, [sp], #4
 8006688:	b003      	add	sp, #12
 800668a:	4770      	bx	lr
 800668c:	200001fc 	.word	0x200001fc
 8006690:	ffff0208 	.word	0xffff0208

08006694 <std>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	e9c0 3300 	strd	r3, r3, [r0]
 800669e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a2:	6083      	str	r3, [r0, #8]
 80066a4:	8181      	strh	r1, [r0, #12]
 80066a6:	6643      	str	r3, [r0, #100]	; 0x64
 80066a8:	81c2      	strh	r2, [r0, #14]
 80066aa:	6183      	str	r3, [r0, #24]
 80066ac:	4619      	mov	r1, r3
 80066ae:	2208      	movs	r2, #8
 80066b0:	305c      	adds	r0, #92	; 0x5c
 80066b2:	f7ff ffaf 	bl	8006614 <memset>
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x38>)
 80066b8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x3c>)
 80066bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <std+0x40>)
 80066c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <std+0x44>)
 80066c4:	6224      	str	r4, [r4, #32]
 80066c6:	6323      	str	r3, [r4, #48]	; 0x30
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	08007261 	.word	0x08007261
 80066d0:	08007283 	.word	0x08007283
 80066d4:	080072bb 	.word	0x080072bb
 80066d8:	080072df 	.word	0x080072df

080066dc <_cleanup_r>:
 80066dc:	4901      	ldr	r1, [pc, #4]	; (80066e4 <_cleanup_r+0x8>)
 80066de:	f000 b8af 	b.w	8006840 <_fwalk_reent>
 80066e2:	bf00      	nop
 80066e4:	080075b9 	.word	0x080075b9

080066e8 <__sfmoreglue>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	2268      	movs	r2, #104	; 0x68
 80066ec:	1e4d      	subs	r5, r1, #1
 80066ee:	4355      	muls	r5, r2
 80066f0:	460e      	mov	r6, r1
 80066f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066f6:	f000 f8e5 	bl	80068c4 <_malloc_r>
 80066fa:	4604      	mov	r4, r0
 80066fc:	b140      	cbz	r0, 8006710 <__sfmoreglue+0x28>
 80066fe:	2100      	movs	r1, #0
 8006700:	e9c0 1600 	strd	r1, r6, [r0]
 8006704:	300c      	adds	r0, #12
 8006706:	60a0      	str	r0, [r4, #8]
 8006708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800670c:	f7ff ff82 	bl	8006614 <memset>
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__sfp_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sfp_lock_acquire+0x8>)
 8006716:	f000 b8b3 	b.w	8006880 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20004259 	.word	0x20004259

08006720 <__sfp_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_release+0x8>)
 8006722:	f000 b8ae 	b.w	8006882 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20004259 	.word	0x20004259

0800672c <__sinit_lock_acquire>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__sinit_lock_acquire+0x8>)
 800672e:	f000 b8a7 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	2000425a 	.word	0x2000425a

08006738 <__sinit_lock_release>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__sinit_lock_release+0x8>)
 800673a:	f000 b8a2 	b.w	8006882 <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	2000425a 	.word	0x2000425a

08006744 <__sinit>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4604      	mov	r4, r0
 8006748:	f7ff fff0 	bl	800672c <__sinit_lock_acquire>
 800674c:	69a3      	ldr	r3, [r4, #24]
 800674e:	b11b      	cbz	r3, 8006758 <__sinit+0x14>
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f7ff bff0 	b.w	8006738 <__sinit_lock_release>
 8006758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800675c:	6523      	str	r3, [r4, #80]	; 0x50
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <__sinit+0x68>)
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <__sinit+0x6c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	62a2      	str	r2, [r4, #40]	; 0x28
 8006766:	42a3      	cmp	r3, r4
 8006768:	bf04      	itt	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	61a3      	streq	r3, [r4, #24]
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f820 	bl	80067b4 <__sfp>
 8006774:	6060      	str	r0, [r4, #4]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f81c 	bl	80067b4 <__sfp>
 800677c:	60a0      	str	r0, [r4, #8]
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f818 	bl	80067b4 <__sfp>
 8006784:	2200      	movs	r2, #0
 8006786:	60e0      	str	r0, [r4, #12]
 8006788:	2104      	movs	r1, #4
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	f7ff ff82 	bl	8006694 <std>
 8006790:	68a0      	ldr	r0, [r4, #8]
 8006792:	2201      	movs	r2, #1
 8006794:	2109      	movs	r1, #9
 8006796:	f7ff ff7d 	bl	8006694 <std>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	2202      	movs	r2, #2
 800679e:	2112      	movs	r1, #18
 80067a0:	f7ff ff78 	bl	8006694 <std>
 80067a4:	2301      	movs	r3, #1
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	e7d2      	b.n	8006750 <__sinit+0xc>
 80067aa:	bf00      	nop
 80067ac:	0800dc8c 	.word	0x0800dc8c
 80067b0:	080066dd 	.word	0x080066dd

080067b4 <__sfp>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	4607      	mov	r7, r0
 80067b8:	f7ff ffac 	bl	8006714 <__sfp_lock_acquire>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <__sfp+0x84>)
 80067be:	681e      	ldr	r6, [r3, #0]
 80067c0:	69b3      	ldr	r3, [r6, #24]
 80067c2:	b913      	cbnz	r3, 80067ca <__sfp+0x16>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff ffbd 	bl	8006744 <__sinit>
 80067ca:	3648      	adds	r6, #72	; 0x48
 80067cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	d503      	bpl.n	80067dc <__sfp+0x28>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	b30b      	cbz	r3, 800681c <__sfp+0x68>
 80067d8:	6836      	ldr	r6, [r6, #0]
 80067da:	e7f7      	b.n	80067cc <__sfp+0x18>
 80067dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067e0:	b9d5      	cbnz	r5, 8006818 <__sfp+0x64>
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <__sfp+0x88>)
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067ea:	6665      	str	r5, [r4, #100]	; 0x64
 80067ec:	f000 f847 	bl	800687e <__retarget_lock_init_recursive>
 80067f0:	f7ff ff96 	bl	8006720 <__sfp_lock_release>
 80067f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	61a5      	str	r5, [r4, #24]
 8006800:	2208      	movs	r2, #8
 8006802:	4629      	mov	r1, r5
 8006804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006808:	f7ff ff04 	bl	8006614 <memset>
 800680c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006814:	4620      	mov	r0, r4
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	3468      	adds	r4, #104	; 0x68
 800681a:	e7d9      	b.n	80067d0 <__sfp+0x1c>
 800681c:	2104      	movs	r1, #4
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ff62 	bl	80066e8 <__sfmoreglue>
 8006824:	4604      	mov	r4, r0
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	2800      	cmp	r0, #0
 800682a:	d1d5      	bne.n	80067d8 <__sfp+0x24>
 800682c:	f7ff ff78 	bl	8006720 <__sfp_lock_release>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	e7ee      	b.n	8006814 <__sfp+0x60>
 8006836:	bf00      	nop
 8006838:	0800dc8c 	.word	0x0800dc8c
 800683c:	ffff0001 	.word	0xffff0001

08006840 <_fwalk_reent>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4606      	mov	r6, r0
 8006846:	4688      	mov	r8, r1
 8006848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800684c:	2700      	movs	r7, #0
 800684e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006852:	f1b9 0901 	subs.w	r9, r9, #1
 8006856:	d505      	bpl.n	8006864 <_fwalk_reent+0x24>
 8006858:	6824      	ldr	r4, [r4, #0]
 800685a:	2c00      	cmp	r4, #0
 800685c:	d1f7      	bne.n	800684e <_fwalk_reent+0xe>
 800685e:	4638      	mov	r0, r7
 8006860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d907      	bls.n	800687a <_fwalk_reent+0x3a>
 800686a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686e:	3301      	adds	r3, #1
 8006870:	d003      	beq.n	800687a <_fwalk_reent+0x3a>
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	47c0      	blx	r8
 8006878:	4307      	orrs	r7, r0
 800687a:	3568      	adds	r5, #104	; 0x68
 800687c:	e7e9      	b.n	8006852 <_fwalk_reent+0x12>

0800687e <__retarget_lock_init_recursive>:
 800687e:	4770      	bx	lr

08006880 <__retarget_lock_acquire_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_release_recursive>:
 8006882:	4770      	bx	lr

08006884 <sbrk_aligned>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0e      	ldr	r6, [pc, #56]	; (80068c0 <sbrk_aligned+0x3c>)
 8006888:	460c      	mov	r4, r1
 800688a:	6831      	ldr	r1, [r6, #0]
 800688c:	4605      	mov	r5, r0
 800688e:	b911      	cbnz	r1, 8006896 <sbrk_aligned+0x12>
 8006890:	f000 fcd6 	bl	8007240 <_sbrk_r>
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f000 fcd1 	bl	8007240 <_sbrk_r>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d00a      	beq.n	80068b8 <sbrk_aligned+0x34>
 80068a2:	1cc4      	adds	r4, r0, #3
 80068a4:	f024 0403 	bic.w	r4, r4, #3
 80068a8:	42a0      	cmp	r0, r4
 80068aa:	d007      	beq.n	80068bc <sbrk_aligned+0x38>
 80068ac:	1a21      	subs	r1, r4, r0
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fcc6 	bl	8007240 <_sbrk_r>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d101      	bne.n	80068bc <sbrk_aligned+0x38>
 80068b8:	f04f 34ff 	mov.w	r4, #4294967295
 80068bc:	4620      	mov	r0, r4
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	20004260 	.word	0x20004260

080068c4 <_malloc_r>:
 80068c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c8:	1ccd      	adds	r5, r1, #3
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	4607      	mov	r7, r0
 80068da:	db01      	blt.n	80068e0 <_malloc_r+0x1c>
 80068dc:	42a9      	cmp	r1, r5
 80068de:	d905      	bls.n	80068ec <_malloc_r+0x28>
 80068e0:	230c      	movs	r3, #12
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	2600      	movs	r6, #0
 80068e6:	4630      	mov	r0, r6
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	4e2e      	ldr	r6, [pc, #184]	; (80069a8 <_malloc_r+0xe4>)
 80068ee:	f000 ff3f 	bl	8007770 <__malloc_lock>
 80068f2:	6833      	ldr	r3, [r6, #0]
 80068f4:	461c      	mov	r4, r3
 80068f6:	bb34      	cbnz	r4, 8006946 <_malloc_r+0x82>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4638      	mov	r0, r7
 80068fc:	f7ff ffc2 	bl	8006884 <sbrk_aligned>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	4604      	mov	r4, r0
 8006904:	d14d      	bne.n	80069a2 <_malloc_r+0xde>
 8006906:	6834      	ldr	r4, [r6, #0]
 8006908:	4626      	mov	r6, r4
 800690a:	2e00      	cmp	r6, #0
 800690c:	d140      	bne.n	8006990 <_malloc_r+0xcc>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	4631      	mov	r1, r6
 8006912:	4638      	mov	r0, r7
 8006914:	eb04 0803 	add.w	r8, r4, r3
 8006918:	f000 fc92 	bl	8007240 <_sbrk_r>
 800691c:	4580      	cmp	r8, r0
 800691e:	d13a      	bne.n	8006996 <_malloc_r+0xd2>
 8006920:	6821      	ldr	r1, [r4, #0]
 8006922:	3503      	adds	r5, #3
 8006924:	1a6d      	subs	r5, r5, r1
 8006926:	f025 0503 	bic.w	r5, r5, #3
 800692a:	3508      	adds	r5, #8
 800692c:	2d0c      	cmp	r5, #12
 800692e:	bf38      	it	cc
 8006930:	250c      	movcc	r5, #12
 8006932:	4629      	mov	r1, r5
 8006934:	4638      	mov	r0, r7
 8006936:	f7ff ffa5 	bl	8006884 <sbrk_aligned>
 800693a:	3001      	adds	r0, #1
 800693c:	d02b      	beq.n	8006996 <_malloc_r+0xd2>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	442b      	add	r3, r5
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	e00e      	b.n	8006964 <_malloc_r+0xa0>
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	1b52      	subs	r2, r2, r5
 800694a:	d41e      	bmi.n	800698a <_malloc_r+0xc6>
 800694c:	2a0b      	cmp	r2, #11
 800694e:	d916      	bls.n	800697e <_malloc_r+0xba>
 8006950:	1961      	adds	r1, r4, r5
 8006952:	42a3      	cmp	r3, r4
 8006954:	6025      	str	r5, [r4, #0]
 8006956:	bf18      	it	ne
 8006958:	6059      	strne	r1, [r3, #4]
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	bf08      	it	eq
 800695e:	6031      	streq	r1, [r6, #0]
 8006960:	5162      	str	r2, [r4, r5]
 8006962:	604b      	str	r3, [r1, #4]
 8006964:	4638      	mov	r0, r7
 8006966:	f104 060b 	add.w	r6, r4, #11
 800696a:	f000 ff07 	bl	800777c <__malloc_unlock>
 800696e:	f026 0607 	bic.w	r6, r6, #7
 8006972:	1d23      	adds	r3, r4, #4
 8006974:	1af2      	subs	r2, r6, r3
 8006976:	d0b6      	beq.n	80068e6 <_malloc_r+0x22>
 8006978:	1b9b      	subs	r3, r3, r6
 800697a:	50a3      	str	r3, [r4, r2]
 800697c:	e7b3      	b.n	80068e6 <_malloc_r+0x22>
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	bf0c      	ite	eq
 8006984:	6032      	streq	r2, [r6, #0]
 8006986:	605a      	strne	r2, [r3, #4]
 8006988:	e7ec      	b.n	8006964 <_malloc_r+0xa0>
 800698a:	4623      	mov	r3, r4
 800698c:	6864      	ldr	r4, [r4, #4]
 800698e:	e7b2      	b.n	80068f6 <_malloc_r+0x32>
 8006990:	4634      	mov	r4, r6
 8006992:	6876      	ldr	r6, [r6, #4]
 8006994:	e7b9      	b.n	800690a <_malloc_r+0x46>
 8006996:	230c      	movs	r3, #12
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	4638      	mov	r0, r7
 800699c:	f000 feee 	bl	800777c <__malloc_unlock>
 80069a0:	e7a1      	b.n	80068e6 <_malloc_r+0x22>
 80069a2:	6025      	str	r5, [r4, #0]
 80069a4:	e7de      	b.n	8006964 <_malloc_r+0xa0>
 80069a6:	bf00      	nop
 80069a8:	2000425c 	.word	0x2000425c

080069ac <__ssputs_r>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	688e      	ldr	r6, [r1, #8]
 80069b2:	429e      	cmp	r6, r3
 80069b4:	4682      	mov	sl, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	4690      	mov	r8, r2
 80069ba:	461f      	mov	r7, r3
 80069bc:	d838      	bhi.n	8006a30 <__ssputs_r+0x84>
 80069be:	898a      	ldrh	r2, [r1, #12]
 80069c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069c4:	d032      	beq.n	8006a2c <__ssputs_r+0x80>
 80069c6:	6825      	ldr	r5, [r4, #0]
 80069c8:	6909      	ldr	r1, [r1, #16]
 80069ca:	eba5 0901 	sub.w	r9, r5, r1
 80069ce:	6965      	ldr	r5, [r4, #20]
 80069d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069d8:	3301      	adds	r3, #1
 80069da:	444b      	add	r3, r9
 80069dc:	106d      	asrs	r5, r5, #1
 80069de:	429d      	cmp	r5, r3
 80069e0:	bf38      	it	cc
 80069e2:	461d      	movcc	r5, r3
 80069e4:	0553      	lsls	r3, r2, #21
 80069e6:	d531      	bpl.n	8006a4c <__ssputs_r+0xa0>
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7ff ff6b 	bl	80068c4 <_malloc_r>
 80069ee:	4606      	mov	r6, r0
 80069f0:	b950      	cbnz	r0, 8006a08 <__ssputs_r+0x5c>
 80069f2:	230c      	movs	r3, #12
 80069f4:	f8ca 3000 	str.w	r3, [sl]
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	6921      	ldr	r1, [r4, #16]
 8006a0a:	464a      	mov	r2, r9
 8006a0c:	f000 fe88 	bl	8007720 <memcpy>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	6126      	str	r6, [r4, #16]
 8006a1e:	6165      	str	r5, [r4, #20]
 8006a20:	444e      	add	r6, r9
 8006a22:	eba5 0509 	sub.w	r5, r5, r9
 8006a26:	6026      	str	r6, [r4, #0]
 8006a28:	60a5      	str	r5, [r4, #8]
 8006a2a:	463e      	mov	r6, r7
 8006a2c:	42be      	cmp	r6, r7
 8006a2e:	d900      	bls.n	8006a32 <__ssputs_r+0x86>
 8006a30:	463e      	mov	r6, r7
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	4632      	mov	r2, r6
 8006a36:	4641      	mov	r1, r8
 8006a38:	f000 fe80 	bl	800773c <memmove>
 8006a3c:	68a3      	ldr	r3, [r4, #8]
 8006a3e:	1b9b      	subs	r3, r3, r6
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	4433      	add	r3, r6
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7db      	b.n	8006a04 <__ssputs_r+0x58>
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	f000 fee7 	bl	8007820 <_realloc_r>
 8006a52:	4606      	mov	r6, r0
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d1e1      	bne.n	8006a1c <__ssputs_r+0x70>
 8006a58:	6921      	ldr	r1, [r4, #16]
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	f000 fe94 	bl	8007788 <_free_r>
 8006a60:	e7c7      	b.n	80069f2 <__ssputs_r+0x46>
	...

08006a64 <_svfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	4698      	mov	r8, r3
 8006a6a:	898b      	ldrh	r3, [r1, #12]
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	b09d      	sub	sp, #116	; 0x74
 8006a70:	4607      	mov	r7, r0
 8006a72:	460d      	mov	r5, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	d50e      	bpl.n	8006a96 <_svfiprintf_r+0x32>
 8006a78:	690b      	ldr	r3, [r1, #16]
 8006a7a:	b963      	cbnz	r3, 8006a96 <_svfiprintf_r+0x32>
 8006a7c:	2140      	movs	r1, #64	; 0x40
 8006a7e:	f7ff ff21 	bl	80068c4 <_malloc_r>
 8006a82:	6028      	str	r0, [r5, #0]
 8006a84:	6128      	str	r0, [r5, #16]
 8006a86:	b920      	cbnz	r0, 8006a92 <_svfiprintf_r+0x2e>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	e0d1      	b.n	8006c36 <_svfiprintf_r+0x1d2>
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	616b      	str	r3, [r5, #20]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aa4:	2330      	movs	r3, #48	; 0x30
 8006aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c50 <_svfiprintf_r+0x1ec>
 8006aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aae:	f04f 0901 	mov.w	r9, #1
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	469a      	mov	sl, r3
 8006ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aba:	b10a      	cbz	r2, 8006ac0 <_svfiprintf_r+0x5c>
 8006abc:	2a25      	cmp	r2, #37	; 0x25
 8006abe:	d1f9      	bne.n	8006ab4 <_svfiprintf_r+0x50>
 8006ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ac4:	d00b      	beq.n	8006ade <_svfiprintf_r+0x7a>
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4629      	mov	r1, r5
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff ff6d 	bl	80069ac <__ssputs_r>
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f000 80aa 	beq.w	8006c2c <_svfiprintf_r+0x1c8>
 8006ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ada:	445a      	add	r2, fp
 8006adc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ade:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80a2 	beq.w	8006c2c <_svfiprintf_r+0x1c8>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006af2:	f10a 0a01 	add.w	sl, sl, #1
 8006af6:	9304      	str	r3, [sp, #16]
 8006af8:	9307      	str	r3, [sp, #28]
 8006afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006afe:	931a      	str	r3, [sp, #104]	; 0x68
 8006b00:	4654      	mov	r4, sl
 8006b02:	2205      	movs	r2, #5
 8006b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b08:	4851      	ldr	r0, [pc, #324]	; (8006c50 <_svfiprintf_r+0x1ec>)
 8006b0a:	f7f9 fb71 	bl	80001f0 <memchr>
 8006b0e:	9a04      	ldr	r2, [sp, #16]
 8006b10:	b9d8      	cbnz	r0, 8006b4a <_svfiprintf_r+0xe6>
 8006b12:	06d0      	lsls	r0, r2, #27
 8006b14:	bf44      	itt	mi
 8006b16:	2320      	movmi	r3, #32
 8006b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b1c:	0711      	lsls	r1, r2, #28
 8006b1e:	bf44      	itt	mi
 8006b20:	232b      	movmi	r3, #43	; 0x2b
 8006b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b26:	f89a 3000 	ldrb.w	r3, [sl]
 8006b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2c:	d015      	beq.n	8006b5a <_svfiprintf_r+0xf6>
 8006b2e:	9a07      	ldr	r2, [sp, #28]
 8006b30:	4654      	mov	r4, sl
 8006b32:	2000      	movs	r0, #0
 8006b34:	f04f 0c0a 	mov.w	ip, #10
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b3e:	3b30      	subs	r3, #48	; 0x30
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d94e      	bls.n	8006be2 <_svfiprintf_r+0x17e>
 8006b44:	b1b0      	cbz	r0, 8006b74 <_svfiprintf_r+0x110>
 8006b46:	9207      	str	r2, [sp, #28]
 8006b48:	e014      	b.n	8006b74 <_svfiprintf_r+0x110>
 8006b4a:	eba0 0308 	sub.w	r3, r0, r8
 8006b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	9304      	str	r3, [sp, #16]
 8006b56:	46a2      	mov	sl, r4
 8006b58:	e7d2      	b.n	8006b00 <_svfiprintf_r+0x9c>
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	1d19      	adds	r1, r3, #4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	9103      	str	r1, [sp, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfbb      	ittet	lt
 8006b66:	425b      	neglt	r3, r3
 8006b68:	f042 0202 	orrlt.w	r2, r2, #2
 8006b6c:	9307      	strge	r3, [sp, #28]
 8006b6e:	9307      	strlt	r3, [sp, #28]
 8006b70:	bfb8      	it	lt
 8006b72:	9204      	strlt	r2, [sp, #16]
 8006b74:	7823      	ldrb	r3, [r4, #0]
 8006b76:	2b2e      	cmp	r3, #46	; 0x2e
 8006b78:	d10c      	bne.n	8006b94 <_svfiprintf_r+0x130>
 8006b7a:	7863      	ldrb	r3, [r4, #1]
 8006b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7e:	d135      	bne.n	8006bec <_svfiprintf_r+0x188>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	9203      	str	r2, [sp, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bfb8      	it	lt
 8006b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b90:	3402      	adds	r4, #2
 8006b92:	9305      	str	r3, [sp, #20]
 8006b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c60 <_svfiprintf_r+0x1fc>
 8006b98:	7821      	ldrb	r1, [r4, #0]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	f7f9 fb27 	bl	80001f0 <memchr>
 8006ba2:	b140      	cbz	r0, 8006bb6 <_svfiprintf_r+0x152>
 8006ba4:	2340      	movs	r3, #64	; 0x40
 8006ba6:	eba0 000a 	sub.w	r0, r0, sl
 8006baa:	fa03 f000 	lsl.w	r0, r3, r0
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	4303      	orrs	r3, r0
 8006bb2:	3401      	adds	r4, #1
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bba:	4826      	ldr	r0, [pc, #152]	; (8006c54 <_svfiprintf_r+0x1f0>)
 8006bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bc0:	2206      	movs	r2, #6
 8006bc2:	f7f9 fb15 	bl	80001f0 <memchr>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d038      	beq.n	8006c3c <_svfiprintf_r+0x1d8>
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <_svfiprintf_r+0x1f4>)
 8006bcc:	bb1b      	cbnz	r3, 8006c16 <_svfiprintf_r+0x1b2>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	3307      	adds	r3, #7
 8006bd2:	f023 0307 	bic.w	r3, r3, #7
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bdc:	4433      	add	r3, r6
 8006bde:	9309      	str	r3, [sp, #36]	; 0x24
 8006be0:	e767      	b.n	8006ab2 <_svfiprintf_r+0x4e>
 8006be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006be6:	460c      	mov	r4, r1
 8006be8:	2001      	movs	r0, #1
 8006bea:	e7a5      	b.n	8006b38 <_svfiprintf_r+0xd4>
 8006bec:	2300      	movs	r3, #0
 8006bee:	3401      	adds	r4, #1
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 0c0a 	mov.w	ip, #10
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bfe:	3a30      	subs	r2, #48	; 0x30
 8006c00:	2a09      	cmp	r2, #9
 8006c02:	d903      	bls.n	8006c0c <_svfiprintf_r+0x1a8>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0c5      	beq.n	8006b94 <_svfiprintf_r+0x130>
 8006c08:	9105      	str	r1, [sp, #20]
 8006c0a:	e7c3      	b.n	8006b94 <_svfiprintf_r+0x130>
 8006c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c10:	4604      	mov	r4, r0
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7f0      	b.n	8006bf8 <_svfiprintf_r+0x194>
 8006c16:	ab03      	add	r3, sp, #12
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	462a      	mov	r2, r5
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <_svfiprintf_r+0x1f8>)
 8006c1e:	a904      	add	r1, sp, #16
 8006c20:	4638      	mov	r0, r7
 8006c22:	f3af 8000 	nop.w
 8006c26:	1c42      	adds	r2, r0, #1
 8006c28:	4606      	mov	r6, r0
 8006c2a:	d1d6      	bne.n	8006bda <_svfiprintf_r+0x176>
 8006c2c:	89ab      	ldrh	r3, [r5, #12]
 8006c2e:	065b      	lsls	r3, r3, #25
 8006c30:	f53f af2c 	bmi.w	8006a8c <_svfiprintf_r+0x28>
 8006c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c36:	b01d      	add	sp, #116	; 0x74
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	ab03      	add	r3, sp, #12
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	462a      	mov	r2, r5
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <_svfiprintf_r+0x1f8>)
 8006c44:	a904      	add	r1, sp, #16
 8006c46:	4638      	mov	r0, r7
 8006c48:	f000 f9d4 	bl	8006ff4 <_printf_i>
 8006c4c:	e7eb      	b.n	8006c26 <_svfiprintf_r+0x1c2>
 8006c4e:	bf00      	nop
 8006c50:	0800dcf0 	.word	0x0800dcf0
 8006c54:	0800dcfa 	.word	0x0800dcfa
 8006c58:	00000000 	.word	0x00000000
 8006c5c:	080069ad 	.word	0x080069ad
 8006c60:	0800dcf6 	.word	0x0800dcf6

08006c64 <__sfputc_r>:
 8006c64:	6893      	ldr	r3, [r2, #8]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	b410      	push	{r4}
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	da08      	bge.n	8006c82 <__sfputc_r+0x1e>
 8006c70:	6994      	ldr	r4, [r2, #24]
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	db01      	blt.n	8006c7a <__sfputc_r+0x16>
 8006c76:	290a      	cmp	r1, #10
 8006c78:	d103      	bne.n	8006c82 <__sfputc_r+0x1e>
 8006c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c7e:	f000 bb33 	b.w	80072e8 <__swbuf_r>
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	1c58      	adds	r0, r3, #1
 8006c86:	6010      	str	r0, [r2, #0]
 8006c88:	7019      	strb	r1, [r3, #0]
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <__sfputs_r>:
 8006c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c94:	4606      	mov	r6, r0
 8006c96:	460f      	mov	r7, r1
 8006c98:	4614      	mov	r4, r2
 8006c9a:	18d5      	adds	r5, r2, r3
 8006c9c:	42ac      	cmp	r4, r5
 8006c9e:	d101      	bne.n	8006ca4 <__sfputs_r+0x12>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e007      	b.n	8006cb4 <__sfputs_r+0x22>
 8006ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca8:	463a      	mov	r2, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7ff ffda 	bl	8006c64 <__sfputc_r>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d1f3      	bne.n	8006c9c <__sfputs_r+0xa>
 8006cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cb8 <_vfiprintf_r>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	b09d      	sub	sp, #116	; 0x74
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4698      	mov	r8, r3
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	b118      	cbz	r0, 8006cd0 <_vfiprintf_r+0x18>
 8006cc8:	6983      	ldr	r3, [r0, #24]
 8006cca:	b90b      	cbnz	r3, 8006cd0 <_vfiprintf_r+0x18>
 8006ccc:	f7ff fd3a 	bl	8006744 <__sinit>
 8006cd0:	4b89      	ldr	r3, [pc, #548]	; (8006ef8 <_vfiprintf_r+0x240>)
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	d11b      	bne.n	8006d0e <_vfiprintf_r+0x56>
 8006cd6:	6875      	ldr	r5, [r6, #4]
 8006cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cda:	07d9      	lsls	r1, r3, #31
 8006cdc:	d405      	bmi.n	8006cea <_vfiprintf_r+0x32>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	059a      	lsls	r2, r3, #22
 8006ce2:	d402      	bmi.n	8006cea <_vfiprintf_r+0x32>
 8006ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce6:	f7ff fdcb 	bl	8006880 <__retarget_lock_acquire_recursive>
 8006cea:	89ab      	ldrh	r3, [r5, #12]
 8006cec:	071b      	lsls	r3, r3, #28
 8006cee:	d501      	bpl.n	8006cf4 <_vfiprintf_r+0x3c>
 8006cf0:	692b      	ldr	r3, [r5, #16]
 8006cf2:	b9eb      	cbnz	r3, 8006d30 <_vfiprintf_r+0x78>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f000 fb5a 	bl	80073b0 <__swsetup_r>
 8006cfc:	b1c0      	cbz	r0, 8006d30 <_vfiprintf_r+0x78>
 8006cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d00:	07dc      	lsls	r4, r3, #31
 8006d02:	d50e      	bpl.n	8006d22 <_vfiprintf_r+0x6a>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	b01d      	add	sp, #116	; 0x74
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	4b7b      	ldr	r3, [pc, #492]	; (8006efc <_vfiprintf_r+0x244>)
 8006d10:	429d      	cmp	r5, r3
 8006d12:	d101      	bne.n	8006d18 <_vfiprintf_r+0x60>
 8006d14:	68b5      	ldr	r5, [r6, #8]
 8006d16:	e7df      	b.n	8006cd8 <_vfiprintf_r+0x20>
 8006d18:	4b79      	ldr	r3, [pc, #484]	; (8006f00 <_vfiprintf_r+0x248>)
 8006d1a:	429d      	cmp	r5, r3
 8006d1c:	bf08      	it	eq
 8006d1e:	68f5      	ldreq	r5, [r6, #12]
 8006d20:	e7da      	b.n	8006cd8 <_vfiprintf_r+0x20>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	0598      	lsls	r0, r3, #22
 8006d26:	d4ed      	bmi.n	8006d04 <_vfiprintf_r+0x4c>
 8006d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d2a:	f7ff fdaa 	bl	8006882 <__retarget_lock_release_recursive>
 8006d2e:	e7e9      	b.n	8006d04 <_vfiprintf_r+0x4c>
 8006d30:	2300      	movs	r3, #0
 8006d32:	9309      	str	r3, [sp, #36]	; 0x24
 8006d34:	2320      	movs	r3, #32
 8006d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d3e:	2330      	movs	r3, #48	; 0x30
 8006d40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f04 <_vfiprintf_r+0x24c>
 8006d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d48:	f04f 0901 	mov.w	r9, #1
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	469a      	mov	sl, r3
 8006d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d54:	b10a      	cbz	r2, 8006d5a <_vfiprintf_r+0xa2>
 8006d56:	2a25      	cmp	r2, #37	; 0x25
 8006d58:	d1f9      	bne.n	8006d4e <_vfiprintf_r+0x96>
 8006d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5e:	d00b      	beq.n	8006d78 <_vfiprintf_r+0xc0>
 8006d60:	465b      	mov	r3, fp
 8006d62:	4622      	mov	r2, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ff93 	bl	8006c92 <__sfputs_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f000 80aa 	beq.w	8006ec6 <_vfiprintf_r+0x20e>
 8006d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d74:	445a      	add	r2, fp
 8006d76:	9209      	str	r2, [sp, #36]	; 0x24
 8006d78:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80a2 	beq.w	8006ec6 <_vfiprintf_r+0x20e>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8c:	f10a 0a01 	add.w	sl, sl, #1
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	9307      	str	r3, [sp, #28]
 8006d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d98:	931a      	str	r3, [sp, #104]	; 0x68
 8006d9a:	4654      	mov	r4, sl
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	4858      	ldr	r0, [pc, #352]	; (8006f04 <_vfiprintf_r+0x24c>)
 8006da4:	f7f9 fa24 	bl	80001f0 <memchr>
 8006da8:	9a04      	ldr	r2, [sp, #16]
 8006daa:	b9d8      	cbnz	r0, 8006de4 <_vfiprintf_r+0x12c>
 8006dac:	06d1      	lsls	r1, r2, #27
 8006dae:	bf44      	itt	mi
 8006db0:	2320      	movmi	r3, #32
 8006db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db6:	0713      	lsls	r3, r2, #28
 8006db8:	bf44      	itt	mi
 8006dba:	232b      	movmi	r3, #43	; 0x2b
 8006dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc6:	d015      	beq.n	8006df4 <_vfiprintf_r+0x13c>
 8006dc8:	9a07      	ldr	r2, [sp, #28]
 8006dca:	4654      	mov	r4, sl
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f04f 0c0a 	mov.w	ip, #10
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd8:	3b30      	subs	r3, #48	; 0x30
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d94e      	bls.n	8006e7c <_vfiprintf_r+0x1c4>
 8006dde:	b1b0      	cbz	r0, 8006e0e <_vfiprintf_r+0x156>
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	e014      	b.n	8006e0e <_vfiprintf_r+0x156>
 8006de4:	eba0 0308 	sub.w	r3, r0, r8
 8006de8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dec:	4313      	orrs	r3, r2
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	46a2      	mov	sl, r4
 8006df2:	e7d2      	b.n	8006d9a <_vfiprintf_r+0xe2>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	1d19      	adds	r1, r3, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	9103      	str	r1, [sp, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfbb      	ittet	lt
 8006e00:	425b      	neglt	r3, r3
 8006e02:	f042 0202 	orrlt.w	r2, r2, #2
 8006e06:	9307      	strge	r3, [sp, #28]
 8006e08:	9307      	strlt	r3, [sp, #28]
 8006e0a:	bfb8      	it	lt
 8006e0c:	9204      	strlt	r2, [sp, #16]
 8006e0e:	7823      	ldrb	r3, [r4, #0]
 8006e10:	2b2e      	cmp	r3, #46	; 0x2e
 8006e12:	d10c      	bne.n	8006e2e <_vfiprintf_r+0x176>
 8006e14:	7863      	ldrb	r3, [r4, #1]
 8006e16:	2b2a      	cmp	r3, #42	; 0x2a
 8006e18:	d135      	bne.n	8006e86 <_vfiprintf_r+0x1ce>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	9203      	str	r2, [sp, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bfb8      	it	lt
 8006e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e2a:	3402      	adds	r4, #2
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f14 <_vfiprintf_r+0x25c>
 8006e32:	7821      	ldrb	r1, [r4, #0]
 8006e34:	2203      	movs	r2, #3
 8006e36:	4650      	mov	r0, sl
 8006e38:	f7f9 f9da 	bl	80001f0 <memchr>
 8006e3c:	b140      	cbz	r0, 8006e50 <_vfiprintf_r+0x198>
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	eba0 000a 	sub.w	r0, r0, sl
 8006e44:	fa03 f000 	lsl.w	r0, r3, r0
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	4303      	orrs	r3, r0
 8006e4c:	3401      	adds	r4, #1
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e54:	482c      	ldr	r0, [pc, #176]	; (8006f08 <_vfiprintf_r+0x250>)
 8006e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e5a:	2206      	movs	r2, #6
 8006e5c:	f7f9 f9c8 	bl	80001f0 <memchr>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d03f      	beq.n	8006ee4 <_vfiprintf_r+0x22c>
 8006e64:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <_vfiprintf_r+0x254>)
 8006e66:	bb1b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x1f8>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	3307      	adds	r3, #7
 8006e6c:	f023 0307 	bic.w	r3, r3, #7
 8006e70:	3308      	adds	r3, #8
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e76:	443b      	add	r3, r7
 8006e78:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7a:	e767      	b.n	8006d4c <_vfiprintf_r+0x94>
 8006e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e80:	460c      	mov	r4, r1
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7a5      	b.n	8006dd2 <_vfiprintf_r+0x11a>
 8006e86:	2300      	movs	r3, #0
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f04f 0c0a 	mov.w	ip, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e98:	3a30      	subs	r2, #48	; 0x30
 8006e9a:	2a09      	cmp	r2, #9
 8006e9c:	d903      	bls.n	8006ea6 <_vfiprintf_r+0x1ee>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c5      	beq.n	8006e2e <_vfiprintf_r+0x176>
 8006ea2:	9105      	str	r1, [sp, #20]
 8006ea4:	e7c3      	b.n	8006e2e <_vfiprintf_r+0x176>
 8006ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eaa:	4604      	mov	r4, r0
 8006eac:	2301      	movs	r3, #1
 8006eae:	e7f0      	b.n	8006e92 <_vfiprintf_r+0x1da>
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <_vfiprintf_r+0x258>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	1c78      	adds	r0, r7, #1
 8006ec4:	d1d6      	bne.n	8006e74 <_vfiprintf_r+0x1bc>
 8006ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec8:	07d9      	lsls	r1, r3, #31
 8006eca:	d405      	bmi.n	8006ed8 <_vfiprintf_r+0x220>
 8006ecc:	89ab      	ldrh	r3, [r5, #12]
 8006ece:	059a      	lsls	r2, r3, #22
 8006ed0:	d402      	bmi.n	8006ed8 <_vfiprintf_r+0x220>
 8006ed2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed4:	f7ff fcd5 	bl	8006882 <__retarget_lock_release_recursive>
 8006ed8:	89ab      	ldrh	r3, [r5, #12]
 8006eda:	065b      	lsls	r3, r3, #25
 8006edc:	f53f af12 	bmi.w	8006d04 <_vfiprintf_r+0x4c>
 8006ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee2:	e711      	b.n	8006d08 <_vfiprintf_r+0x50>
 8006ee4:	ab03      	add	r3, sp, #12
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <_vfiprintf_r+0x258>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 f880 	bl	8006ff4 <_printf_i>
 8006ef4:	e7e4      	b.n	8006ec0 <_vfiprintf_r+0x208>
 8006ef6:	bf00      	nop
 8006ef8:	0800dcb0 	.word	0x0800dcb0
 8006efc:	0800dcd0 	.word	0x0800dcd0
 8006f00:	0800dc90 	.word	0x0800dc90
 8006f04:	0800dcf0 	.word	0x0800dcf0
 8006f08:	0800dcfa 	.word	0x0800dcfa
 8006f0c:	00000000 	.word	0x00000000
 8006f10:	08006c93 	.word	0x08006c93
 8006f14:	0800dcf6 	.word	0x0800dcf6

08006f18 <_printf_common>:
 8006f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	4699      	mov	r9, r3
 8006f20:	688a      	ldr	r2, [r1, #8]
 8006f22:	690b      	ldr	r3, [r1, #16]
 8006f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bfb8      	it	lt
 8006f2c:	4613      	movlt	r3, r2
 8006f2e:	6033      	str	r3, [r6, #0]
 8006f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f34:	4607      	mov	r7, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	b10a      	cbz	r2, 8006f3e <_printf_common+0x26>
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	6033      	str	r3, [r6, #0]
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	0699      	lsls	r1, r3, #26
 8006f42:	bf42      	ittt	mi
 8006f44:	6833      	ldrmi	r3, [r6, #0]
 8006f46:	3302      	addmi	r3, #2
 8006f48:	6033      	strmi	r3, [r6, #0]
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	f015 0506 	ands.w	r5, r5, #6
 8006f50:	d106      	bne.n	8006f60 <_printf_common+0x48>
 8006f52:	f104 0a19 	add.w	sl, r4, #25
 8006f56:	68e3      	ldr	r3, [r4, #12]
 8006f58:	6832      	ldr	r2, [r6, #0]
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	dc26      	bgt.n	8006fae <_printf_common+0x96>
 8006f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f64:	1e13      	subs	r3, r2, #0
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	bf18      	it	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	0692      	lsls	r2, r2, #26
 8006f6e:	d42b      	bmi.n	8006fc8 <_printf_common+0xb0>
 8006f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f74:	4649      	mov	r1, r9
 8006f76:	4638      	mov	r0, r7
 8006f78:	47c0      	blx	r8
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d01e      	beq.n	8006fbc <_printf_common+0xa4>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	68e5      	ldr	r5, [r4, #12]
 8006f82:	6832      	ldr	r2, [r6, #0]
 8006f84:	f003 0306 	and.w	r3, r3, #6
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	bf08      	it	eq
 8006f8c:	1aad      	subeq	r5, r5, r2
 8006f8e:	68a3      	ldr	r3, [r4, #8]
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	bf0c      	ite	eq
 8006f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f98:	2500      	movne	r5, #0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	bfc4      	itt	gt
 8006f9e:	1a9b      	subgt	r3, r3, r2
 8006fa0:	18ed      	addgt	r5, r5, r3
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	341a      	adds	r4, #26
 8006fa6:	42b5      	cmp	r5, r6
 8006fa8:	d11a      	bne.n	8006fe0 <_printf_common+0xc8>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e008      	b.n	8006fc0 <_printf_common+0xa8>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4652      	mov	r2, sl
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	47c0      	blx	r8
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d103      	bne.n	8006fc4 <_printf_common+0xac>
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	e7c6      	b.n	8006f56 <_printf_common+0x3e>
 8006fc8:	18e1      	adds	r1, r4, r3
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	2030      	movs	r0, #48	; 0x30
 8006fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fd2:	4422      	add	r2, r4
 8006fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fdc:	3302      	adds	r3, #2
 8006fde:	e7c7      	b.n	8006f70 <_printf_common+0x58>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	47c0      	blx	r8
 8006fea:	3001      	adds	r0, #1
 8006fec:	d0e6      	beq.n	8006fbc <_printf_common+0xa4>
 8006fee:	3601      	adds	r6, #1
 8006ff0:	e7d9      	b.n	8006fa6 <_printf_common+0x8e>
	...

08006ff4 <_printf_i>:
 8006ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff8:	7e0f      	ldrb	r7, [r1, #24]
 8006ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ffc:	2f78      	cmp	r7, #120	; 0x78
 8006ffe:	4691      	mov	r9, r2
 8007000:	4680      	mov	r8, r0
 8007002:	460c      	mov	r4, r1
 8007004:	469a      	mov	sl, r3
 8007006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800700a:	d807      	bhi.n	800701c <_printf_i+0x28>
 800700c:	2f62      	cmp	r7, #98	; 0x62
 800700e:	d80a      	bhi.n	8007026 <_printf_i+0x32>
 8007010:	2f00      	cmp	r7, #0
 8007012:	f000 80d8 	beq.w	80071c6 <_printf_i+0x1d2>
 8007016:	2f58      	cmp	r7, #88	; 0x58
 8007018:	f000 80a3 	beq.w	8007162 <_printf_i+0x16e>
 800701c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007024:	e03a      	b.n	800709c <_printf_i+0xa8>
 8007026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800702a:	2b15      	cmp	r3, #21
 800702c:	d8f6      	bhi.n	800701c <_printf_i+0x28>
 800702e:	a101      	add	r1, pc, #4	; (adr r1, 8007034 <_printf_i+0x40>)
 8007030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007034:	0800708d 	.word	0x0800708d
 8007038:	080070a1 	.word	0x080070a1
 800703c:	0800701d 	.word	0x0800701d
 8007040:	0800701d 	.word	0x0800701d
 8007044:	0800701d 	.word	0x0800701d
 8007048:	0800701d 	.word	0x0800701d
 800704c:	080070a1 	.word	0x080070a1
 8007050:	0800701d 	.word	0x0800701d
 8007054:	0800701d 	.word	0x0800701d
 8007058:	0800701d 	.word	0x0800701d
 800705c:	0800701d 	.word	0x0800701d
 8007060:	080071ad 	.word	0x080071ad
 8007064:	080070d1 	.word	0x080070d1
 8007068:	0800718f 	.word	0x0800718f
 800706c:	0800701d 	.word	0x0800701d
 8007070:	0800701d 	.word	0x0800701d
 8007074:	080071cf 	.word	0x080071cf
 8007078:	0800701d 	.word	0x0800701d
 800707c:	080070d1 	.word	0x080070d1
 8007080:	0800701d 	.word	0x0800701d
 8007084:	0800701d 	.word	0x0800701d
 8007088:	08007197 	.word	0x08007197
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	602a      	str	r2, [r5, #0]
 8007094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800709c:	2301      	movs	r3, #1
 800709e:	e0a3      	b.n	80071e8 <_printf_i+0x1f4>
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	6829      	ldr	r1, [r5, #0]
 80070a4:	0606      	lsls	r6, r0, #24
 80070a6:	f101 0304 	add.w	r3, r1, #4
 80070aa:	d50a      	bpl.n	80070c2 <_printf_i+0xce>
 80070ac:	680e      	ldr	r6, [r1, #0]
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	da03      	bge.n	80070bc <_printf_i+0xc8>
 80070b4:	232d      	movs	r3, #45	; 0x2d
 80070b6:	4276      	negs	r6, r6
 80070b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070bc:	485e      	ldr	r0, [pc, #376]	; (8007238 <_printf_i+0x244>)
 80070be:	230a      	movs	r3, #10
 80070c0:	e019      	b.n	80070f6 <_printf_i+0x102>
 80070c2:	680e      	ldr	r6, [r1, #0]
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ca:	bf18      	it	ne
 80070cc:	b236      	sxthne	r6, r6
 80070ce:	e7ef      	b.n	80070b0 <_printf_i+0xbc>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	1d19      	adds	r1, r3, #4
 80070d6:	6029      	str	r1, [r5, #0]
 80070d8:	0601      	lsls	r1, r0, #24
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0xec>
 80070dc:	681e      	ldr	r6, [r3, #0]
 80070de:	e002      	b.n	80070e6 <_printf_i+0xf2>
 80070e0:	0646      	lsls	r6, r0, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0xe8>
 80070e4:	881e      	ldrh	r6, [r3, #0]
 80070e6:	4854      	ldr	r0, [pc, #336]	; (8007238 <_printf_i+0x244>)
 80070e8:	2f6f      	cmp	r7, #111	; 0x6f
 80070ea:	bf0c      	ite	eq
 80070ec:	2308      	moveq	r3, #8
 80070ee:	230a      	movne	r3, #10
 80070f0:	2100      	movs	r1, #0
 80070f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070f6:	6865      	ldr	r5, [r4, #4]
 80070f8:	60a5      	str	r5, [r4, #8]
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	bfa2      	ittt	ge
 80070fe:	6821      	ldrge	r1, [r4, #0]
 8007100:	f021 0104 	bicge.w	r1, r1, #4
 8007104:	6021      	strge	r1, [r4, #0]
 8007106:	b90e      	cbnz	r6, 800710c <_printf_i+0x118>
 8007108:	2d00      	cmp	r5, #0
 800710a:	d04d      	beq.n	80071a8 <_printf_i+0x1b4>
 800710c:	4615      	mov	r5, r2
 800710e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007112:	fb03 6711 	mls	r7, r3, r1, r6
 8007116:	5dc7      	ldrb	r7, [r0, r7]
 8007118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800711c:	4637      	mov	r7, r6
 800711e:	42bb      	cmp	r3, r7
 8007120:	460e      	mov	r6, r1
 8007122:	d9f4      	bls.n	800710e <_printf_i+0x11a>
 8007124:	2b08      	cmp	r3, #8
 8007126:	d10b      	bne.n	8007140 <_printf_i+0x14c>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07de      	lsls	r6, r3, #31
 800712c:	d508      	bpl.n	8007140 <_printf_i+0x14c>
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	4299      	cmp	r1, r3
 8007134:	bfde      	ittt	le
 8007136:	2330      	movle	r3, #48	; 0x30
 8007138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800713c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007140:	1b52      	subs	r2, r2, r5
 8007142:	6122      	str	r2, [r4, #16]
 8007144:	f8cd a000 	str.w	sl, [sp]
 8007148:	464b      	mov	r3, r9
 800714a:	aa03      	add	r2, sp, #12
 800714c:	4621      	mov	r1, r4
 800714e:	4640      	mov	r0, r8
 8007150:	f7ff fee2 	bl	8006f18 <_printf_common>
 8007154:	3001      	adds	r0, #1
 8007156:	d14c      	bne.n	80071f2 <_printf_i+0x1fe>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	b004      	add	sp, #16
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	4835      	ldr	r0, [pc, #212]	; (8007238 <_printf_i+0x244>)
 8007164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007168:	6829      	ldr	r1, [r5, #0]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007170:	6029      	str	r1, [r5, #0]
 8007172:	061d      	lsls	r5, r3, #24
 8007174:	d514      	bpl.n	80071a0 <_printf_i+0x1ac>
 8007176:	07df      	lsls	r7, r3, #31
 8007178:	bf44      	itt	mi
 800717a:	f043 0320 	orrmi.w	r3, r3, #32
 800717e:	6023      	strmi	r3, [r4, #0]
 8007180:	b91e      	cbnz	r6, 800718a <_printf_i+0x196>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	f023 0320 	bic.w	r3, r3, #32
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	2310      	movs	r3, #16
 800718c:	e7b0      	b.n	80070f0 <_printf_i+0xfc>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	f043 0320 	orr.w	r3, r3, #32
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	2378      	movs	r3, #120	; 0x78
 8007198:	4828      	ldr	r0, [pc, #160]	; (800723c <_printf_i+0x248>)
 800719a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800719e:	e7e3      	b.n	8007168 <_printf_i+0x174>
 80071a0:	0659      	lsls	r1, r3, #25
 80071a2:	bf48      	it	mi
 80071a4:	b2b6      	uxthmi	r6, r6
 80071a6:	e7e6      	b.n	8007176 <_printf_i+0x182>
 80071a8:	4615      	mov	r5, r2
 80071aa:	e7bb      	b.n	8007124 <_printf_i+0x130>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	6826      	ldr	r6, [r4, #0]
 80071b0:	6961      	ldr	r1, [r4, #20]
 80071b2:	1d18      	adds	r0, r3, #4
 80071b4:	6028      	str	r0, [r5, #0]
 80071b6:	0635      	lsls	r5, r6, #24
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	d501      	bpl.n	80071c0 <_printf_i+0x1cc>
 80071bc:	6019      	str	r1, [r3, #0]
 80071be:	e002      	b.n	80071c6 <_printf_i+0x1d2>
 80071c0:	0670      	lsls	r0, r6, #25
 80071c2:	d5fb      	bpl.n	80071bc <_printf_i+0x1c8>
 80071c4:	8019      	strh	r1, [r3, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	4615      	mov	r5, r2
 80071cc:	e7ba      	b.n	8007144 <_printf_i+0x150>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	602a      	str	r2, [r5, #0]
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	6862      	ldr	r2, [r4, #4]
 80071d8:	2100      	movs	r1, #0
 80071da:	4628      	mov	r0, r5
 80071dc:	f7f9 f808 	bl	80001f0 <memchr>
 80071e0:	b108      	cbz	r0, 80071e6 <_printf_i+0x1f2>
 80071e2:	1b40      	subs	r0, r0, r5
 80071e4:	6060      	str	r0, [r4, #4]
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	2300      	movs	r3, #0
 80071ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f0:	e7a8      	b.n	8007144 <_printf_i+0x150>
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	462a      	mov	r2, r5
 80071f6:	4649      	mov	r1, r9
 80071f8:	4640      	mov	r0, r8
 80071fa:	47d0      	blx	sl
 80071fc:	3001      	adds	r0, #1
 80071fe:	d0ab      	beq.n	8007158 <_printf_i+0x164>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	079b      	lsls	r3, r3, #30
 8007204:	d413      	bmi.n	800722e <_printf_i+0x23a>
 8007206:	68e0      	ldr	r0, [r4, #12]
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	4298      	cmp	r0, r3
 800720c:	bfb8      	it	lt
 800720e:	4618      	movlt	r0, r3
 8007210:	e7a4      	b.n	800715c <_printf_i+0x168>
 8007212:	2301      	movs	r3, #1
 8007214:	4632      	mov	r2, r6
 8007216:	4649      	mov	r1, r9
 8007218:	4640      	mov	r0, r8
 800721a:	47d0      	blx	sl
 800721c:	3001      	adds	r0, #1
 800721e:	d09b      	beq.n	8007158 <_printf_i+0x164>
 8007220:	3501      	adds	r5, #1
 8007222:	68e3      	ldr	r3, [r4, #12]
 8007224:	9903      	ldr	r1, [sp, #12]
 8007226:	1a5b      	subs	r3, r3, r1
 8007228:	42ab      	cmp	r3, r5
 800722a:	dcf2      	bgt.n	8007212 <_printf_i+0x21e>
 800722c:	e7eb      	b.n	8007206 <_printf_i+0x212>
 800722e:	2500      	movs	r5, #0
 8007230:	f104 0619 	add.w	r6, r4, #25
 8007234:	e7f5      	b.n	8007222 <_printf_i+0x22e>
 8007236:	bf00      	nop
 8007238:	0800dd01 	.word	0x0800dd01
 800723c:	0800dd12 	.word	0x0800dd12

08007240 <_sbrk_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d06      	ldr	r5, [pc, #24]	; (800725c <_sbrk_r+0x1c>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	f7ff f970 	bl	8006530 <_sbrk>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_sbrk_r+0x1a>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_sbrk_r+0x1a>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20004264 	.word	0x20004264

08007260 <__sread>:
 8007260:	b510      	push	{r4, lr}
 8007262:	460c      	mov	r4, r1
 8007264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007268:	f000 fb0a 	bl	8007880 <_read_r>
 800726c:	2800      	cmp	r0, #0
 800726e:	bfab      	itete	ge
 8007270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007272:	89a3      	ldrhlt	r3, [r4, #12]
 8007274:	181b      	addge	r3, r3, r0
 8007276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800727a:	bfac      	ite	ge
 800727c:	6563      	strge	r3, [r4, #84]	; 0x54
 800727e:	81a3      	strhlt	r3, [r4, #12]
 8007280:	bd10      	pop	{r4, pc}

08007282 <__swrite>:
 8007282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007286:	461f      	mov	r7, r3
 8007288:	898b      	ldrh	r3, [r1, #12]
 800728a:	05db      	lsls	r3, r3, #23
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	4616      	mov	r6, r2
 8007292:	d505      	bpl.n	80072a0 <__swrite+0x1e>
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	2302      	movs	r3, #2
 800729a:	2200      	movs	r2, #0
 800729c:	f000 f9c8 	bl	8007630 <_lseek_r>
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	4632      	mov	r2, r6
 80072ae:	463b      	mov	r3, r7
 80072b0:	4628      	mov	r0, r5
 80072b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072b6:	f000 b869 	b.w	800738c <_write_r>

080072ba <__sseek>:
 80072ba:	b510      	push	{r4, lr}
 80072bc:	460c      	mov	r4, r1
 80072be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c2:	f000 f9b5 	bl	8007630 <_lseek_r>
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	bf15      	itete	ne
 80072cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072d6:	81a3      	strheq	r3, [r4, #12]
 80072d8:	bf18      	it	ne
 80072da:	81a3      	strhne	r3, [r4, #12]
 80072dc:	bd10      	pop	{r4, pc}

080072de <__sclose>:
 80072de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e2:	f000 b8d3 	b.w	800748c <_close_r>
	...

080072e8 <__swbuf_r>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	460e      	mov	r6, r1
 80072ec:	4614      	mov	r4, r2
 80072ee:	4605      	mov	r5, r0
 80072f0:	b118      	cbz	r0, 80072fa <__swbuf_r+0x12>
 80072f2:	6983      	ldr	r3, [r0, #24]
 80072f4:	b90b      	cbnz	r3, 80072fa <__swbuf_r+0x12>
 80072f6:	f7ff fa25 	bl	8006744 <__sinit>
 80072fa:	4b21      	ldr	r3, [pc, #132]	; (8007380 <__swbuf_r+0x98>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	d12b      	bne.n	8007358 <__swbuf_r+0x70>
 8007300:	686c      	ldr	r4, [r5, #4]
 8007302:	69a3      	ldr	r3, [r4, #24]
 8007304:	60a3      	str	r3, [r4, #8]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	071a      	lsls	r2, r3, #28
 800730a:	d52f      	bpl.n	800736c <__swbuf_r+0x84>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	b36b      	cbz	r3, 800736c <__swbuf_r+0x84>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	1ac0      	subs	r0, r0, r3
 8007316:	6963      	ldr	r3, [r4, #20]
 8007318:	b2f6      	uxtb	r6, r6
 800731a:	4283      	cmp	r3, r0
 800731c:	4637      	mov	r7, r6
 800731e:	dc04      	bgt.n	800732a <__swbuf_r+0x42>
 8007320:	4621      	mov	r1, r4
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f948 	bl	80075b8 <_fflush_r>
 8007328:	bb30      	cbnz	r0, 8007378 <__swbuf_r+0x90>
 800732a:	68a3      	ldr	r3, [r4, #8]
 800732c:	3b01      	subs	r3, #1
 800732e:	60a3      	str	r3, [r4, #8]
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	701e      	strb	r6, [r3, #0]
 8007338:	6963      	ldr	r3, [r4, #20]
 800733a:	3001      	adds	r0, #1
 800733c:	4283      	cmp	r3, r0
 800733e:	d004      	beq.n	800734a <__swbuf_r+0x62>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	07db      	lsls	r3, r3, #31
 8007344:	d506      	bpl.n	8007354 <__swbuf_r+0x6c>
 8007346:	2e0a      	cmp	r6, #10
 8007348:	d104      	bne.n	8007354 <__swbuf_r+0x6c>
 800734a:	4621      	mov	r1, r4
 800734c:	4628      	mov	r0, r5
 800734e:	f000 f933 	bl	80075b8 <_fflush_r>
 8007352:	b988      	cbnz	r0, 8007378 <__swbuf_r+0x90>
 8007354:	4638      	mov	r0, r7
 8007356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <__swbuf_r+0x9c>)
 800735a:	429c      	cmp	r4, r3
 800735c:	d101      	bne.n	8007362 <__swbuf_r+0x7a>
 800735e:	68ac      	ldr	r4, [r5, #8]
 8007360:	e7cf      	b.n	8007302 <__swbuf_r+0x1a>
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <__swbuf_r+0xa0>)
 8007364:	429c      	cmp	r4, r3
 8007366:	bf08      	it	eq
 8007368:	68ec      	ldreq	r4, [r5, #12]
 800736a:	e7ca      	b.n	8007302 <__swbuf_r+0x1a>
 800736c:	4621      	mov	r1, r4
 800736e:	4628      	mov	r0, r5
 8007370:	f000 f81e 	bl	80073b0 <__swsetup_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	d0cb      	beq.n	8007310 <__swbuf_r+0x28>
 8007378:	f04f 37ff 	mov.w	r7, #4294967295
 800737c:	e7ea      	b.n	8007354 <__swbuf_r+0x6c>
 800737e:	bf00      	nop
 8007380:	0800dcb0 	.word	0x0800dcb0
 8007384:	0800dcd0 	.word	0x0800dcd0
 8007388:	0800dc90 	.word	0x0800dc90

0800738c <_write_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	; (80073ac <_write_r+0x20>)
 8007390:	4604      	mov	r4, r0
 8007392:	4608      	mov	r0, r1
 8007394:	4611      	mov	r1, r2
 8007396:	2200      	movs	r2, #0
 8007398:	602a      	str	r2, [r5, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f7ff f8e8 	bl	8006570 <_write>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_write_r+0x1e>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_write_r+0x1e>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20004264 	.word	0x20004264

080073b0 <__swsetup_r>:
 80073b0:	4b32      	ldr	r3, [pc, #200]	; (800747c <__swsetup_r+0xcc>)
 80073b2:	b570      	push	{r4, r5, r6, lr}
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	4606      	mov	r6, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	b125      	cbz	r5, 80073c6 <__swsetup_r+0x16>
 80073bc:	69ab      	ldr	r3, [r5, #24]
 80073be:	b913      	cbnz	r3, 80073c6 <__swsetup_r+0x16>
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff f9bf 	bl	8006744 <__sinit>
 80073c6:	4b2e      	ldr	r3, [pc, #184]	; (8007480 <__swsetup_r+0xd0>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d10f      	bne.n	80073ec <__swsetup_r+0x3c>
 80073cc:	686c      	ldr	r4, [r5, #4]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d4:	0719      	lsls	r1, r3, #28
 80073d6:	d42c      	bmi.n	8007432 <__swsetup_r+0x82>
 80073d8:	06dd      	lsls	r5, r3, #27
 80073da:	d411      	bmi.n	8007400 <__swsetup_r+0x50>
 80073dc:	2309      	movs	r3, #9
 80073de:	6033      	str	r3, [r6, #0]
 80073e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	e03e      	b.n	800746a <__swsetup_r+0xba>
 80073ec:	4b25      	ldr	r3, [pc, #148]	; (8007484 <__swsetup_r+0xd4>)
 80073ee:	429c      	cmp	r4, r3
 80073f0:	d101      	bne.n	80073f6 <__swsetup_r+0x46>
 80073f2:	68ac      	ldr	r4, [r5, #8]
 80073f4:	e7eb      	b.n	80073ce <__swsetup_r+0x1e>
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <__swsetup_r+0xd8>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	bf08      	it	eq
 80073fc:	68ec      	ldreq	r4, [r5, #12]
 80073fe:	e7e6      	b.n	80073ce <__swsetup_r+0x1e>
 8007400:	0758      	lsls	r0, r3, #29
 8007402:	d512      	bpl.n	800742a <__swsetup_r+0x7a>
 8007404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007406:	b141      	cbz	r1, 800741a <__swsetup_r+0x6a>
 8007408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740c:	4299      	cmp	r1, r3
 800740e:	d002      	beq.n	8007416 <__swsetup_r+0x66>
 8007410:	4630      	mov	r0, r6
 8007412:	f000 f9b9 	bl	8007788 <_free_r>
 8007416:	2300      	movs	r3, #0
 8007418:	6363      	str	r3, [r4, #52]	; 0x34
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	2300      	movs	r3, #0
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f043 0308 	orr.w	r3, r3, #8
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	b94b      	cbnz	r3, 800744a <__swsetup_r+0x9a>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800743c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007440:	d003      	beq.n	800744a <__swsetup_r+0x9a>
 8007442:	4621      	mov	r1, r4
 8007444:	4630      	mov	r0, r6
 8007446:	f000 f92b 	bl	80076a0 <__smakebuf_r>
 800744a:	89a0      	ldrh	r0, [r4, #12]
 800744c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007450:	f010 0301 	ands.w	r3, r0, #1
 8007454:	d00a      	beq.n	800746c <__swsetup_r+0xbc>
 8007456:	2300      	movs	r3, #0
 8007458:	60a3      	str	r3, [r4, #8]
 800745a:	6963      	ldr	r3, [r4, #20]
 800745c:	425b      	negs	r3, r3
 800745e:	61a3      	str	r3, [r4, #24]
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	b943      	cbnz	r3, 8007476 <__swsetup_r+0xc6>
 8007464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007468:	d1ba      	bne.n	80073e0 <__swsetup_r+0x30>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	0781      	lsls	r1, r0, #30
 800746e:	bf58      	it	pl
 8007470:	6963      	ldrpl	r3, [r4, #20]
 8007472:	60a3      	str	r3, [r4, #8]
 8007474:	e7f4      	b.n	8007460 <__swsetup_r+0xb0>
 8007476:	2000      	movs	r0, #0
 8007478:	e7f7      	b.n	800746a <__swsetup_r+0xba>
 800747a:	bf00      	nop
 800747c:	200001fc 	.word	0x200001fc
 8007480:	0800dcb0 	.word	0x0800dcb0
 8007484:	0800dcd0 	.word	0x0800dcd0
 8007488:	0800dc90 	.word	0x0800dc90

0800748c <_close_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	; (80074a8 <_close_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7ff f878 	bl	800658c <_close>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_close_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_close_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20004264 	.word	0x20004264

080074ac <__sflush_r>:
 80074ac:	898a      	ldrh	r2, [r1, #12]
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	0710      	lsls	r0, r2, #28
 80074b6:	460c      	mov	r4, r1
 80074b8:	d458      	bmi.n	800756c <__sflush_r+0xc0>
 80074ba:	684b      	ldr	r3, [r1, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dc05      	bgt.n	80074cc <__sflush_r+0x20>
 80074c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dc02      	bgt.n	80074cc <__sflush_r+0x20>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	d0f9      	beq.n	80074c6 <__sflush_r+0x1a>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d8:	682f      	ldr	r7, [r5, #0]
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	d032      	beq.n	8007544 <__sflush_r+0x98>
 80074de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	075a      	lsls	r2, r3, #29
 80074e4:	d505      	bpl.n	80074f2 <__sflush_r+0x46>
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	1ac0      	subs	r0, r0, r3
 80074ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ec:	b10b      	cbz	r3, 80074f2 <__sflush_r+0x46>
 80074ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f0:	1ac0      	subs	r0, r0, r3
 80074f2:	2300      	movs	r3, #0
 80074f4:	4602      	mov	r2, r0
 80074f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b0      	blx	r6
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	d106      	bne.n	8007512 <__sflush_r+0x66>
 8007504:	6829      	ldr	r1, [r5, #0]
 8007506:	291d      	cmp	r1, #29
 8007508:	d82c      	bhi.n	8007564 <__sflush_r+0xb8>
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <__sflush_r+0x108>)
 800750c:	40ca      	lsrs	r2, r1
 800750e:	07d6      	lsls	r6, r2, #31
 8007510:	d528      	bpl.n	8007564 <__sflush_r+0xb8>
 8007512:	2200      	movs	r2, #0
 8007514:	6062      	str	r2, [r4, #4]
 8007516:	04d9      	lsls	r1, r3, #19
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	d504      	bpl.n	8007528 <__sflush_r+0x7c>
 800751e:	1c42      	adds	r2, r0, #1
 8007520:	d101      	bne.n	8007526 <__sflush_r+0x7a>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b903      	cbnz	r3, 8007528 <__sflush_r+0x7c>
 8007526:	6560      	str	r0, [r4, #84]	; 0x54
 8007528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752a:	602f      	str	r7, [r5, #0]
 800752c:	2900      	cmp	r1, #0
 800752e:	d0ca      	beq.n	80074c6 <__sflush_r+0x1a>
 8007530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007534:	4299      	cmp	r1, r3
 8007536:	d002      	beq.n	800753e <__sflush_r+0x92>
 8007538:	4628      	mov	r0, r5
 800753a:	f000 f925 	bl	8007788 <_free_r>
 800753e:	2000      	movs	r0, #0
 8007540:	6360      	str	r0, [r4, #52]	; 0x34
 8007542:	e7c1      	b.n	80074c8 <__sflush_r+0x1c>
 8007544:	6a21      	ldr	r1, [r4, #32]
 8007546:	2301      	movs	r3, #1
 8007548:	4628      	mov	r0, r5
 800754a:	47b0      	blx	r6
 800754c:	1c41      	adds	r1, r0, #1
 800754e:	d1c7      	bne.n	80074e0 <__sflush_r+0x34>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0c4      	beq.n	80074e0 <__sflush_r+0x34>
 8007556:	2b1d      	cmp	r3, #29
 8007558:	d001      	beq.n	800755e <__sflush_r+0xb2>
 800755a:	2b16      	cmp	r3, #22
 800755c:	d101      	bne.n	8007562 <__sflush_r+0xb6>
 800755e:	602f      	str	r7, [r5, #0]
 8007560:	e7b1      	b.n	80074c6 <__sflush_r+0x1a>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	e7ad      	b.n	80074c8 <__sflush_r+0x1c>
 800756c:	690f      	ldr	r7, [r1, #16]
 800756e:	2f00      	cmp	r7, #0
 8007570:	d0a9      	beq.n	80074c6 <__sflush_r+0x1a>
 8007572:	0793      	lsls	r3, r2, #30
 8007574:	680e      	ldr	r6, [r1, #0]
 8007576:	bf08      	it	eq
 8007578:	694b      	ldreq	r3, [r1, #20]
 800757a:	600f      	str	r7, [r1, #0]
 800757c:	bf18      	it	ne
 800757e:	2300      	movne	r3, #0
 8007580:	eba6 0807 	sub.w	r8, r6, r7
 8007584:	608b      	str	r3, [r1, #8]
 8007586:	f1b8 0f00 	cmp.w	r8, #0
 800758a:	dd9c      	ble.n	80074c6 <__sflush_r+0x1a>
 800758c:	6a21      	ldr	r1, [r4, #32]
 800758e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007590:	4643      	mov	r3, r8
 8007592:	463a      	mov	r2, r7
 8007594:	4628      	mov	r0, r5
 8007596:	47b0      	blx	r6
 8007598:	2800      	cmp	r0, #0
 800759a:	dc06      	bgt.n	80075aa <__sflush_r+0xfe>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	e78e      	b.n	80074c8 <__sflush_r+0x1c>
 80075aa:	4407      	add	r7, r0
 80075ac:	eba8 0800 	sub.w	r8, r8, r0
 80075b0:	e7e9      	b.n	8007586 <__sflush_r+0xda>
 80075b2:	bf00      	nop
 80075b4:	20400001 	.word	0x20400001

080075b8 <_fflush_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	690b      	ldr	r3, [r1, #16]
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	b913      	cbnz	r3, 80075c8 <_fflush_r+0x10>
 80075c2:	2500      	movs	r5, #0
 80075c4:	4628      	mov	r0, r5
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	b118      	cbz	r0, 80075d2 <_fflush_r+0x1a>
 80075ca:	6983      	ldr	r3, [r0, #24]
 80075cc:	b90b      	cbnz	r3, 80075d2 <_fflush_r+0x1a>
 80075ce:	f7ff f8b9 	bl	8006744 <__sinit>
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <_fflush_r+0x6c>)
 80075d4:	429c      	cmp	r4, r3
 80075d6:	d11b      	bne.n	8007610 <_fflush_r+0x58>
 80075d8:	686c      	ldr	r4, [r5, #4]
 80075da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0ef      	beq.n	80075c2 <_fflush_r+0xa>
 80075e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e4:	07d0      	lsls	r0, r2, #31
 80075e6:	d404      	bmi.n	80075f2 <_fflush_r+0x3a>
 80075e8:	0599      	lsls	r1, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_fflush_r+0x3a>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f7ff f947 	bl	8006880 <__retarget_lock_acquire_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7ff ff59 	bl	80074ac <__sflush_r>
 80075fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fc:	07da      	lsls	r2, r3, #31
 80075fe:	4605      	mov	r5, r0
 8007600:	d4e0      	bmi.n	80075c4 <_fflush_r+0xc>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	d4dd      	bmi.n	80075c4 <_fflush_r+0xc>
 8007608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760a:	f7ff f93a 	bl	8006882 <__retarget_lock_release_recursive>
 800760e:	e7d9      	b.n	80075c4 <_fflush_r+0xc>
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <_fflush_r+0x70>)
 8007612:	429c      	cmp	r4, r3
 8007614:	d101      	bne.n	800761a <_fflush_r+0x62>
 8007616:	68ac      	ldr	r4, [r5, #8]
 8007618:	e7df      	b.n	80075da <_fflush_r+0x22>
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <_fflush_r+0x74>)
 800761c:	429c      	cmp	r4, r3
 800761e:	bf08      	it	eq
 8007620:	68ec      	ldreq	r4, [r5, #12]
 8007622:	e7da      	b.n	80075da <_fflush_r+0x22>
 8007624:	0800dcb0 	.word	0x0800dcb0
 8007628:	0800dcd0 	.word	0x0800dcd0
 800762c:	0800dc90 	.word	0x0800dc90

08007630 <_lseek_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_lseek_r+0x20>)
 8007634:	4604      	mov	r4, r0
 8007636:	4608      	mov	r0, r1
 8007638:	4611      	mov	r1, r2
 800763a:	2200      	movs	r2, #0
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f7fe ffae 	bl	80065a0 <_lseek>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_lseek_r+0x1e>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_lseek_r+0x1e>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20004264 	.word	0x20004264

08007654 <__swhatbuf_r>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	460e      	mov	r6, r1
 8007658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765c:	2900      	cmp	r1, #0
 800765e:	b096      	sub	sp, #88	; 0x58
 8007660:	4614      	mov	r4, r2
 8007662:	461d      	mov	r5, r3
 8007664:	da08      	bge.n	8007678 <__swhatbuf_r+0x24>
 8007666:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	602a      	str	r2, [r5, #0]
 800766e:	061a      	lsls	r2, r3, #24
 8007670:	d410      	bmi.n	8007694 <__swhatbuf_r+0x40>
 8007672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007676:	e00e      	b.n	8007696 <__swhatbuf_r+0x42>
 8007678:	466a      	mov	r2, sp
 800767a:	f000 f913 	bl	80078a4 <_fstat_r>
 800767e:	2800      	cmp	r0, #0
 8007680:	dbf1      	blt.n	8007666 <__swhatbuf_r+0x12>
 8007682:	9a01      	ldr	r2, [sp, #4]
 8007684:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007688:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800768c:	425a      	negs	r2, r3
 800768e:	415a      	adcs	r2, r3
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	e7ee      	b.n	8007672 <__swhatbuf_r+0x1e>
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	2000      	movs	r0, #0
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	b016      	add	sp, #88	; 0x58
 800769c:	bd70      	pop	{r4, r5, r6, pc}
	...

080076a0 <__smakebuf_r>:
 80076a0:	898b      	ldrh	r3, [r1, #12]
 80076a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a4:	079d      	lsls	r5, r3, #30
 80076a6:	4606      	mov	r6, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	d507      	bpl.n	80076bc <__smakebuf_r+0x1c>
 80076ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	2301      	movs	r3, #1
 80076b6:	6163      	str	r3, [r4, #20]
 80076b8:	b002      	add	sp, #8
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	ab01      	add	r3, sp, #4
 80076be:	466a      	mov	r2, sp
 80076c0:	f7ff ffc8 	bl	8007654 <__swhatbuf_r>
 80076c4:	9900      	ldr	r1, [sp, #0]
 80076c6:	4605      	mov	r5, r0
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7ff f8fb 	bl	80068c4 <_malloc_r>
 80076ce:	b948      	cbnz	r0, 80076e4 <__smakebuf_r+0x44>
 80076d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d4ef      	bmi.n	80076b8 <__smakebuf_r+0x18>
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	f043 0302 	orr.w	r3, r3, #2
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	e7e3      	b.n	80076ac <__smakebuf_r+0xc>
 80076e4:	4b0d      	ldr	r3, [pc, #52]	; (800771c <__smakebuf_r+0x7c>)
 80076e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x74>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f8e1 	bl	80078c8 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x74>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a0      	ldrh	r0, [r4, #12]
 8007716:	4305      	orrs	r5, r0
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cd      	b.n	80076b8 <__smakebuf_r+0x18>
 800771c:	080066dd 	.word	0x080066dd

08007720 <memcpy>:
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	f100 33ff 	add.w	r3, r0, #4294967295
 8007728:	d100      	bne.n	800772c <memcpy+0xc>
 800772a:	4770      	bx	lr
 800772c:	b510      	push	{r4, lr}
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007736:	4291      	cmp	r1, r2
 8007738:	d1f9      	bne.n	800772e <memcpy+0xe>
 800773a:	bd10      	pop	{r4, pc}

0800773c <memmove>:
 800773c:	4288      	cmp	r0, r1
 800773e:	b510      	push	{r4, lr}
 8007740:	eb01 0402 	add.w	r4, r1, r2
 8007744:	d902      	bls.n	800774c <memmove+0x10>
 8007746:	4284      	cmp	r4, r0
 8007748:	4623      	mov	r3, r4
 800774a:	d807      	bhi.n	800775c <memmove+0x20>
 800774c:	1e43      	subs	r3, r0, #1
 800774e:	42a1      	cmp	r1, r4
 8007750:	d008      	beq.n	8007764 <memmove+0x28>
 8007752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800775a:	e7f8      	b.n	800774e <memmove+0x12>
 800775c:	4402      	add	r2, r0
 800775e:	4601      	mov	r1, r0
 8007760:	428a      	cmp	r2, r1
 8007762:	d100      	bne.n	8007766 <memmove+0x2a>
 8007764:	bd10      	pop	{r4, pc}
 8007766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800776a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800776e:	e7f7      	b.n	8007760 <memmove+0x24>

08007770 <__malloc_lock>:
 8007770:	4801      	ldr	r0, [pc, #4]	; (8007778 <__malloc_lock+0x8>)
 8007772:	f7ff b885 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8007776:	bf00      	nop
 8007778:	20004258 	.word	0x20004258

0800777c <__malloc_unlock>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__malloc_unlock+0x8>)
 800777e:	f7ff b880 	b.w	8006882 <__retarget_lock_release_recursive>
 8007782:	bf00      	nop
 8007784:	20004258 	.word	0x20004258

08007788 <_free_r>:
 8007788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800778a:	2900      	cmp	r1, #0
 800778c:	d044      	beq.n	8007818 <_free_r+0x90>
 800778e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007792:	9001      	str	r0, [sp, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f1a1 0404 	sub.w	r4, r1, #4
 800779a:	bfb8      	it	lt
 800779c:	18e4      	addlt	r4, r4, r3
 800779e:	f7ff ffe7 	bl	8007770 <__malloc_lock>
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <_free_r+0x94>)
 80077a4:	9801      	ldr	r0, [sp, #4]
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x30>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	b003      	add	sp, #12
 80077b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077b4:	f7ff bfe2 	b.w	800777c <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x46>
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1961      	adds	r1, r4, r5
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x22>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x50>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x46>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1855      	adds	r5, r2, r1
 80077dc:	42a5      	cmp	r5, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x70>
 80077e0:	6824      	ldr	r4, [r4, #0]
 80077e2:	4421      	add	r1, r4
 80077e4:	1854      	adds	r4, r2, r1
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x26>
 80077ec:	681c      	ldr	r4, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	4421      	add	r1, r4
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x26>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x78>
 80077fa:	230c      	movs	r3, #12
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x26>
 8007800:	6825      	ldr	r5, [r4, #0]
 8007802:	1961      	adds	r1, r4, r5
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1949      	addeq	r1, r1, r5
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x26>
 8007818:	b003      	add	sp, #12
 800781a:	bd30      	pop	{r4, r5, pc}
 800781c:	2000425c 	.word	0x2000425c

08007820 <_realloc_r>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	4680      	mov	r8, r0
 8007826:	4614      	mov	r4, r2
 8007828:	460e      	mov	r6, r1
 800782a:	b921      	cbnz	r1, 8007836 <_realloc_r+0x16>
 800782c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	4611      	mov	r1, r2
 8007832:	f7ff b847 	b.w	80068c4 <_malloc_r>
 8007836:	b92a      	cbnz	r2, 8007844 <_realloc_r+0x24>
 8007838:	f7ff ffa6 	bl	8007788 <_free_r>
 800783c:	4625      	mov	r5, r4
 800783e:	4628      	mov	r0, r5
 8007840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007844:	f000 f850 	bl	80078e8 <_malloc_usable_size_r>
 8007848:	4284      	cmp	r4, r0
 800784a:	4607      	mov	r7, r0
 800784c:	d802      	bhi.n	8007854 <_realloc_r+0x34>
 800784e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007852:	d812      	bhi.n	800787a <_realloc_r+0x5a>
 8007854:	4621      	mov	r1, r4
 8007856:	4640      	mov	r0, r8
 8007858:	f7ff f834 	bl	80068c4 <_malloc_r>
 800785c:	4605      	mov	r5, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	d0ed      	beq.n	800783e <_realloc_r+0x1e>
 8007862:	42bc      	cmp	r4, r7
 8007864:	4622      	mov	r2, r4
 8007866:	4631      	mov	r1, r6
 8007868:	bf28      	it	cs
 800786a:	463a      	movcs	r2, r7
 800786c:	f7ff ff58 	bl	8007720 <memcpy>
 8007870:	4631      	mov	r1, r6
 8007872:	4640      	mov	r0, r8
 8007874:	f7ff ff88 	bl	8007788 <_free_r>
 8007878:	e7e1      	b.n	800783e <_realloc_r+0x1e>
 800787a:	4635      	mov	r5, r6
 800787c:	e7df      	b.n	800783e <_realloc_r+0x1e>
	...

08007880 <_read_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d07      	ldr	r5, [pc, #28]	; (80078a0 <_read_r+0x20>)
 8007884:	4604      	mov	r4, r0
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fe fe88 	bl	80065a4 <_read>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_read_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_read_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20004264 	.word	0x20004264

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	f7fe fe6e 	bl	8006592 <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	20004264 	.word	0x20004264

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fe fe62 	bl	800659c <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20004264 	.word	0x20004264

080078e8 <_malloc_usable_size_r>:
 80078e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ec:	1f18      	subs	r0, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfbc      	itt	lt
 80078f2:	580b      	ldrlt	r3, [r1, r0]
 80078f4:	18c0      	addlt	r0, r0, r3
 80078f6:	4770      	bx	lr

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
