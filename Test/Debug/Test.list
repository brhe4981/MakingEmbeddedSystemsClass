
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c368  0800c368  0001c368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3ec  0800c3ec  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3f4  0800c3f4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3f4  0800c3f4  0001c3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3f8  0800c3f8  0001c3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008d78  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008e0c  20008e0c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b0c5  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a6d  00000000  00000000  0004b189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002290  00000000  00000000  00050bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002060  00000000  00000000  00052e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4bc  00000000  00000000  00054ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a83b  00000000  00000000  000803a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fb9  00000000  00000000  000aabdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019fb98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009524  00000000  00000000  0019fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c350 	.word	0x0800c350

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c350 	.word	0x0800c350

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000108 	.word	0x20000108

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 f837 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f82b 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fa99 	bl	8000aa0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f891 	bl	8000694 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8a3 	bl	80006bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa43 	bl	8000a00 <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f8d1 	bl	8000720 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f90f 	bl	80007a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 f98d 	bl	80008a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 f9c1 	bl	800090c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fa0f 	bl	80009ac <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <main+0x5c>)
 8000590:	1d3c      	adds	r4, r7, #4
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f009 f80e 	bl	80095c6 <osThreadCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <main+0x60>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f009 f802 	bl	80095b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>
 80005b6:	bf00      	nop
 80005b8:	0800c374 	.word	0x0800c374
 80005bc:	20000564 	.word	0x20000564

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f00b fdb8 	bl	800c144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000638:	2348      	movs	r3, #72	; 0x48
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fe0b 	bl	8004264 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000654:	f000 fb50 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f86d 	bl	8004754 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fb3a 	bl	8000cf8 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_CRC_Init+0x20>)
 800069a:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <MX_CRC_Init+0x24>)
 800069c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_CRC_Init+0x20>)
 80006a0:	f001 f8e0 	bl	8001864 <HAL_CRC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006aa:	f000 fb25 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000308 	.word	0x20000308
 80006b8:	40023000 	.word	0x40023000

080006bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_DMA2D_Init+0x60>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_DMA2D_Init+0x5c>)
 80006f2:	f001 f8d3 	bl	800189c <HAL_DMA2D_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006fc:	f000 fafc 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000700:	2101      	movs	r1, #1
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_DMA2D_Init+0x5c>)
 8000704:	f001 fa24 	bl	8001b50 <HAL_DMA2D_ConfigLayer>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800070e:	f000 faf3 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000310 	.word	0x20000310
 800071c:	4002b000 	.word	0x4002b000

08000720 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_I2C3_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_I2C3_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_I2C3_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_I2C3_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_I2C3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_I2C3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_I2C3_Init+0x74>)
 800073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_I2C3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_I2C3_Init+0x74>)
 800075e:	f003 f859 	bl	8003814 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fac6 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_I2C3_Init+0x74>)
 8000770:	f003 f994 	bl	8003a9c <HAL_I2CEx_ConfigAnalogFilter>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800077a:	f000 fabd 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C3_Init+0x74>)
 8000782:	f003 f9c7 	bl	8003b14 <HAL_I2CEx_ConfigDigitalFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 fab4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000350 	.word	0x20000350
 8000798:	40005c00 	.word	0x40005c00
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2234      	movs	r2, #52	; 0x34
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00b fcc9 	bl	800c144 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007b4:	4a39      	ldr	r2, [pc, #228]	; (800089c <MX_LTDC_Init+0xfc>)
 80007b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007b8:	4b37      	ldr	r3, [pc, #220]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c4:	4b34      	ldr	r3, [pc, #208]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007d2:	2209      	movs	r2, #9
 80007d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007de:	221d      	movs	r2, #29
 80007e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 120d 	movw	r2, #269	; 0x10d
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1243 	movw	r2, #323	; 0x143
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 1217 	movw	r2, #279	; 0x117
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_LTDC_Init+0xf8>)
 8000802:	f240 1247 	movw	r2, #327	; 0x147
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LTDC_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <MX_LTDC_Init+0xf8>)
 8000822:	f003 f9b7 	bl	8003b94 <HAL_LTDC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fa64 	bl	8000cf8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000834:	23f0      	movs	r3, #240	; 0xf0
 8000836:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800083c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000840:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000842:	2302      	movs	r3, #2
 8000844:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000846:	23ff      	movs	r3, #255	; 0xff
 8000848:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800084e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000852:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000854:	2307      	movs	r3, #7
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000858:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800085e:	23f0      	movs	r3, #240	; 0xf0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000862:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LTDC_Init+0xf8>)
 8000882:	f003 fb19 	bl	8003eb8 <HAL_LTDC_ConfigLayer>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800088c:	f000 fa34 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3738      	adds	r7, #56	; 0x38
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200003a4 	.word	0x200003a4
 800089c:	40016800 	.word	0x40016800

080008a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_SPI5_Init+0x64>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_SPI5_Init+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI5_Init+0x64>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI5_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_SPI5_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI5_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI5_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI5_Init+0x64>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI5_Init+0x64>)
 80008d4:	2218      	movs	r2, #24
 80008d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_SPI5_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI5_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_SPI5_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI5_Init+0x64>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_SPI5_Init+0x64>)
 80008f2:	f004 fb75 	bl	8004fe0 <HAL_SPI_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 f9fc 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000044c 	.word	0x2000044c
 8000908:	40015000 	.word	0x40015000

0800090c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM1_Init+0x98>)
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <MX_TIM1_Init+0x9c>)
 800092c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM1_Init+0x98>)
 800093c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_TIM1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000956:	f004 fbcc 	bl	80050f2 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 f9ca 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_TIM1_Init+0x98>)
 8000972:	f004 fd85 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800097c:	f000 f9bc 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_TIM1_Init+0x98>)
 800098e:	f004 ffa1 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 f9ae 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200004a4 	.word	0x200004a4
 80009a8:	40010000 	.word	0x40010000

080009ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART1_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009e4:	f005 f806 	bl	80059f4 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f983 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200004ec 	.word	0x200004ec
 80009fc:	40011000 	.word	0x40011000

08000a00 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <MX_FMC_Init+0x9c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a32:	2210      	movs	r2, #16
 8000a34:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a3e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a42:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a50:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_FMC_Init+0x98>)
 8000a82:	f004 fa79 	bl	8004f78 <HAL_SDRAM_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a8c:	f000 f934 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000530 	.word	0x20000530
 8000a9c:	a0000140 	.word	0xa0000140

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7a      	ldr	r2, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a73      	ldr	r2, [pc, #460]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a6c      	ldr	r2, [pc, #432]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b6a      	ldr	r3, [pc, #424]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a65      	ldr	r2, [pc, #404]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a57      	ldr	r2, [pc, #348]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a50      	ldr	r2, [pc, #320]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a49      	ldr	r2, [pc, #292]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2116      	movs	r1, #22
 8000b9a:	4844      	ldr	r0, [pc, #272]	; (8000cac <MX_GPIO_Init+0x20c>)
 8000b9c:	f001 fa16 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4842      	ldr	r0, [pc, #264]	; (8000cb0 <MX_GPIO_Init+0x210>)
 8000ba6:	f001 fa11 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bb0:	4840      	ldr	r0, [pc, #256]	; (8000cb4 <MX_GPIO_Init+0x214>)
 8000bb2:	f001 fa0b 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bbc:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <MX_GPIO_Init+0x218>)
 8000bbe:	f001 fa05 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bc2:	2316      	movs	r3, #22
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4834      	ldr	r0, [pc, #208]	; (8000cac <MX_GPIO_Init+0x20c>)
 8000bda:	f001 f84b 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bde:	f248 0307 	movw	r3, #32775	; 0x8007
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482e      	ldr	r0, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0x210>)
 8000bf6:	f001 f83d 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0x210>)
 8000c12:	f001 f82f 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <MX_GPIO_Init+0x20c>)
 8000c2c:	f001 f822 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c30:	2304      	movs	r3, #4
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <MX_GPIO_Init+0x21c>)
 8000c44:	f001 f816 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0x214>)
 8000c5e:	f001 f809 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_GPIO_Init+0x214>)
 8000c7c:	f000 fffa 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <MX_GPIO_Init+0x218>)
 8000c9a:	f000 ffeb 	bl	8001c74 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cc8:	f00a feec 	bl	800baa4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f008 fcc6 	bl	800965e <osDelay>
 8000cd2:	e7fb      	b.n	8000ccc <StartDefaultTask+0xc>

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fc97 	bl	8001618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_MspInit+0x54>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x54>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x54>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x54>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f000 fd61 	bl	8001810 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_CRC_MspInit+0x3c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10d      	bne.n	8000d8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_CRC_MspInit+0x40>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_CRC_MspInit+0x40>)
 8000d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_CRC_MspInit+0x40>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023000 	.word	0x40023000
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_DMA2D_MspInit+0x48>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d115      	bne.n	8000dde <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_DMA2D_MspInit+0x4c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_DMA2D_MspInit+0x4c>)
 8000dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_DMA2D_MspInit+0x4c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	205a      	movs	r0, #90	; 0x5a
 8000dd4:	f000 fd1c 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dd8:	205a      	movs	r0, #90	; 0x5a
 8000dda:	f000 fd35 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	4002b000 	.word	0x4002b000
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <HAL_I2C_MspInit+0xc4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d14b      	bne.n	8000eaa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <HAL_I2C_MspInit+0xcc>)
 8000e68:	f000 ff04 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <HAL_I2C_MspInit+0xd0>)
 8000e8a:	f000 fef3 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_I2C_MspInit+0xc8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005c00 	.word	0x40005c00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09a      	sub	sp, #104	; 0x68
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2230      	movs	r2, #48	; 0x30
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00b f92d 	bl	800c144 <memset>
  if(hltdc->Instance==LTDC)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a85      	ldr	r2, [pc, #532]	; (8001104 <HAL_LTDC_MspInit+0x240>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	f040 8102 	bne.w	80010fa <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000efa:	2332      	movs	r3, #50	; 0x32
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f02:	2300      	movs	r3, #0
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fe74 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f16:	f7ff feef 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a79      	ldr	r2, [pc, #484]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	4b73      	ldr	r3, [pc, #460]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a72      	ldr	r2, [pc, #456]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b70      	ldr	r3, [pc, #448]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	4b6c      	ldr	r3, [pc, #432]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a6b      	ldr	r2, [pc, #428]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a64      	ldr	r2, [pc, #400]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a5d      	ldr	r2, [pc, #372]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a56      	ldr	r2, [pc, #344]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b54      	ldr	r3, [pc, #336]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff0:	230e      	movs	r3, #14
 8000ff2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4844      	ldr	r0, [pc, #272]	; (800110c <HAL_LTDC_MspInit+0x248>)
 8000ffc:	f000 fe3a 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001000:	f641 0358 	movw	r3, #6232	; 0x1858
 8001004:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001012:	230e      	movs	r3, #14
 8001014:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800101a:	4619      	mov	r1, r3
 800101c:	483c      	ldr	r0, [pc, #240]	; (8001110 <HAL_LTDC_MspInit+0x24c>)
 800101e:	f000 fe29 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001022:	2303      	movs	r3, #3
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001032:	2309      	movs	r3, #9
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800103a:	4619      	mov	r1, r3
 800103c:	4835      	ldr	r0, [pc, #212]	; (8001114 <HAL_LTDC_MspInit+0x250>)
 800103e:	f000 fe19 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001042:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001054:	230e      	movs	r3, #14
 8001056:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	4619      	mov	r1, r3
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <HAL_LTDC_MspInit+0x250>)
 8001060:	f000 fe08 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001064:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001076:	230e      	movs	r3, #14
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107e:	4619      	mov	r1, r3
 8001080:	4825      	ldr	r0, [pc, #148]	; (8001118 <HAL_LTDC_MspInit+0x254>)
 8001082:	f000 fdf7 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001086:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800108a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001098:	230e      	movs	r3, #14
 800109a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a0:	4619      	mov	r1, r3
 80010a2:	481e      	ldr	r0, [pc, #120]	; (800111c <HAL_LTDC_MspInit+0x258>)
 80010a4:	f000 fde6 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010a8:	2348      	movs	r3, #72	; 0x48
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b8:	230e      	movs	r3, #14
 80010ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c0:	4619      	mov	r1, r3
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <HAL_LTDC_MspInit+0x25c>)
 80010c4:	f000 fdd6 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010da:	2309      	movs	r3, #9
 80010dc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <HAL_LTDC_MspInit+0x254>)
 80010e6:	f000 fdc5 	bl	8001c74 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2058      	movs	r0, #88	; 0x58
 80010f0:	f000 fb8e 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010f4:	2058      	movs	r0, #88	; 0x58
 80010f6:	f000 fba7 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3768      	adds	r7, #104	; 0x68
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40016800 	.word	0x40016800
 8001108:	40023800 	.word	0x40023800
 800110c:	40021400 	.word	0x40021400
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40021800 	.word	0x40021800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_SPI_MspInit+0x84>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12c      	bne.n	80011a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_SPI_MspInit+0x88>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_SPI_MspInit+0x88>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800117e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800119c:	f000 fd6a 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40015000 	.word	0x40015000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021400 	.word	0x40021400

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10d      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_UART_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12c      	bne.n	8001274 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001252:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x8c>)
 8001270:	f000 fd00 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40011000 	.word	0x40011000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_FMC_MspInit+0x104>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d16f      	bne.n	8001384 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_FMC_MspInit+0x104>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d8:	230c      	movs	r3, #12
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	482c      	ldr	r0, [pc, #176]	; (8001394 <HAL_FMC_MspInit+0x10c>)
 80012e2:	f000 fcc7 	bl	8001c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4826      	ldr	r0, [pc, #152]	; (8001398 <HAL_FMC_MspInit+0x110>)
 8001300:	f000 fcb8 	bl	8001c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001304:	f248 1333 	movw	r3, #33075	; 0x8133
 8001308:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	481f      	ldr	r0, [pc, #124]	; (800139c <HAL_FMC_MspInit+0x114>)
 8001320:	f000 fca8 	bl	8001c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001324:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001328:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <HAL_FMC_MspInit+0x118>)
 8001340:	f000 fc98 	bl	8001c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001344:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001348:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <HAL_FMC_MspInit+0x11c>)
 8001360:	f000 fc88 	bl	8001c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001374:	230c      	movs	r3, #12
 8001376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <HAL_FMC_MspInit+0x120>)
 800137e:	f000 fc79 	bl	8001c74 <HAL_GPIO_Init>
 8001382:	e000      	b.n	8001386 <HAL_FMC_MspInit+0xfe>
    return;
 8001384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000568 	.word	0x20000568
 8001390:	40023800 	.word	0x40023800
 8001394:	40021400 	.word	0x40021400
 8001398:	40020800 	.word	0x40020800
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40020400 	.word	0x40020400

080013ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013b4:	f7ff ff68 	bl	8001288 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	2036      	movs	r0, #54	; 0x36
 80013d6:	f000 fa1b 	bl	8001810 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f000 fa34 	bl	8001848 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_InitTick+0xa4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_InitTick+0xa4>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_InitTick+0xa4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fc:	f107 0210 	add.w	r2, r7, #16
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fbc4 	bl	8004b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800140c:	f003 fb9a 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_InitTick+0xa8>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3b01      	subs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_InitTick+0xac>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_InitTick+0xb0>)
 8001428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_InitTick+0xac>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_InitTick+0xac>)
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_InitTick+0xac>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_InitTick+0xac>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_InitTick+0xac>)
 8001446:	f003 fe54 	bl	80050f2 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_InitTick+0xac>)
 8001452:	f003 fe9d 	bl	8005190 <HAL_TIM_Base_Start_IT>
 8001456:	4603      	mov	r3, r0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	431bde83 	.word	0x431bde83
 800146c:	2000056c 	.word	0x2000056c
 8001470:	40001000 	.word	0x40001000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM6_DAC_IRQHandler+0x10>)
 80014a6:	f003 fee3 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000056c 	.word	0x2000056c

080014b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <OTG_HS_IRQHandler+0x10>)
 80014ba:	f001 f80b 	bl	80024d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20008af8 	.word	0x20008af8

080014c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <LTDC_IRQHandler+0x10>)
 80014ce:	f002 fc31 	bl	8003d34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003a4 	.word	0x200003a4

080014dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <DMA2D_IRQHandler+0x10>)
 80014e2:	f000 fa24 	bl	800192e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000310 	.word	0x20000310

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f00a fdc8 	bl	800c0b4 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20030000 	.word	0x20030000
 8001550:	00000400 	.word	0x00000400
 8001554:	200005b4 	.word	0x200005b4
 8001558:	20008e10 	.word	0x20008e10

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ffd7 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f00a fd87 	bl	800c0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7fe ffd3 	bl	800055c <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015c4:	0800c3fc 	.word	0x0800c3fc
  ldr r2, =_sbss
 80015c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015cc:	20008e0c 	.word	0x20008e0c

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f8fc 	bl	80017fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fedc 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fb7c 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008
 800163c:	200005b8 	.word	0x200005b8

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200005b8 	.word	0x200005b8

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff4c 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001822:	f7ff ff61 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001826:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7ff ffb1 	bl	8001794 <NVIC_EncodePriority>
 8001832:	4602      	mov	r2, r0
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff80 	bl	8001740 <__NVIC_SetPriority>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff54 	bl	8001704 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fa68 	bl	8000d5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e03b      	b.n	8001926 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fa6c 	bl	8000da0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	f023 0107 	bic.w	r1, r3, #7
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68d1      	ldr	r1, [r2, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	430b      	orrs	r3, r1
 8001914:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d026      	beq.n	800199e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d021      	beq.n	800199e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2204      	movs	r2, #4
 8001982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d026      	beq.n	80019f6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d021      	beq.n	80019f6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2220      	movs	r2, #32
 80019c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	f043 0202 	orr.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2204      	movs	r2, #4
 80019da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d026      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d021      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a18:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	f043 0204 	orr.w	r2, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2204      	movs	r2, #4
 8001a32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00e      	beq.n	8001a80 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a70:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f853 	bl	8001b26 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01f      	beq.n	8001ad4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01f      	beq.n	8001b1e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01a      	beq.n	8001b1e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001af6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2210      	movs	r2, #16
 8001afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f80e 	bl	8001b3a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA2D_ConfigLayer+0x20>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e079      	b.n	8001c64 <HAL_DMA2D_ConfigLayer+0x114>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	3318      	adds	r3, #24
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	4313      	orrs	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_DMA2D_ConfigLayer+0x120>)
 8001b9c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d003      	beq.n	8001bae <HAL_DMA2D_ConfigLayer+0x5e>
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	d107      	bne.n	8001bbe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e005      	b.n	8001bca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d120      	bne.n	8001c12 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	ea02 0103 	and.w	r1, r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d003      	beq.n	8001c02 <HAL_DMA2D_ConfigLayer+0xb2>
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	d127      	bne.n	8001c52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c10:	e01f      	b.n	8001c52 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	ea02 0103 	and.w	r1, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b0a      	cmp	r3, #10
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d106      	bne.n	8001c52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c50:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	ff03000f 	.word	0xff03000f

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e177      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8166 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80c0 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a61      	ldr	r2, [pc, #388]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae84 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002000:	b08f      	sub	sp, #60	; 0x3c
 8002002:	af0a      	add	r7, sp, #40	; 0x28
 8002004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e054      	b.n	80020ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f009 fd8e 	bl	800bb4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f8ca 	bl	80061e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	687e      	ldr	r6, [r7, #4]
 800205c:	466d      	mov	r5, sp
 800205e:	f106 0410 	add.w	r4, r6, #16
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002072:	1d33      	adds	r3, r6, #4
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f004 f844 	bl	8006104 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f004 f8c1 	bl	800620a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	687e      	ldr	r6, [r7, #4]
 8002090:	466d      	mov	r5, sp
 8002092:	f106 0410 	add.w	r4, r6, #16
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a6:	1d33      	adds	r3, r6, #4
 80020a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f004 fa4a 	bl	8006544 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020c2:	b590      	push	{r4, r7, lr}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af04      	add	r7, sp, #16
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	4608      	mov	r0, r1
 80020cc:	4611      	mov	r1, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	70fb      	strb	r3, [r7, #3]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70bb      	strb	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_HCD_HC_Init+0x28>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e076      	b.n	80021d8 <HAL_HCD_HC_Init+0x116>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	333d      	adds	r3, #61	; 0x3d
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3338      	adds	r3, #56	; 0x38
 8002112:	787a      	ldrb	r2, [r7, #1]
 8002114:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3340      	adds	r3, #64	; 0x40
 8002124:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002126:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3339      	adds	r3, #57	; 0x39
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	333f      	adds	r3, #63	; 0x3f
 8002148:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800214c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	78ba      	ldrb	r2, [r7, #2]
 8002152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002156:	b2d0      	uxtb	r0, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	333a      	adds	r3, #58	; 0x3a
 8002164:	4602      	mov	r2, r0
 8002166:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da09      	bge.n	8002184 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333b      	adds	r3, #59	; 0x3b
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e008      	b.n	8002196 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333b      	adds	r3, #59	; 0x3b
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	787c      	ldrb	r4, [r7, #1]
 80021b0:	78ba      	ldrb	r2, [r7, #2]
 80021b2:	78f9      	ldrb	r1, [r7, #3]
 80021b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4623      	mov	r3, r4
 80021c6:	f004 fb43 	bl	8006850 <USB_HC_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}

080021e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_HCD_HC_Halt+0x1e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e00f      	b.n	800221e <HAL_HCD_HC_Halt+0x3e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fd93 	bl	8006d3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	70fb      	strb	r3, [r7, #3]
 800223a:	460b      	mov	r3, r1
 800223c:	70bb      	strb	r3, [r7, #2]
 800223e:	4613      	mov	r3, r2
 8002240:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	333b      	adds	r3, #59	; 0x3b
 8002250:	78ba      	ldrb	r2, [r7, #2]
 8002252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	333f      	adds	r3, #63	; 0x3f
 8002262:	787a      	ldrb	r2, [r7, #1]
 8002264:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002266:	7c3b      	ldrb	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d112      	bne.n	8002292 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2203      	movs	r2, #3
 800227c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	333d      	adds	r3, #61	; 0x3d
 800228c:	7f3a      	ldrb	r2, [r7, #28]
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e008      	b.n	80022a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3342      	adds	r3, #66	; 0x42
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	f200 80c6 	bhi.w	8002438 <HAL_HCD_HC_SubmitRequest+0x210>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	08002425 	.word	0x08002425
 80022bc:	08002329 	.word	0x08002329
 80022c0:	080023a7 	.word	0x080023a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022c4:	7c3b      	ldrb	r3, [r7, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80b8 	bne.w	800243c <HAL_HCD_HC_SubmitRequest+0x214>
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80b4 	bne.w	800243c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3355      	adds	r3, #85	; 0x55
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3355      	adds	r3, #85	; 0x55
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3342      	adds	r3, #66	; 0x42
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002312:	e093      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3342      	adds	r3, #66	; 0x42
 8002322:	2202      	movs	r2, #2
 8002324:	701a      	strb	r2, [r3, #0]
      break;
 8002326:	e089      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002328:	78bb      	ldrb	r3, [r7, #2]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11d      	bne.n	800236a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3355      	adds	r3, #85	; 0x55
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3342      	adds	r3, #66	; 0x42
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002354:	e073      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3342      	adds	r3, #66	; 0x42
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
      break;
 8002368:	e069      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3354      	adds	r3, #84	; 0x54
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3342      	adds	r3, #66	; 0x42
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
      break;
 8002390:	e055      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3342      	adds	r3, #66	; 0x42
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
      break;
 80023a4:	e04b      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023a6:	78bb      	ldrb	r3, [r7, #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11d      	bne.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3355      	adds	r3, #85	; 0x55
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3342      	adds	r3, #66	; 0x42
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023d2:	e034      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e02a      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3354      	adds	r3, #84	; 0x54
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e016      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3342      	adds	r3, #66	; 0x42
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
      break;
 8002422:	e00c      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3342      	adds	r3, #66	; 0x42
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e002      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800243c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3344      	adds	r3, #68	; 0x44
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	8b3a      	ldrh	r2, [r7, #24]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	202c      	movs	r0, #44	; 0x2c
 8002458:	fb00 f303 	mul.w	r3, r0, r3
 800245c:	440b      	add	r3, r1
 800245e:	334c      	adds	r3, #76	; 0x4c
 8002460:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3350      	adds	r3, #80	; 0x50
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3339      	adds	r3, #57	; 0x39
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3361      	adds	r3, #97	; 0x61
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	222c      	movs	r2, #44	; 0x2c
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	3338      	adds	r3, #56	; 0x38
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	18d1      	adds	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f004 fae6 	bl	8006a94 <USB_HC_StartXfer>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop

080024d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 ffe7 	bl	80064be <USB_GetMode>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 80f6 	bne.w	80026e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 ffcb 	bl	8006498 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ec 	beq.w	80026e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 ffc2 	bl	8006498 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251e:	d104      	bne.n	800252a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 ffb2 	bl	8006498 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253e:	d104      	bne.n	800254a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 ffa2 	bl	8006498 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800255e:	d104      	bne.n	800256a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002568:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 ff92 	bl	8006498 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d103      	bne.n	8002586 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 ff84 	bl	8006498 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259a:	d11c      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025b6:	2110      	movs	r1, #16
 80025b8:	6938      	ldr	r0, [r7, #16]
 80025ba:	f003 fe73 	bl	80062a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025be:	6938      	ldr	r0, [r7, #16]
 80025c0:	f003 fea4 	bl	800630c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 f87a 	bl	80066c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f009 fb35 	bl	800bc40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 ff5c 	bl	8006498 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ea:	d102      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f001 f89e 	bl	800372e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 ff4e 	bl	8006498 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d106      	bne.n	8002614 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f009 fafe 	bl	800bc08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2208      	movs	r2, #8
 8002612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 ff3d 	bl	8006498 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d101      	bne.n	800262c <HAL_HCD_IRQHandler+0x158>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_HCD_IRQHandler+0x15a>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0210 	bic.w	r2, r2, #16
 8002640:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 ffa1 	bl	800358a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0210 	orr.w	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 ff1b 	bl	8006498 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800266c:	d13a      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fb50 	bl	8006d18 <USB_HC_ReadInterrupt>
 8002678:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e025      	b.n	80026cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d106      	bne.n	80026ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8ab 	bl	800280e <HCD_HC_IN_IRQHandler>
 80026b8:	e005      	b.n	80026c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fbf9 	bl	8002eb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3d4      	bcc.n	8002680 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	e000      	b.n	80026e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80026e2:	bf00      	nop
    }
  }
}
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_HCD_Start+0x16>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e013      	b.n	8002728 <HAL_HCD_Start+0x3e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f004 f83c 	bl	800678c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fd54 	bl	80061c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_HCD_Stop+0x16>
 8002742:	2302      	movs	r3, #2
 8002744:	e00d      	b.n	8002762 <HAL_HCD_Stop+0x32>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fc2a 	bl	8006fac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 ffde 	bl	8006738 <USB_ResetPort>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3360      	adds	r3, #96	; 0x60
 80027a0:	781b      	ldrb	r3, [r3, #0]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3350      	adds	r3, #80	; 0x50
 80027c8:	681b      	ldr	r3, [r3, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f822 	bl	800682c <USB_GetCurrentFrame>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fffd 	bl	80067fe <USB_GetHostSpeed>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d11a      	bne.n	8002874 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2304      	movs	r3, #4
 800284e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	2206      	movs	r2, #6
 8002860:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fa64 	bl	8006d3a <USB_HC_Halt>
 8002872:	e0af      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d11b      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	2207      	movs	r2, #7
 80028b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fa3c 	bl	8006d3a <USB_HC_Halt>
 80028c2:	e087      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d109      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]
 80028ec:	e072      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d11a      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2308      	movs	r3, #8
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3361      	adds	r3, #97	; 0x61
 8002924:	2205      	movs	r2, #5
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fa01 	bl	8006d3a <USB_HC_Halt>
 8002938:	e04c      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d11b      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002964:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2208      	movs	r2, #8
 8002976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f004 f9d9 	bl	8006d3a <USB_HC_Halt>
 8002988:	e024      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d119      	bne.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	2206      	movs	r2, #6
 80029c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f9b3 	bl	8006d3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ea:	d112      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 f99f 	bl	8006d3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a10:	e24e      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 80df 	bne.w	8002be8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3348      	adds	r3, #72	; 0x48
 8002a40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a54:	1ad2      	subs	r2, r2, r3
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	202c      	movs	r0, #44	; 0x2c
 8002a5c:	fb00 f303 	mul.w	r3, r0, r3
 8002a60:	440b      	add	r3, r1
 8002a62:	3350      	adds	r3, #80	; 0x50
 8002a64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3361      	adds	r3, #97	; 0x61
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	333f      	adds	r3, #63	; 0x3f
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	333f      	adds	r3, #63	; 0x3f
 8002abe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d111      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f004 f933 	bl	8006d3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
 8002ae6:	e03a      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	333f      	adds	r3, #63	; 0x3f
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d009      	beq.n	8002b10 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	333f      	adds	r3, #63	; 0x3f
 8002b0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d126      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	fb00 f303 	mul.w	r3, r0, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f009 f87f 	bl	800bc5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d12b      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	fb00 f202 	mul.w	r2, r0, r2
 8002b80:	440a      	add	r2, r1
 8002b82:	3240      	adds	r2, #64	; 0x40
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 818e 	beq.w	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3354      	adds	r3, #84	; 0x54
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2d8      	uxtb	r0, r3
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	e178      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3354      	adds	r3, #84	; 0x54
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3354      	adds	r3, #84	; 0x54
 8002be2:	4602      	mov	r2, r0
 8002be4:	701a      	strb	r2, [r3, #0]
}
 8002be6:	e163      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 80f6 	bne.w	8002dec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d109      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e0c9      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3361      	adds	r3, #97	; 0x61
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d109      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3360      	adds	r3, #96	; 0x60
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e0b5      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d009      	beq.n	8002c78 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3361      	adds	r3, #97	; 0x61
 8002c72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d150      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	335c      	adds	r3, #92	; 0x5c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	440b      	add	r3, r1
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d912      	bls.n	8002cd4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3360      	adds	r3, #96	; 0x60
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cd2:	e073      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d18:	e050      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3361      	adds	r3, #97	; 0x61
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d122      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e023      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d119      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	335c      	adds	r3, #92	; 0x5c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	440b      	add	r3, r1
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3360      	adds	r3, #96	; 0x60
 8002db8:	2204      	movs	r2, #4
 8002dba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2302      	movs	r3, #2
 8002dcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b2d9      	uxtb	r1, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	202c      	movs	r0, #44	; 0x2c
 8002dd8:	fb00 f303 	mul.w	r3, r0, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3360      	adds	r3, #96	; 0x60
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f008 ff39 	bl	800bc5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dea:	e061      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d156      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	333f      	adds	r3, #63	; 0x3f
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d111      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 ff81 	bl	8006d3a <USB_HC_Halt>
 8002e38:	e031      	b.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333f      	adds	r3, #63	; 0x3f
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	333f      	adds	r3, #63	; 0x3f
 8002e5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d11d      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d110      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ff4e 	bl	8006d3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2310      	movs	r3, #16
 8002eae:	6093      	str	r3, [r2, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11a      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3361      	adds	r3, #97	; 0x61
 8002f08:	2206      	movs	r2, #6
 8002f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 ff0f 	bl	8006d3a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f1c:	e331      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d12e      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2320      	movs	r3, #32
 8002f44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333d      	adds	r3, #61	; 0x3d
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 8313 	bne.w	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	333d      	adds	r3, #61	; 0x3d
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fed5 	bl	8006d3a <USB_HC_Halt>
}
 8002f90:	e2f7      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d112      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 feb6 	bl	8006d3a <USB_HC_Halt>
}
 8002fce:	e2d8      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d140      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d111      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3361      	adds	r3, #97	; 0x61
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fe6a 	bl	8006d3a <USB_HC_Halt>
}
 8003066:	e28c      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d12c      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3361      	adds	r3, #97	; 0x61
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	333d      	adds	r3, #61	; 0x3d
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	335c      	adds	r3, #92	; 0x5c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fe3b 	bl	8006d3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	6093      	str	r3, [r2, #8]
}
 80030d6:	e254      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11a      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	461a      	mov	r2, r3
 80030fc:	2308      	movs	r3, #8
 80030fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3361      	adds	r3, #97	; 0x61
 800310e:	2205      	movs	r2, #5
 8003110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fe0c 	bl	8006d3a <USB_HC_Halt>
}
 8003122:	e22e      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b10      	cmp	r3, #16
 8003138:	d140      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3361      	adds	r3, #97	; 0x61
 800315a:	2203      	movs	r2, #3
 800315c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	333d      	adds	r3, #61	; 0x3d
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d112      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	333c      	adds	r3, #60	; 0x3c
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	333d      	adds	r3, #61	; 0x3d
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fdc9 	bl	8006d3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2310      	movs	r3, #16
 80031b8:	6093      	str	r3, [r2, #8]
}
 80031ba:	e1e2      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d164      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d111      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3361      	adds	r3, #97	; 0x61
 80031e8:	2206      	movs	r2, #6
 80031ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fd9f 	bl	8006d3a <USB_HC_Halt>
 80031fc:	e044      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	202c      	movs	r0, #44	; 0x2c
 8003216:	fb00 f303 	mul.w	r3, r0, r3
 800321a:	440b      	add	r3, r1
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	335c      	adds	r3, #92	; 0x5c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d920      	bls.n	8003276 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	335c      	adds	r3, #92	; 0x5c
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3360      	adds	r3, #96	; 0x60
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	202c      	movs	r0, #44	; 0x2c
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f008 fcf4 	bl	800bc5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003274:	e008      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	6093      	str	r3, [r2, #8]
}
 800329a:	e172      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d11b      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3361      	adds	r3, #97	; 0x61
 80032c2:	2208      	movs	r2, #8
 80032c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fd32 	bl	8006d3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	461a      	mov	r2, r3
 80032e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e8:	6093      	str	r3, [r2, #8]
}
 80032ea:	e14a      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 813f 	bne.w	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d17d      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d00a      	beq.n	8003354 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	333f      	adds	r3, #63	; 0x3f
 800334c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800334e:	2b03      	cmp	r3, #3
 8003350:	f040 8100 	bne.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3355      	adds	r3, #85	; 0x55
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2d8      	uxtb	r0, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3355      	adds	r3, #85	; 0x55
 8003380:	4602      	mov	r2, r0
 8003382:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80e3 	bne.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	334c      	adds	r3, #76	; 0x4c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80d8 	beq.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	334c      	adds	r3, #76	; 0x4c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	202c      	movs	r0, #44	; 0x2c
 80033ba:	fb00 f202 	mul.w	r2, r0, r2
 80033be:	440a      	add	r2, r1
 80033c0:	3240      	adds	r2, #64	; 0x40
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	202c      	movs	r0, #44	; 0x2c
 80033ce:	fb00 f202 	mul.w	r2, r0, r2
 80033d2:	440a      	add	r2, r1
 80033d4:	3240      	adds	r2, #64	; 0x40
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80b5 	beq.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3355      	adds	r3, #85	; 0x55
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3355      	adds	r3, #85	; 0x55
 800340e:	4602      	mov	r2, r0
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e09f      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3361      	adds	r3, #97	; 0x61
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d109      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3360      	adds	r3, #96	; 0x60
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e08b      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d109      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e077      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d109      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	2205      	movs	r2, #5
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e063      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b06      	cmp	r3, #6
 800349e:	d009      	beq.n	80034b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3361      	adds	r3, #97	; 0x61
 80034ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d14f      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	335c      	adds	r3, #92	; 0x5c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	202c      	movs	r0, #44	; 0x2c
 80034cc:	fb00 f303 	mul.w	r3, r0, r3
 80034d0:	440b      	add	r3, r1
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d912      	bls.n	8003510 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	335c      	adds	r3, #92	; 0x5c
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3360      	adds	r3, #96	; 0x60
 800350a:	2204      	movs	r2, #4
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e021      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003538:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003540:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	2302      	movs	r3, #2
 8003564:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	b2d9      	uxtb	r1, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	202c      	movs	r0, #44	; 0x2c
 8003570:	fb00 f303 	mul.w	r3, r0, r3
 8003574:	4413      	add	r3, r2
 8003576:	3360      	adds	r3, #96	; 0x60
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f008 fb6d 	bl	800bc5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003582:	bf00      	nop
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	0c5b      	lsrs	r3, r3, #17
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d004      	beq.n	80035d0 <HCD_RXQLVL_IRQHandler+0x46>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	f000 80a9 	beq.w	8003720 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ce:	e0aa      	b.n	8003726 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a6 	beq.w	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 809b 	beq.w	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3350      	adds	r3, #80	; 0x50
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	441a      	add	r2, r3
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	202c      	movs	r0, #44	; 0x2c
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	440b      	add	r3, r1
 800360e:	334c      	adds	r3, #76	; 0x4c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d87a      	bhi.n	800370c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3344      	adds	r3, #68	; 0x44
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	b292      	uxth	r2, r2
 800362e:	4619      	mov	r1, r3
 8003630:	f002 feda 	bl	80063e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3344      	adds	r3, #68	; 0x44
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	441a      	add	r2, r3
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	440b      	add	r3, r1
 8003654:	3344      	adds	r3, #68	; 0x44
 8003656:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3350      	adds	r3, #80	; 0x50
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	441a      	add	r2, r3
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	202c      	movs	r0, #44	; 0x2c
 8003672:	fb00 f303 	mul.w	r3, r0, r3
 8003676:	440b      	add	r3, r1
 8003678:	3350      	adds	r3, #80	; 0x50
 800367a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	0cdb      	lsrs	r3, r3, #19
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3340      	adds	r3, #64	; 0x40
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d13c      	bne.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d039      	beq.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3354      	adds	r3, #84	; 0x54
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	f083 0301 	eor.w	r3, r3, #1
 80036f6:	b2d8      	uxtb	r0, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3354      	adds	r3, #84	; 0x54
 8003706:	4602      	mov	r2, r0
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e00b      	b.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3360      	adds	r3, #96	; 0x60
 800371a:	2204      	movs	r2, #4
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	e001      	b.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003724:	bf00      	nop
  }
}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800375a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d10b      	bne.n	800377e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f008 fa57 	bl	800bc24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d132      	bne.n	80037ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d126      	bne.n	80037e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d113      	bne.n	80037ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ac:	d106      	bne.n	80037bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 ff85 	bl	80066c4 <USB_InitFSLSPClkSel>
 80037ba:	e011      	b.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 ff7e 	bl	80066c4 <USB_InitFSLSPClkSel>
 80037c8:	e00a      	b.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d106      	bne.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d8:	461a      	mov	r2, r3
 80037da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f008 fa4d 	bl	800bc80 <HAL_HCD_PortEnabled_Callback>
 80037e6:	e002      	b.n	80037ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f008 fa57 	bl	800bc9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d103      	bne.n	8003800 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f043 0320 	orr.w	r3, r3, #32
 80037fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e12b      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fad8 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003878:	f001 f964 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a81      	ldr	r2, [pc, #516]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <HAL_I2C_Init+0x84>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_I2C_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e006      	b.n	80038a6 <HAL_I2C_Init+0x92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a7d      	ldr	r2, [pc, #500]	; (8003a90 <HAL_I2C_Init+0x27c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0e7      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a78      	ldr	r2, [pc, #480]	; (8003a94 <HAL_I2C_Init+0x280>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9b      	lsrs	r3, r3, #18
 80038b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_I2C_Init+0x274>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d802      	bhi.n	80038e8 <HAL_I2C_Init+0xd4>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e009      	b.n	80038fc <HAL_I2C_Init+0xe8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_I2C_Init+0x284>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	3301      	adds	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	430b      	orrs	r3, r1
 8003902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800390e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	495c      	ldr	r1, [pc, #368]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d819      	bhi.n	8003950 <HAL_I2C_Init+0x13c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e59      	subs	r1, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fbb1 f3f3 	udiv	r3, r1, r3
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003930:	400b      	ands	r3, r1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_I2C_Init+0x138>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e59      	subs	r1, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fbb1 f3f3 	udiv	r3, r1, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	e051      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 800394c:	2304      	movs	r3, #4
 800394e:	e04f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <HAL_I2C_Init+0x168>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e012      	b.n	80039a2 <HAL_I2C_Init+0x18e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x196>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <HAL_I2C_Init+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e58      	subs	r0, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	440b      	add	r3, r1
 80039c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6809      	ldr	r1, [r1, #0]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6911      	ldr	r1, [r2, #16]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	000186a0 	.word	0x000186a0
 8003a8c:	001e847f 	.word	0x001e847f
 8003a90:	003d08ff 	.word	0x003d08ff
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d129      	bne.n	8003b06 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2224      	movs	r2, #36	; 0x24
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0210 	bic.w	r2, r2, #16
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d12a      	bne.n	8003b84 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2224      	movs	r2, #36	; 0x24
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b4e:	89fb      	ldrh	r3, [r7, #14]
 8003b50:	f023 030f 	bic.w	r3, r3, #15
 8003b54:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	89fb      	ldrh	r3, [r7, #14]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	89fa      	ldrh	r2, [r7, #14]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0bf      	b.n	8003d26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd f982 	bl	8000ec4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bd6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_LTDC_Init+0x19c>)
 8003c08:	400b      	ands	r3, r1
 8003c0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68d9      	ldr	r1, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <HAL_LTDC_Init+0x19c>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68d9      	ldr	r1, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6919      	ldr	r1, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_LTDC_Init+0x19c>)
 8003c64:	400b      	ands	r3, r1
 8003c66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_LTDC_Init+0x19c>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6959      	ldr	r1, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0206 	orr.w	r2, r2, #6
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	f000f800 	.word	0xf000f800

08003d34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_LTDC_IRQHandler+0x6a>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01e      	beq.n	8003d9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2204      	movs	r2, #4
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f86f 	bl	8003e7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_LTDC_IRQHandler+0xbc>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01e      	beq.n	8003df0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0202 	bic.w	r2, r2, #2
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f846 	bl	8003e7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01b      	beq.n	8003e32 <HAL_LTDC_IRQHandler+0xfe>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d016      	beq.n	8003e32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f82f 	bl	8003e90 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_LTDC_IRQHandler+0x140>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0208 	bic.w	r2, r2, #8
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f818 	bl	8003ea4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_LTDC_ConfigLayer+0x1a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e02c      	b.n	8003f2c <HAL_LTDC_ConfigLayer+0x74>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2134      	movs	r1, #52	; 0x34
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f811 	bl	8003f34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bdb0      	pop	{r4, r5, r7, pc}

08003f34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	4413      	add	r3, r2
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	01db      	lsls	r3, r3, #7
 8003f60:	4413      	add	r3, r2
 8003f62:	3384      	adds	r3, #132	; 0x84
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	01d2      	lsls	r2, r2, #7
 8003f70:	440a      	add	r2, r1
 8003f72:	3284      	adds	r2, #132	; 0x84
 8003f74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f8a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f8c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	440b      	add	r3, r1
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fa2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fb2:	4413      	add	r3, r2
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3384      	adds	r3, #132	; 0x84
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	01d2      	lsls	r2, r2, #7
 8003fd2:	440a      	add	r2, r1
 8003fd4:	3284      	adds	r2, #132	; 0x84
 8003fd6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fda:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fea:	4413      	add	r3, r2
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	01db      	lsls	r3, r3, #7
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3384      	adds	r3, #132	; 0x84
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	01db      	lsls	r3, r3, #7
 800400e:	4413      	add	r3, r2
 8004010:	3384      	adds	r3, #132	; 0x84
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4611      	mov	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	01d2      	lsls	r2, r2, #7
 800401e:	440a      	add	r2, r1
 8004020:	3284      	adds	r2, #132	; 0x84
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	01db      	lsls	r3, r3, #7
 8004032:	4413      	add	r3, r2
 8004034:	3384      	adds	r3, #132	; 0x84
 8004036:	461a      	mov	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	01db      	lsls	r3, r3, #7
 8004064:	4413      	add	r3, r2
 8004066:	3384      	adds	r3, #132	; 0x84
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	4413      	add	r3, r2
 8004076:	3384      	adds	r3, #132	; 0x84
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004084:	461a      	mov	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	431a      	orrs	r2, r3
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	01db      	lsls	r3, r3, #7
 8004098:	440b      	add	r3, r1
 800409a:	3384      	adds	r3, #132	; 0x84
 800409c:	4619      	mov	r1, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	01db      	lsls	r3, r3, #7
 80040ae:	4413      	add	r3, r2
 80040b0:	3384      	adds	r3, #132	; 0x84
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4611      	mov	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	01d2      	lsls	r2, r2, #7
 80040be:	440a      	add	r2, r1
 80040c0:	3284      	adds	r2, #132	; 0x84
 80040c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	4413      	add	r3, r2
 80040d4:	3384      	adds	r3, #132	; 0x84
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4413      	add	r3, r2
 80040ea:	3384      	adds	r3, #132	; 0x84
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4611      	mov	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	01d2      	lsls	r2, r2, #7
 80040f8:	440a      	add	r2, r1
 80040fa:	3284      	adds	r2, #132	; 0x84
 80040fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004100:	f023 0307 	bic.w	r3, r3, #7
 8004104:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	6809      	ldr	r1, [r1, #0]
 8004112:	4608      	mov	r0, r1
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	01c9      	lsls	r1, r1, #7
 8004118:	4401      	add	r1, r0
 800411a:	3184      	adds	r1, #132	; 0x84
 800411c:	4313      	orrs	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	4413      	add	r3, r2
 800412c:	3384      	adds	r3, #132	; 0x84
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	01db      	lsls	r3, r3, #7
 800413a:	4413      	add	r3, r2
 800413c:	3384      	adds	r3, #132	; 0x84
 800413e:	461a      	mov	r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	4413      	add	r3, r2
 8004150:	3384      	adds	r3, #132	; 0x84
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004162:	2304      	movs	r3, #4
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e01b      	b.n	80041a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d102      	bne.n	8004176 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004170:	2303      	movs	r3, #3
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e014      	b.n	80041a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d00b      	beq.n	8004196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004182:	2b02      	cmp	r3, #2
 8004184:	d007      	beq.n	8004196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800418a:	2b03      	cmp	r3, #3
 800418c:	d003      	beq.n	8004196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004192:	2b07      	cmp	r3, #7
 8004194:	d102      	bne.n	800419c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004196:	2302      	movs	r3, #2
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e001      	b.n	80041a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800419c:	2301      	movs	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	01db      	lsls	r3, r3, #7
 80041aa:	4413      	add	r3, r2
 80041ac:	3384      	adds	r3, #132	; 0x84
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4611      	mov	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	01d2      	lsls	r2, r2, #7
 80041ba:	440a      	add	r2, r1
 80041bc:	3284      	adds	r2, #132	; 0x84
 80041be:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1acb      	subs	r3, r1, r3
 80041da:	69f9      	ldr	r1, [r7, #28]
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	6809      	ldr	r1, [r1, #0]
 80041e6:	4608      	mov	r0, r1
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	01c9      	lsls	r1, r1, #7
 80041ec:	4401      	add	r1, r0
 80041ee:	3184      	adds	r1, #132	; 0x84
 80041f0:	4313      	orrs	r3, r2
 80041f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	; 0x84
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4611      	mov	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	440a      	add	r2, r1
 8004210:	3284      	adds	r2, #132	; 0x84
 8004212:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	01db      	lsls	r3, r3, #7
 8004226:	4413      	add	r3, r2
 8004228:	3384      	adds	r3, #132	; 0x84
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	4413      	add	r3, r2
 800423e:	3384      	adds	r3, #132	; 0x84
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4611      	mov	r1, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	01d2      	lsls	r2, r2, #7
 800424c:	440a      	add	r2, r1
 800424e:	3284      	adds	r2, #132	; 0x84
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	3724      	adds	r7, #36	; 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e267      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d075      	beq.n	800436e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b04      	cmp	r3, #4
 800428c:	d00c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4b85      	ldr	r3, [pc, #532]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004296:	2b08      	cmp	r3, #8
 8004298:	d112      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4b82      	ldr	r3, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	4b7e      	ldr	r3, [pc, #504]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05b      	beq.n	800436c <HAL_RCC_OscConfig+0x108>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d157      	bne.n	800436c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e242      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d106      	bne.n	80042d8 <HAL_RCC_OscConfig+0x74>
 80042ca:	4b76      	ldr	r3, [pc, #472]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a75      	ldr	r2, [pc, #468]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e01d      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6f      	ldr	r2, [pc, #444]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6c      	ldr	r2, [pc, #432]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042fc:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a68      	ldr	r2, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b66      	ldr	r3, [pc, #408]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a65      	ldr	r2, [pc, #404]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 800430e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fd f990 	bl	8001640 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004324:	f7fd f98c 	bl	8001640 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e207      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b5b      	ldr	r3, [pc, #364]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xc0>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f97c 	bl	8001640 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800434c:	f7fd f978 	bl	8001640 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1f3      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0xe8>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d063      	beq.n	8004442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11c      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1c7      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4937      	ldr	r1, [pc, #220]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e03a      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_OscConfig+0x244>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fd f931 	bl	8001640 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fd f92d 	bl	8001640 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1a8      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f4:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4925      	ldr	r1, [pc, #148]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCC_OscConfig+0x244>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fd f910 	bl	8001640 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004424:	f7fd f90c 	bl	8001640 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e187      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d036      	beq.n	80044bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_RCC_OscConfig+0x248>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd f8f0 	bl	8001640 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004464:	f7fd f8ec 	bl	8001640 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e167      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x200>
 8004482:	e01b      	b.n	80044bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_OscConfig+0x248>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448a:	f7fd f8d9 	bl	8001640 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	e00e      	b.n	80044b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004492:	f7fd f8d5 	bl	8001640 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d907      	bls.n	80044b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e150      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
 80044a4:	40023800 	.word	0x40023800
 80044a8:	42470000 	.word	0x42470000
 80044ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b88      	ldr	r3, [pc, #544]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ea      	bne.n	8004492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8097 	beq.w	80045f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b81      	ldr	r3, [pc, #516]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4b7d      	ldr	r3, [pc, #500]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a7c      	ldr	r2, [pc, #496]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b7a      	ldr	r3, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <HAL_RCC_OscConfig+0x474>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b74      	ldr	r3, [pc, #464]	; (80046d8 <HAL_RCC_OscConfig+0x474>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a73      	ldr	r2, [pc, #460]	; (80046d8 <HAL_RCC_OscConfig+0x474>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fd f895 	bl	8001640 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fd f891 	bl	8001640 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e10c      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_RCC_OscConfig+0x474>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x2ea>
 8004540:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	e01c      	b.n	8004588 <HAL_RCC_OscConfig+0x324>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b05      	cmp	r3, #5
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x30c>
 8004556:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a5e      	ldr	r2, [pc, #376]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a5b      	ldr	r2, [pc, #364]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0x324>
 8004570:	4b58      	ldr	r3, [pc, #352]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	4a57      	ldr	r2, [pc, #348]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	; 0x70
 800457c:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a54      	ldr	r2, [pc, #336]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004582:	f023 0304 	bic.w	r3, r3, #4
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fd f856 	bl	8001640 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fd f852 	bl	8001640 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0cb      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0ee      	beq.n	8004598 <HAL_RCC_OscConfig+0x334>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045bc:	f7fd f840 	bl	8001640 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fd f83c 	bl	8001640 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0b5      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ee      	bne.n	80045c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	4a38      	ldr	r2, [pc, #224]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80a1 	beq.w	8004744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004602:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b08      	cmp	r3, #8
 800460c:	d05c      	beq.n	80046c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d141      	bne.n	800469a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_RCC_OscConfig+0x478>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fd f810 	bl	8001640 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004624:	f7fd f80c 	bl	8001640 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e087      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	019b      	lsls	r3, r3, #6
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	491b      	ldr	r1, [pc, #108]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_RCC_OscConfig+0x478>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fc ffe5 	bl	8001640 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fc ffe1 	bl	8001640 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e05c      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x416>
 8004698:	e054      	b.n	8004744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_RCC_OscConfig+0x478>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fc ffce 	bl	8001640 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fc ffca 	bl	8001640 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e045      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_OscConfig+0x470>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x444>
 80046c6:	e03d      	b.n	8004744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e038      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40007000 	.word	0x40007000
 80046dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x4ec>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d028      	beq.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d121      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d11a      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	3b01      	subs	r3, #1
 800472a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800

08004754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0cc      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004768:	4b68      	ldr	r3, [pc, #416]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d90c      	bls.n	8004790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b65      	ldr	r3, [pc, #404]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b63      	ldr	r3, [pc, #396]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b8      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a58      	ldr	r2, [pc, #352]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a52      	ldr	r2, [pc, #328]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	494d      	ldr	r1, [pc, #308]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d044      	beq.n	8004874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d119      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d003      	beq.n	8004812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	2b03      	cmp	r3, #3
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e06f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004822:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e067      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004832:	4b37      	ldr	r3, [pc, #220]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4934      	ldr	r1, [pc, #208]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004844:	f7fc fefc 	bl	8001640 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fc fef8 	bl	8001640 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 020c 	and.w	r2, r3, #12
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d1eb      	bne.n	800484c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d20c      	bcs.n	800489c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b22      	ldr	r3, [pc, #136]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e032      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4916      	ldr	r1, [pc, #88]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490a      	ldr	r1, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc fd60 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023c00 	.word	0x40023c00
 8004910:	40023800 	.word	0x40023800
 8004914:	0800c3d4 	.word	0x0800c3d4
 8004918:	20000000 	.word	0x20000000
 800491c:	20000004 	.word	0x20000004

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b094      	sub	sp, #80	; 0x50
 8004926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	2300      	movs	r3, #0
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	2300      	movs	r3, #0
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004938:	4b79      	ldr	r3, [pc, #484]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d00d      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x40>
 8004944:	2b08      	cmp	r3, #8
 8004946:	f200 80e1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x34>
 800494e:	2b04      	cmp	r3, #4
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x3a>
 8004952:	e0db      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b73      	ldr	r3, [pc, #460]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004958:	e0db      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800495e:	e0d8      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496a:	4b6d      	ldr	r3, [pc, #436]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b6a      	ldr	r3, [pc, #424]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	2200      	movs	r2, #0
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
 800498a:	2300      	movs	r3, #0
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
 800498e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	f04f 0000 	mov.w	r0, #0
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	0159      	lsls	r1, r3, #5
 80049a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a4:	0150      	lsls	r0, r2, #5
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4621      	mov	r1, r4
 80049ac:	1a51      	subs	r1, r2, r1
 80049ae:	6139      	str	r1, [r7, #16]
 80049b0:	4629      	mov	r1, r5
 80049b2:	eb63 0301 	sbc.w	r3, r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ce:	4651      	mov	r1, sl
 80049d0:	018a      	lsls	r2, r1, #6
 80049d2:	4651      	mov	r1, sl
 80049d4:	ebb2 0801 	subs.w	r8, r2, r1
 80049d8:	4659      	mov	r1, fp
 80049da:	eb63 0901 	sbc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	462b      	mov	r3, r5
 8004a00:	eb49 0303 	adc.w	r3, r9, r3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a12:	4629      	mov	r1, r5
 8004a14:	024b      	lsls	r3, r1, #9
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	024a      	lsls	r2, r1, #9
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a26:	2200      	movs	r2, #0
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a30:	f7fb fbde 	bl	80001f0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3c:	e058      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b38      	ldr	r3, [pc, #224]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	4611      	mov	r1, r2
 8004a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6a:	0150      	lsls	r0, r2, #5
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4641      	mov	r1, r8
 8004a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a76:	4649      	mov	r1, r9
 8004a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a90:	ebb2 040a 	subs.w	r4, r2, sl
 8004a94:	eb63 050b 	sbc.w	r5, r3, fp
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	00eb      	lsls	r3, r5, #3
 8004aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa6:	00e2      	lsls	r2, r4, #3
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	18e3      	adds	r3, r4, r3
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb45 0303 	adc.w	r3, r5, r3
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	028b      	lsls	r3, r1, #10
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	028a      	lsls	r2, r1, #10
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	2200      	movs	r2, #0
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	61fa      	str	r2, [r7, #28]
 8004ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae4:	f7fb fb84 	bl	80001f0 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3750      	adds	r7, #80	; 0x50
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800c3e4 	.word	0x0800c3e4

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800c3e4 	.word	0x0800c3e4

08004b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	220f      	movs	r2, #15
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	08db      	lsrs	r3, r3, #3
 8004bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <HAL_RCC_GetClockConfig+0x60>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40023c00 	.word	0x40023c00

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d075      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c2c:	4b91      	ldr	r3, [pc, #580]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7fc fd05 	bl	8001640 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c3a:	f7fc fd01 	bl	8001640 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e189      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c4c:	4b8a      	ldr	r3, [pc, #552]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	019a      	lsls	r2, r3, #6
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	071b      	lsls	r3, r3, #28
 8004c70:	4981      	ldr	r1, [pc, #516]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c84:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	0f1b      	lsrs	r3, r3, #28
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	4974      	ldr	r1, [pc, #464]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cac:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb2:	f023 021f 	bic.w	r2, r3, #31
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	496e      	ldr	r1, [pc, #440]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	019a      	lsls	r2, r3, #6
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	071b      	lsls	r3, r3, #28
 8004ce4:	4964      	ldr	r1, [pc, #400]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf2:	f7fc fca5 	bl	8001640 <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cfa:	f7fc fca1 	bl	8001640 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e129      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d079      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d30:	4b52      	ldr	r3, [pc, #328]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d36:	f7fc fc83 	bl	8001640 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d3e:	f7fc fc7f 	bl	8001640 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e107      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5c:	d0ef      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d6a:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	0f1b      	lsrs	r3, r3, #28
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	019a      	lsls	r2, r3, #6
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	061b      	lsls	r3, r3, #24
 8004d84:	431a      	orrs	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	493b      	ldr	r1, [pc, #236]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	4934      	ldr	r1, [pc, #208]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01e      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db8:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	0e1b      	lsrs	r3, r3, #24
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	019a      	lsls	r2, r3, #6
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	4927      	ldr	r1, [pc, #156]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	4922      	ldr	r1, [pc, #136]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fc fc20 	bl	8001640 <HAL_GetTick>
 8004e00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e04:	f7fc fc1c 	bl	8001640 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0a4      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e22:	d1ef      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 808b 	beq.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5a:	f7fc fbf1 	bl	8001640 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e60:	e010      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e62:	f7fc fbed 	bl	8001640 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d909      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e075      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e74:	42470068 	.word	0x42470068
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	42470070 	.word	0x42470070
 8004e80:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e84:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0e8      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d028      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eae:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ec4:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d114      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fc fbb3 	bl	8001640 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc fbaf 	bl	8001640 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e035      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ee      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f0c:	d10d      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	4912      	ldr	r1, [pc, #72]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f34:	6093      	str	r3, [r2, #8]
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f42:	490a      	ldr	r1, [pc, #40]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f5c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	42470e40 	.word	0x42470e40
 8004f74:	424711e0 	.word	0x424711e0

08004f78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e025      	b.n	8004fd8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fc fa03 	bl	80013ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 ffdd 	bl	8005f78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	f001 f832 	bl	8006032 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e07b      	b.n	80050ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d009      	beq.n	8005018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e005      	b.n	8005018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc f876 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	ea42 0103 	orr.w	r1, r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0104 	and.w	r1, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0210 	and.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e041      	b.n	8005188 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fc f84b 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fa95 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04e      	b.n	8005246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d01d      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_TIM_Base_Start_IT+0xc8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIM_Base_Start_IT+0xcc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_TIM_Base_Start_IT+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_TIM_Base_Start_IT+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d111      	bne.n	8005234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d010      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	e007      	b.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40001800 	.word	0x40001800

08005270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0202 	mvn.w	r2, #2
 800529c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9b5 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f9a7 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f9b8 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0204 	mvn.w	r2, #4
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f98b 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f97d 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f98e 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b08      	cmp	r3, #8
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f961 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f953 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f964 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0210 	mvn.w	r2, #16
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2208      	movs	r2, #8
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f937 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f929 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f93a 	bl	8005636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0201 	mvn.w	r2, #1
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb fc70 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fae0 	bl	80059e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d10e      	bne.n	800544c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8ff 	bl	800564a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b20      	cmp	r3, #32
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0220 	mvn.w	r2, #32
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 faaa 	bl	80059cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIM_ConfigClockSource+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e0b4      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x186>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d4:	d03e      	beq.n	8005554 <HAL_TIM_ConfigClockSource+0xd4>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054da:	f200 8087 	bhi.w	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_TIM_ConfigClockSource+0x172>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d87f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b70      	cmp	r3, #112	; 0x70
 80054ee:	d01a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xa6>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d87b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b60      	cmp	r3, #96	; 0x60
 80054f6:	d050      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x11a>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d877      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d03c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xfa>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d873      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d058      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x13a>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d86f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b30      	cmp	r3, #48	; 0x30
 800550e:	d064      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d86b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d060      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d867      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05c      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d05a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	e062      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f000 f9ad 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	609a      	str	r2, [r3, #8]
      break;
 8005552:	e04f      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 f996 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005576:	609a      	str	r2, [r3, #8]
      break;
 8005578:	e03c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f90a 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2150      	movs	r1, #80	; 0x50
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f963 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005598:	e02c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f929 	bl	80057fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2160      	movs	r1, #96	; 0x60
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f953 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055b8:	e01c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 f8ea 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f943 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055d8:	e00c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 f93a 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055ea:	e003      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e000      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a40      	ldr	r2, [pc, #256]	; (8005774 <TIM_Base_SetConfig+0x114>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d00f      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <TIM_Base_SetConfig+0x118>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3c      	ldr	r2, [pc, #240]	; (800577c <TIM_Base_SetConfig+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3b      	ldr	r2, [pc, #236]	; (8005780 <TIM_Base_SetConfig+0x120>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3a      	ldr	r2, [pc, #232]	; (8005784 <TIM_Base_SetConfig+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <TIM_Base_SetConfig+0x114>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d027      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <TIM_Base_SetConfig+0x118>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d023      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <TIM_Base_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <TIM_Base_SetConfig+0x120>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <TIM_Base_SetConfig+0x124>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a28      	ldr	r2, [pc, #160]	; (8005788 <TIM_Base_SetConfig+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a27      	ldr	r2, [pc, #156]	; (800578c <TIM_Base_SetConfig+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a26      	ldr	r2, [pc, #152]	; (8005790 <TIM_Base_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a25      	ldr	r2, [pc, #148]	; (8005794 <TIM_Base_SetConfig+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a24      	ldr	r2, [pc, #144]	; (8005798 <TIM_Base_SetConfig+0x138>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a23      	ldr	r2, [pc, #140]	; (800579c <TIM_Base_SetConfig+0x13c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0xf8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <TIM_Base_SetConfig+0x124>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d103      	bne.n	8005760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	615a      	str	r2, [r3, #20]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40001800 	.word	0x40001800
 8005798:	40001c00 	.word	0x40001c00
 800579c:	40002000 	.word	0x40002000

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e05a      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d01d      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800

080059cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03f      	b.n	8005a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb fbec 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f829 	bl	8005a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a94:	b0c0      	sub	sp, #256	; 0x100
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	68d9      	ldr	r1, [r3, #12]
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	ea40 0301 	orr.w	r3, r0, r1
 8005ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae8:	f021 010c 	bic.w	r1, r1, #12
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005af6:	430b      	orrs	r3, r1
 8005af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	6999      	ldr	r1, [r3, #24]
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	ea40 0301 	orr.w	r3, r0, r1
 8005b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b8f      	ldr	r3, [pc, #572]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d005      	beq.n	8005b30 <UART_SetConfig+0xa0>
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <UART_SetConfig+0x2d0>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d104      	bne.n	8005b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7ff f81c 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8005b34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b38:	e003      	b.n	8005b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7ff f803 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8005b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4c:	f040 810c 	bne.w	8005d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b72:	4621      	mov	r1, r4
 8005b74:	eb12 0801 	adds.w	r8, r2, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	eb43 0901 	adc.w	r9, r3, r1
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b92:	4690      	mov	r8, r2
 8005b94:	4699      	mov	r9, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	eb18 0303 	adds.w	r3, r8, r3
 8005b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	eb49 0303 	adc.w	r3, r9, r3
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	18db      	adds	r3, r3, r3
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	eb42 0303 	adc.w	r3, r2, r3
 8005bca:	657b      	str	r3, [r7, #84]	; 0x54
 8005bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bd4:	f7fa fb0c 	bl	80001f0 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4b61      	ldr	r3, [pc, #388]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005bde:	fba3 2302 	umull	r2, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	011c      	lsls	r4, r3, #4
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c00:	415b      	adcs	r3, r3
 8005c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c08:	4641      	mov	r1, r8
 8005c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c0e:	4649      	mov	r1, r9
 8005c10:	eb43 0b01 	adc.w	fp, r3, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c28:	4692      	mov	sl, r2
 8005c2a:	469b      	mov	fp, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c36:	464b      	mov	r3, r9
 8005c38:	eb4b 0303 	adc.w	r3, fp, r3
 8005c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c54:	460b      	mov	r3, r1
 8005c56:	18db      	adds	r3, r3, r3
 8005c58:	643b      	str	r3, [r7, #64]	; 0x40
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
 8005c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c6a:	f7fa fac1 	bl	80001f0 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	; 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c8a:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c98:	441c      	add	r4, r3
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	1851      	adds	r1, r2, r1
 8005cc0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	00cb      	lsls	r3, r1, #3
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cde:	4651      	mov	r1, sl
 8005ce0:	00ca      	lsls	r2, r1, #3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d10:	460b      	mov	r3, r1
 8005d12:	18db      	adds	r3, r3, r3
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d16:	4613      	mov	r3, r2
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d26:	f7fa fa63 	bl	80001f0 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 1302 	umull	r1, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	2164      	movs	r1, #100	; 0x64
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	3332      	adds	r3, #50	; 0x32
 8005d42:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f003 0207 	and.w	r2, r3, #7
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4422      	add	r2, r4
 8005d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d58:	e105      	b.n	8005f66 <UART_SetConfig+0x4d6>
 8005d5a:	bf00      	nop
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	40011400 	.word	0x40011400
 8005d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	1891      	adds	r1, r2, r2
 8005d80:	6239      	str	r1, [r7, #32]
 8005d82:	415b      	adcs	r3, r3
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	4649      	mov	r1, r9
 8005d90:	eb43 0501 	adc.w	r5, r3, r1
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	00eb      	lsls	r3, r5, #3
 8005d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da2:	00e2      	lsls	r2, r4, #3
 8005da4:	4614      	mov	r4, r2
 8005da6:	461d      	mov	r5, r3
 8005da8:	4643      	mov	r3, r8
 8005daa:	18e3      	adds	r3, r4, r3
 8005dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005db0:	464b      	mov	r3, r9
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	008b      	lsls	r3, r1, #2
 8005dda:	4621      	mov	r1, r4
 8005ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de0:	4621      	mov	r1, r4
 8005de2:	008a      	lsls	r2, r1, #2
 8005de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005de8:	f7fa fa02 	bl	80001f0 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4b60      	ldr	r3, [pc, #384]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005df2:	fba3 2302 	umull	r2, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	011c      	lsls	r4, r3, #4
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	61b9      	str	r1, [r7, #24]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6139      	str	r1, [r7, #16]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e74:	4649      	mov	r1, r9
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7e:	4641      	mov	r1, r8
 8005e80:	008a      	lsls	r2, r1, #2
 8005e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e86:	f7fa f9b3 	bl	80001f0 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eae:	441c      	add	r4, r3
 8005eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ece:	4641      	mov	r1, r8
 8005ed0:	1851      	adds	r1, r2, r1
 8005ed2:	6039      	str	r1, [r7, #0]
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	414b      	adcs	r3, r1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	00cb      	lsls	r3, r1, #3
 8005eea:	4651      	mov	r1, sl
 8005eec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	00ca      	lsls	r2, r1, #3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4642      	mov	r2, r8
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f00:	464b      	mov	r3, r9
 8005f02:	460a      	mov	r2, r1
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	663b      	str	r3, [r7, #96]	; 0x60
 8005f14:	667a      	str	r2, [r7, #100]	; 0x64
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f22:	4649      	mov	r1, r9
 8005f24:	008b      	lsls	r3, r1, #2
 8005f26:	4641      	mov	r1, r8
 8005f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	008a      	lsls	r2, r1, #2
 8005f30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f34:	f7fa f95c 	bl	80001f0 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2164      	movs	r1, #100	; 0x64
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	3332      	adds	r3, #50	; 0x32
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	f003 020f 	and.w	r2, r3, #15
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4422      	add	r2, r4
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	bf00      	nop
 8005f68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f72:	bf00      	nop
 8005f74:	51eb851f 	.word	0x51eb851f

08005f78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d123      	bne.n	8005fd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6851      	ldr	r1, [r2, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	6892      	ldr	r2, [r2, #8]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	68d2      	ldr	r2, [r2, #12]
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	6912      	ldr	r2, [r2, #16]
 8005faa:	4311      	orrs	r1, r2
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	6952      	ldr	r2, [r2, #20]
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	6992      	ldr	r2, [r2, #24]
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	69d2      	ldr	r2, [r2, #28]
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6a12      	ldr	r2, [r2, #32]
 8005fc2:	4311      	orrs	r1, r2
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e028      	b.n	8006024 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	69d9      	ldr	r1, [r3, #28]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	4319      	orrs	r1, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	6851      	ldr	r1, [r2, #4]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	6892      	ldr	r2, [r2, #8]
 8006004:	4311      	orrs	r1, r2
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	4311      	orrs	r1, r2
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	6912      	ldr	r2, [r2, #16]
 8006010:	4311      	orrs	r1, r2
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	6952      	ldr	r2, [r2, #20]
 8006016:	4311      	orrs	r1, r2
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	6992      	ldr	r2, [r2, #24]
 800601c:	430a      	orrs	r2, r1
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d128      	bne.n	8006096 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1e59      	subs	r1, r3, #1
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4319      	orrs	r1, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	4319      	orrs	r1, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	4319      	orrs	r1, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	3b01      	subs	r3, #1
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	4319      	orrs	r1, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	3b01      	subs	r3, #1
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	4319      	orrs	r1, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	3b01      	subs	r3, #1
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	430b      	orrs	r3, r1
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	e02f      	b.n	80060f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68d2      	ldr	r2, [r2, #12]
 80060a6:	3a01      	subs	r2, #1
 80060a8:	0311      	lsls	r1, r2, #12
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	6952      	ldr	r2, [r2, #20]
 80060ae:	3a01      	subs	r2, #1
 80060b0:	0512      	lsls	r2, r2, #20
 80060b2:	430a      	orrs	r2, r1
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1e59      	subs	r1, r3, #1
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4319      	orrs	r1, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	4319      	orrs	r1, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	4319      	orrs	r1, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	430b      	orrs	r3, r1
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006104:	b084      	sub	sp, #16
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	f107 001c 	add.w	r0, r7, #28
 8006112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d122      	bne.n	8006162 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d105      	bne.n	8006156 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9c0 	bl	80064dc <USB_CoreReset>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
 8006160:	e01a      	b.n	8006198 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9b4 	bl	80064dc <USB_CoreReset>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
 800618a:	e005      	b.n	8006198 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10b      	bne.n	80061b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f043 0206 	orr.w	r2, r3, #6
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f043 0220 	orr.w	r2, r3, #32
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061c2:	b004      	add	sp, #16
 80061c4:	4770      	bx	lr

080061c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 0201 	bic.w	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d115      	bne.n	8006258 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006238:	2001      	movs	r0, #1
 800623a:	f7fb fa0d 	bl	8001658 <HAL_Delay>
      ms++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f93a 	bl	80064be <USB_GetMode>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d01e      	beq.n	800628e <USB_SetCurrentMode+0x84>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b31      	cmp	r3, #49	; 0x31
 8006254:	d9f0      	bls.n	8006238 <USB_SetCurrentMode+0x2e>
 8006256:	e01a      	b.n	800628e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d115      	bne.n	800628a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800626a:	2001      	movs	r0, #1
 800626c:	f7fb f9f4 	bl	8001658 <HAL_Delay>
      ms++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f921 	bl	80064be <USB_GetMode>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <USB_SetCurrentMode+0x84>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b31      	cmp	r3, #49	; 0x31
 8006286:	d9f0      	bls.n	800626a <USB_SetCurrentMode+0x60>
 8006288:	e001      	b.n	800628e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e005      	b.n	800629a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b32      	cmp	r3, #50	; 0x32
 8006292:	d101      	bne.n	8006298 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <USB_FlushTxFifo+0x64>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e01b      	b.n	80062fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	daf2      	bge.n	80062b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	019b      	lsls	r3, r3, #6
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a08      	ldr	r2, [pc, #32]	; (8006308 <USB_FlushTxFifo+0x64>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e006      	b.n	80062fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d0f0      	beq.n	80062dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	00030d40 	.word	0x00030d40

0800630c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a11      	ldr	r2, [pc, #68]	; (8006368 <USB_FlushRxFifo+0x5c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e018      	b.n	800635c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	daf2      	bge.n	8006318 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2210      	movs	r2, #16
 800633a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a08      	ldr	r2, [pc, #32]	; (8006368 <USB_FlushRxFifo+0x5c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e006      	b.n	800635c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d0f0      	beq.n	800633c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	00030d40 	.word	0x00030d40

0800636c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800636c:	b480      	push	{r7}
 800636e:	b089      	sub	sp, #36	; 0x24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4611      	mov	r1, r2
 8006378:	461a      	mov	r2, r3
 800637a:	460b      	mov	r3, r1
 800637c:	71fb      	strb	r3, [r7, #7]
 800637e:	4613      	mov	r3, r2
 8006380:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800638a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d123      	bne.n	80063da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006392:	88bb      	ldrh	r3, [r7, #4]
 8006394:	3303      	adds	r3, #3
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e018      	b.n	80063d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	031a      	lsls	r2, r3, #12
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ac:	461a      	mov	r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	3301      	adds	r3, #1
 80063b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3301      	adds	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	3301      	adds	r3, #1
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d3e2      	bcc.n	80063a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3724      	adds	r7, #36	; 0x24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b08b      	sub	sp, #44	; 0x2c
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	089b      	lsrs	r3, r3, #2
 8006402:	b29b      	uxth	r3, r3
 8006404:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800640e:	2300      	movs	r3, #0
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	e014      	b.n	800643e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	3301      	adds	r3, #1
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	3301      	adds	r3, #1
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	3301      	adds	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	3301      	adds	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	3301      	adds	r3, #1
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3e6      	bcc.n	8006414 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006446:	8bfb      	ldrh	r3, [r7, #30]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01e      	beq.n	800648a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	461a      	mov	r2, r3
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
 800646c:	b2da      	uxtb	r2, r3
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	701a      	strb	r2, [r3, #0]
      i++;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	3301      	adds	r3, #1
 8006476:	623b      	str	r3, [r7, #32]
      pDest++;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	3301      	adds	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800647e:	8bfb      	ldrh	r3, [r7, #30]
 8006480:	3b01      	subs	r3, #1
 8006482:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006484:	8bfb      	ldrh	r3, [r7, #30]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ea      	bne.n	8006460 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800648c:	4618      	mov	r0, r3
 800648e:	372c      	adds	r7, #44	; 0x2c
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0301 	and.w	r3, r3, #1
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <USB_CoreReset+0x64>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e01b      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <USB_CoreReset+0x64>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d0f0      	beq.n	8006512 <USB_CoreReset+0x36>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	00030d40 	.word	0x00030d40

08006544 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006544:	b084      	sub	sp, #16
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10a      	bne.n	80065b6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e014      	b.n	80065e0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c4:	f023 0304 	bic.w	r3, r3, #4
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e009      	b.n	80065e0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065da:	f023 0304 	bic.w	r3, r3, #4
 80065de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e0:	2110      	movs	r1, #16
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fe5e 	bl	80062a4 <USB_FlushTxFifo>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fe8a 	bl	800630c <USB_FlushRxFifo>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	e015      	b.n	8006634 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
 800661a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3e5      	bcc.n	8006608 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f04f 32ff 	mov.w	r2, #4294967295
 8006648:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <USB_HostInit+0x16c>)
 8006662:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <USB_HostInit+0x170>)
 8006668:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800666c:	e009      	b.n	8006682 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2280      	movs	r2, #128	; 0x80
 8006672:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <USB_HostInit+0x174>)
 8006678:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a0f      	ldr	r2, [pc, #60]	; (80066bc <USB_HostInit+0x178>)
 800667e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f043 0210 	orr.w	r2, r3, #16
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699a      	ldr	r2, [r3, #24]
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <USB_HostInit+0x17c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ac:	b004      	add	sp, #16
 80066ae:	4770      	bx	lr
 80066b0:	01000200 	.word	0x01000200
 80066b4:	00e00300 	.word	0x00e00300
 80066b8:	00600080 	.word	0x00600080
 80066bc:	004000e0 	.word	0x004000e0
 80066c0:	a3200008 	.word	0xa3200008

080066c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066fc:	4313      	orrs	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d107      	bne.n	8006716 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670c:	461a      	mov	r2, r3
 800670e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	e009      	b.n	800672a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d106      	bne.n	800672a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006722:	461a      	mov	r2, r3
 8006724:	f241 7370 	movw	r3, #6000	; 0x1770
 8006728:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006758:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006768:	2064      	movs	r0, #100	; 0x64
 800676a:	f7fa ff75 	bl	8001658 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800677a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800677c:	200a      	movs	r0, #10
 800677e:	f7fa ff6b 	bl	8001658 <HAL_Delay>

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <USB_DriveVbus+0x44>
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d106      	bne.n	80067d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d109      	bne.n	80067f0 <USB_DriveVbus+0x64>
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	0c5b      	lsrs	r3, r3, #17
 800681c:	f003 0303 	and.w	r3, r3, #3
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	b29b      	uxth	r3, r3
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	4608      	mov	r0, r1
 800685a:	4611      	mov	r1, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4603      	mov	r3, r0
 8006860:	70fb      	strb	r3, [r7, #3]
 8006862:	460b      	mov	r3, r1
 8006864:	70bb      	strb	r3, [r7, #2]
 8006866:	4613      	mov	r3, r2
 8006868:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	461a      	mov	r2, r3
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800688a:	2b03      	cmp	r3, #3
 800688c:	d87e      	bhi.n	800698c <USB_HC_Init+0x13c>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <USB_HC_Init+0x44>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068a5 	.word	0x080068a5
 8006898:	0800694f 	.word	0x0800694f
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	08006911 	.word	0x08006911
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	461a      	mov	r2, r3
 80068b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80068b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da10      	bge.n	80068e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80068e0:	e057      	b.n	8006992 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d051      	beq.n	8006992 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006908:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800690c:	60d3      	str	r3, [r2, #12]
      break;
 800690e:	e040      	b.n	8006992 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691c:	461a      	mov	r2, r3
 800691e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006928:	2b00      	cmp	r3, #0
 800692a:	da34      	bge.n	8006996 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800694c:	e023      	b.n	8006996 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	461a      	mov	r2, r3
 800695c:	f240 2325 	movw	r3, #549	; 0x225
 8006960:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	da17      	bge.n	800699a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	440a      	add	r2, r1
 8006980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006984:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006988:	60d3      	str	r3, [r2, #12]
      }
      break;
 800698a:	e006      	b.n	800699a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	77fb      	strb	r3, [r7, #31]
      break;
 8006990:	e004      	b.n	800699c <USB_HC_Init+0x14c>
      break;
 8006992:	bf00      	nop
 8006994:	e002      	b.n	800699c <USB_HC_Init+0x14c>
      break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <USB_HC_Init+0x14c>
      break;
 800699a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b6:	f043 0302 	orr.w	r3, r3, #2
 80069ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	2101      	movs	r1, #1
 80069cc:	fa01 f303 	lsl.w	r3, r1, r3
 80069d0:	6939      	ldr	r1, [r7, #16]
 80069d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069d6:	4313      	orrs	r3, r2
 80069d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da03      	bge.n	80069f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e001      	b.n	80069fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff feff 	bl	80067fe <USB_GetHostSpeed>
 8006a00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d106      	bne.n	8006a18 <USB_HC_Init+0x1c8>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d003      	beq.n	8006a18 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e001      	b.n	8006a1c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a1c:	787b      	ldrb	r3, [r7, #1]
 8006a1e:	059b      	lsls	r3, r3, #22
 8006a20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a24:	78bb      	ldrb	r3, [r7, #2]
 8006a26:	02db      	lsls	r3, r3, #11
 8006a28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a32:	049b      	lsls	r3, r3, #18
 8006a34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	0159      	lsls	r1, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a58:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d003      	beq.n	8006a6a <USB_HC_Init+0x21a>
 8006a62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10f      	bne.n	8006a8a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d02d      	beq.n	8006b1a <USB_HC_StartXfer+0x86>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	791b      	ldrb	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d129      	bne.n	8006b1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d117      	bne.n	8006afc <USB_HC_StartXfer+0x68>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	79db      	ldrb	r3, [r3, #7]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <USB_HC_StartXfer+0x48>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	79db      	ldrb	r3, [r3, #7]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d10f      	bne.n	8006afc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10b      	bne.n	8006b1a <USB_HC_StartXfer+0x86>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	795b      	ldrb	r3, [r3, #5]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fa0f 	bl	8006f34 <USB_DoPing>
      return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e0f8      	b.n	8006d0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	8912      	ldrh	r2, [r2, #8]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	8912      	ldrh	r2, [r2, #8]
 8006b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b36:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b3a:	8b7b      	ldrh	r3, [r7, #26]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d90b      	bls.n	8006b58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b40:	8b7b      	ldrh	r3, [r7, #26]
 8006b42:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	8912      	ldrh	r2, [r2, #8]
 8006b4a:	fb03 f202 	mul.w	r2, r3, r2
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e001      	b.n	8006b58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b54:	2301      	movs	r3, #1
 8006b56:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	78db      	ldrb	r3, [r3, #3]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	8912      	ldrh	r2, [r2, #8]
 8006b66:	fb03 f202 	mul.w	r2, r3, r2
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	611a      	str	r2, [r3, #16]
 8006b6e:	e003      	b.n	8006b78 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b82:	04d9      	lsls	r1, r3, #19
 8006b84:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <USB_HC_StartXfer+0x280>)
 8006b86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	7a9b      	ldrb	r3, [r3, #10]
 8006b8e:	075b      	lsls	r3, r3, #29
 8006b90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b94:	69f9      	ldr	r1, [r7, #28]
 8006b96:	0148      	lsls	r0, r1, #5
 8006b98:	6a39      	ldr	r1, [r7, #32]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ba2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	68d9      	ldr	r1, [r3, #12]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bba:	460a      	mov	r2, r1
 8006bbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf0c      	ite	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	7e7b      	ldrb	r3, [r7, #25]
 8006c06:	075b      	lsls	r3, r3, #29
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	0148      	lsls	r0, r1, #5
 8006c0c:	6a39      	ldr	r1, [r7, #32]
 8006c0e:	4401      	add	r1, r0
 8006c10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c14:	4313      	orrs	r3, r2
 8006c16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e003      	b.n	8006c4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	461a      	mov	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e04e      	b.n	8006d0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	78db      	ldrb	r3, [r3, #3]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d149      	bne.n	8006d0a <USB_HC_StartXfer+0x276>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d045      	beq.n	8006d0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	79db      	ldrb	r3, [r3, #7]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d830      	bhi.n	8006ce8 <USB_HC_StartXfer+0x254>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USB_HC_StartXfer+0x1f8>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	08006cc1 	.word	0x08006cc1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	3303      	adds	r3, #3
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ca6:	8afa      	ldrh	r2, [r7, #22]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d91c      	bls.n	8006cec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cbe:	e015      	b.n	8006cec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	3303      	adds	r3, #3
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d90a      	bls.n	8006cf0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ce6:	e003      	b.n	8006cf0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006ce8:	bf00      	nop
 8006cea:	e002      	b.n	8006cf2 <USB_HC_StartXfer+0x25e>
        break;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <USB_HC_StartXfer+0x25e>
        break;
 8006cf0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	785a      	ldrb	r2, [r3, #1]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2000      	movs	r0, #0
 8006d02:	9000      	str	r0, [sp, #0]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fb31 	bl	800636c <USB_WritePacket>
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	; 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	1ff80000 	.word	0x1ff80000

08006d18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	b29b      	uxth	r3, r3
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b089      	sub	sp, #36	; 0x24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0c9b      	lsrs	r3, r3, #18
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	0fdb      	lsrs	r3, r3, #31
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d104      	bne.n	8006d94 <USB_HC_Halt+0x5a>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e0c8      	b.n	8006f26 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <USB_HC_Halt+0x66>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d163      	bne.n	8006e68 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 80ab 	bne.w	8006f24 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d133      	bne.n	8006e42 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e18:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e26:	d81d      	bhi.n	8006e64 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3e:	d0ec      	beq.n	8006e1a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e40:	e070      	b.n	8006f24 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e62:	e05f      	b.n	8006f24 <USB_HC_Halt+0x1ea>
            break;
 8006e64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e66:	e05d      	b.n	8006f24 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d133      	bne.n	8006f00 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ee4:	d81d      	bhi.n	8006f22 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efc:	d0ec      	beq.n	8006ed8 <USB_HC_Halt+0x19e>
 8006efe:	e011      	b.n	8006f24 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e000      	b.n	8006f24 <USB_HC_Halt+0x1ea>
          break;
 8006f22:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3724      	adds	r7, #36	; 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	04da      	lsls	r2, r3, #19
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <USB_DoPing+0x74>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	461a      	mov	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	1ff80000 	.word	0x1ff80000

08006fac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f911 	bl	80061e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff f96b 	bl	80062a4 <USB_FlushTxFifo>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff f997 	bl	800630c <USB_FlushRxFifo>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	e01f      	b.n	800702e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800700c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007014:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007022:	461a      	mov	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	3301      	adds	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d9dc      	bls.n	8006fee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e034      	b.n	80070a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007050:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007058:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007060:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706e:	461a      	mov	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007080:	d80c      	bhi.n	800709c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007098:	d0ec      	beq.n	8007074 <USB_StopHost+0xc8>
 800709a:	e000      	b.n	800709e <USB_StopHost+0xf2>
        break;
 800709c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d9c7      	bls.n	800703a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b0:	461a      	mov	r2, r3
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f04f 32ff 	mov.w	r2, #4294967295
 80070be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f880 	bl	80061c6 <USB_EnableGlobalInt>

  return ret;
 80070c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b089      	sub	sp, #36	; 0x24
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070d8:	2301      	movs	r3, #1
 80070da:	2202      	movs	r2, #2
 80070dc:	2102      	movs	r1, #2
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fcb8 	bl	8007a54 <USBH_FindInterface>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2bff      	cmp	r3, #255	; 0xff
 80070ec:	d002      	beq.n	80070f4 <USBH_CDC_InterfaceInit+0x24>
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d901      	bls.n	80070f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070f4:	2302      	movs	r3, #2
 80070f6:	e13d      	b.n	8007374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc8d 	bl	8007a1c <USBH_SelectInterface>
 8007102:	4603      	mov	r3, r0
 8007104:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800710c:	2302      	movs	r3, #2
 800710e:	e131      	b.n	8007374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007116:	2050      	movs	r0, #80	; 0x50
 8007118:	f004 fff6 	bl	800c108 <malloc>
 800711c:	4603      	mov	r3, r0
 800711e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	e11f      	b.n	8007374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007134:	2250      	movs	r2, #80	; 0x50
 8007136:	2100      	movs	r1, #0
 8007138:	68b8      	ldr	r0, [r7, #8]
 800713a:	f005 f803 	bl	800c144 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	211a      	movs	r1, #26
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b25b      	sxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	da15      	bge.n	8007182 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	211a      	movs	r1, #26
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	211a      	movs	r1, #26
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 f988 	bl	800949e <USBH_AllocPipe>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	7819      	ldrb	r1, [r3, #0]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7858      	ldrb	r0, [r3, #1]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	8952      	ldrh	r2, [r2, #10]
 80071ae:	9202      	str	r2, [sp, #8]
 80071b0:	2203      	movs	r2, #3
 80071b2:	9201      	str	r2, [sp, #4]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4623      	mov	r3, r4
 80071b8:	4602      	mov	r2, r0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f002 f940 	bl	8009440 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f004 feef 	bl	800bfac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071ce:	2300      	movs	r3, #0
 80071d0:	2200      	movs	r2, #0
 80071d2:	210a      	movs	r1, #10
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc3d 	bl	8007a54 <USBH_FindInterface>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2bff      	cmp	r3, #255	; 0xff
 80071e2:	d002      	beq.n	80071ea <USBH_CDC_InterfaceInit+0x11a>
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d901      	bls.n	80071ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0c2      	b.n	8007374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	211a      	movs	r1, #26
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	4413      	add	r3, r2
 80071fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b25b      	sxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	da16      	bge.n	8007234 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	211a      	movs	r1, #26
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	211a      	movs	r1, #26
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	4413      	add	r3, r2
 8007228:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800722c:	881a      	ldrh	r2, [r3, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	835a      	strh	r2, [r3, #26]
 8007232:	e015      	b.n	8007260 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	211a      	movs	r1, #26
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007244:	781a      	ldrb	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	211a      	movs	r1, #26
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	4413      	add	r3, r2
 8007256:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800725a:	881a      	ldrh	r2, [r3, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	211a      	movs	r1, #26
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b25b      	sxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	da16      	bge.n	80072a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	211a      	movs	r1, #26
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	211a      	movs	r1, #26
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	4413      	add	r3, r2
 800729a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800729e:	881a      	ldrh	r2, [r3, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	835a      	strh	r2, [r3, #26]
 80072a4:	e015      	b.n	80072d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	211a      	movs	r1, #26
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072b6:	781a      	ldrb	r2, [r3, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	211a      	movs	r1, #26
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072cc:	881a      	ldrh	r2, [r3, #0]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	7b9b      	ldrb	r3, [r3, #14]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f002 f8e0 	bl	800949e <USBH_AllocPipe>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	7bdb      	ldrb	r3, [r3, #15]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 f8d6 	bl	800949e <USBH_AllocPipe>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	7b59      	ldrb	r1, [r3, #13]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	7b98      	ldrb	r0, [r3, #14]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	8b12      	ldrh	r2, [r2, #24]
 8007312:	9202      	str	r2, [sp, #8]
 8007314:	2202      	movs	r2, #2
 8007316:	9201      	str	r2, [sp, #4]
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4623      	mov	r3, r4
 800731c:	4602      	mov	r2, r0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f002 f88e 	bl	8009440 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	7b19      	ldrb	r1, [r3, #12]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	7bd8      	ldrb	r0, [r3, #15]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	8b52      	ldrh	r2, [r2, #26]
 800733c:	9202      	str	r2, [sp, #8]
 800733e:	2202      	movs	r2, #2
 8007340:	9201      	str	r2, [sp, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4623      	mov	r3, r4
 8007346:	4602      	mov	r2, r0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 f879 	bl	8009440 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7b5b      	ldrb	r3, [r3, #13]
 800735a:	2200      	movs	r2, #0
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f004 fe24 	bl	800bfac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	7b1b      	ldrb	r3, [r3, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f004 fe1d 	bl	800bfac <USBH_LL_SetToggle>

  return USBH_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}

0800737c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f002 f86e 	bl	800947e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f002 f899 	bl	80094e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	7b1b      	ldrb	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 f85b 	bl	800947e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	7b1b      	ldrb	r3, [r3, #12]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f002 f886 	bl	80094e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	7b5b      	ldrb	r3, [r3, #13]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	7b5b      	ldrb	r3, [r3, #13]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f002 f848 	bl	800947e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	7b5b      	ldrb	r3, [r3, #13]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 f873 	bl	80094e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	4618      	mov	r0, r3
 8007416:	f004 fe7f 	bl	800c118 <free>
    phost->pActiveClass->pData = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007420:	2200      	movs	r2, #0
 8007422:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3340      	adds	r3, #64	; 0x40
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8b1 	bl	80075ae <GetLineCoding>
 800744c:	4603      	mov	r3, r0
 800744e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800745c:	2102      	movs	r1, #2
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007462:	7afb      	ldrb	r3, [r7, #11]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800748c:	2b04      	cmp	r3, #4
 800748e:	d877      	bhi.n	8007580 <USBH_CDC_Process+0x114>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <USBH_CDC_Process+0x2c>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074ad 	.word	0x080074ad
 800749c:	080074b3 	.word	0x080074b3
 80074a0:	080074e3 	.word	0x080074e3
 80074a4:	08007557 	.word	0x08007557
 80074a8:	08007565 	.word	0x08007565
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	e06d      	b.n	800758e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f897 	bl	80075ec <SetLineCoding>
 80074be:	4603      	mov	r3, r0
 80074c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074d0:	e058      	b.n	8007584 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d055      	beq.n	8007584 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2204      	movs	r2, #4
 80074dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074e0:	e050      	b.n	8007584 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	3340      	adds	r3, #64	; 0x40
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f860 	bl	80075ae <GetLineCoding>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d126      	bne.n	8007546 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	791b      	ldrb	r3, [r3, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d13b      	bne.n	8007588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800751c:	429a      	cmp	r2, r3
 800751e:	d133      	bne.n	8007588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800752c:	429a      	cmp	r2, r3
 800752e:	d12b      	bne.n	8007588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007538:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d124      	bne.n	8007588 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f982 	bl	8007848 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007544:	e020      	b.n	8007588 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d01d      	beq.n	8007588 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2204      	movs	r2, #4
 8007550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007554:	e018      	b.n	8007588 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f867 	bl	800762a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8f6 	bl	800774e <CDC_ProcessReception>
      break;
 8007562:	e014      	b.n	800758e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f95b 	bl	8008822 <USBH_ClrFeature>
 800756c:	4603      	mov	r3, r0
 800756e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800757e:	e005      	b.n	800758c <USBH_CDC_Process+0x120>

    default:
      break;
 8007580:	bf00      	nop
 8007582:	e004      	b.n	800758e <USBH_CDC_Process+0x122>
      break;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <USBH_CDC_Process+0x122>
      break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <USBH_CDC_Process+0x122>
      break;
 800758c:	bf00      	nop

  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	22a1      	movs	r2, #161	; 0xa1
 80075bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2221      	movs	r2, #33	; 0x21
 80075c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2207      	movs	r2, #7
 80075d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2207      	movs	r2, #7
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fbed 	bl	8008dbc <USBH_CtlReq>
 80075e2:	4603      	mov	r3, r0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2221      	movs	r2, #33	; 0x21
 80075fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2207      	movs	r2, #7
 8007612:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2207      	movs	r2, #7
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fbce 	bl	8008dbc <USBH_CtlReq>
 8007620:	4603      	mov	r3, r0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af02      	add	r7, sp, #8
 8007630:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800763c:	2300      	movs	r3, #0
 800763e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007646:	2b01      	cmp	r3, #1
 8007648:	d002      	beq.n	8007650 <CDC_ProcessTransmission+0x26>
 800764a:	2b02      	cmp	r3, #2
 800764c:	d023      	beq.n	8007696 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800764e:	e07a      	b.n	8007746 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	8b12      	ldrh	r2, [r2, #24]
 8007658:	4293      	cmp	r3, r2
 800765a:	d90b      	bls.n	8007674 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	69d9      	ldr	r1, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8b1a      	ldrh	r2, [r3, #24]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	7b5b      	ldrb	r3, [r3, #13]
 8007668:	2001      	movs	r0, #1
 800766a:	9000      	str	r0, [sp, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fea4 	bl	80093ba <USBH_BulkSendData>
 8007672:	e00b      	b.n	800768c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	7b5b      	ldrb	r3, [r3, #13]
 8007682:	2001      	movs	r0, #1
 8007684:	9000      	str	r0, [sp, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fe97 	bl	80093ba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007694:	e057      	b.n	8007746 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	7b5b      	ldrb	r3, [r3, #13]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f004 fc5b 	bl	800bf58 <USBH_LL_GetURBState>
 80076a2:	4603      	mov	r3, r0
 80076a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d136      	bne.n	800771a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	8b12      	ldrh	r2, [r2, #24]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d90e      	bls.n	80076d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	8b12      	ldrh	r2, [r2, #24]
 80076c0:	1a9a      	subs	r2, r3, r2
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	8b12      	ldrh	r2, [r2, #24]
 80076ce:	441a      	add	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	61da      	str	r2, [r3, #28]
 80076d4:	e002      	b.n	80076dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80076ec:	e006      	b.n	80076fc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f892 	bl	8007820 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2204      	movs	r2, #4
 8007700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007710:	2200      	movs	r2, #0
 8007712:	4619      	mov	r1, r3
 8007714:	f001 ffe0 	bl	80096d8 <osMessagePut>
      break;
 8007718:	e014      	b.n	8007744 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d111      	bne.n	8007744 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	f001 ffca 	bl	80096d8 <osMessagePut>
      break;
 8007744:	bf00      	nop
  }
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007760:	2300      	movs	r3, #0
 8007762:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800776a:	2b03      	cmp	r3, #3
 800776c:	d002      	beq.n	8007774 <CDC_ProcessReception+0x26>
 800776e:	2b04      	cmp	r3, #4
 8007770:	d00e      	beq.n	8007790 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007772:	e051      	b.n	8007818 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	6a19      	ldr	r1, [r3, #32]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	8b5a      	ldrh	r2, [r3, #26]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	7b1b      	ldrb	r3, [r3, #12]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe3f 	bl	8009404 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2204      	movs	r2, #4
 800778a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800778e:	e043      	b.n	8007818 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	7b1b      	ldrb	r3, [r3, #12]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f004 fbde 	bl	800bf58 <USBH_LL_GetURBState>
 800779c:	4603      	mov	r3, r0
 800779e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077a0:	7cfb      	ldrb	r3, [r7, #19]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d137      	bne.n	8007816 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	7b1b      	ldrb	r3, [r3, #12]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f004 fb41 	bl	800be34 <USBH_LL_GetLastXferSize>
 80077b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d016      	beq.n	80077ec <CDC_ProcessReception+0x9e>
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	8b5b      	ldrh	r3, [r3, #26]
 80077c2:	461a      	mov	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d910      	bls.n	80077ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1ad2      	subs	r2, r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	441a      	add	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2203      	movs	r2, #3
 80077e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80077ea:	e006      	b.n	80077fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f81d 	bl	8007834 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2204      	movs	r2, #4
 80077fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800780e:	2200      	movs	r2, #0
 8007810:	4619      	mov	r1, r3
 8007812:	f001 ff61 	bl	80096d8 <osMessagePut>
      break;
 8007816:	bf00      	nop
  }
}
 8007818:	bf00      	nop
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800785c:	b5b0      	push	{r4, r5, r7, lr}
 800785e:	b090      	sub	sp, #64	; 0x40
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	e04d      	b.n	8007910 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	79fa      	ldrb	r2, [r7, #7]
 8007878:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f847 	bl	8007920 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80078c0:	4b15      	ldr	r3, [pc, #84]	; (8007918 <USBH_Init+0xbc>)
 80078c2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80078c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80078cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 fed7 	bl	8009686 <osMessageCreate>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <USBH_Init+0xc0>)
 80078e2:	f107 0414 	add.w	r4, r7, #20
 80078e6:	461d      	mov	r5, r3
 80078e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	68f9      	ldr	r1, [r7, #12]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fe63 	bl	80095c6 <osThreadCreate>
 8007900:	4602      	mov	r2, r0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f004 f9d5 	bl	800bcb8 <USBH_LL_Init>

  return USBH_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3740      	adds	r7, #64	; 0x40
 8007914:	46bd      	mov	sp, r7
 8007916:	bdb0      	pop	{r4, r5, r7, pc}
 8007918:	0800c3a0 	.word	0x0800c3a0
 800791c:	0800c3b0 	.word	0x0800c3b0

08007920 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e009      	b.n	8007946 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	33e0      	adds	r3, #224	; 0xe0
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	2200      	movs	r2, #0
 800793e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b0f      	cmp	r3, #15
 800794a:	d9f2      	bls.n	8007932 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e009      	b.n	8007966 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3301      	adds	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d3f1      	bcc.n	8007952 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2240      	movs	r2, #64	; 0x40
 8007992:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d016      	beq.n	8007a0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10e      	bne.n	8007a04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079ec:	1c59      	adds	r1, r3, #1
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	33de      	adds	r3, #222	; 0xde
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e004      	b.n	8007a0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a04:	2302      	movs	r3, #2
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	e001      	b.n	8007a0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d204      	bcs.n	8007a42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a40:	e001      	b.n	8007a46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a42:	2302      	movs	r3, #2
 8007a44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	70fb      	strb	r3, [r7, #3]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70bb      	strb	r3, [r7, #2]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a7e:	e025      	b.n	8007acc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	221a      	movs	r2, #26
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	3308      	adds	r3, #8
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3302      	adds	r3, #2
 8007a90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	795b      	ldrb	r3, [r3, #5]
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d002      	beq.n	8007aa2 <USBH_FindInterface+0x4e>
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2bff      	cmp	r3, #255	; 0xff
 8007aa0:	d111      	bne.n	8007ac6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007aa6:	78ba      	ldrb	r2, [r7, #2]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d002      	beq.n	8007ab2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aac:	78bb      	ldrb	r3, [r7, #2]
 8007aae:	2bff      	cmp	r3, #255	; 0xff
 8007ab0:	d109      	bne.n	8007ac6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ab6:	787a      	ldrb	r2, [r7, #1]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d002      	beq.n	8007ac2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007abc:	787b      	ldrb	r3, [r7, #1]
 8007abe:	2bff      	cmp	r3, #255	; 0xff
 8007ac0:	d101      	bne.n	8007ac6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	e006      	b.n	8007ad4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d9d6      	bls.n	8007a80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007ad2:	23ff      	movs	r3, #255	; 0xff
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f004 f92b 	bl	800bd44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007aee:	2101      	movs	r1, #1
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f004 fa44 	bl	800bf7e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af04      	add	r7, sp, #16
 8007b06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d102      	bne.n	8007b22 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b0b      	cmp	r3, #11
 8007b2a:	f200 8247 	bhi.w	8007fbc <USBH_Process+0x4bc>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBH_Process+0x34>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b65 	.word	0x08007b65
 8007b38:	08007bb3 	.word	0x08007bb3
 8007b3c:	08007c37 	.word	0x08007c37
 8007b40:	08007f3b 	.word	0x08007f3b
 8007b44:	08007fbd 	.word	0x08007fbd
 8007b48:	08007cf7 	.word	0x08007cf7
 8007b4c:	08007ec5 	.word	0x08007ec5
 8007b50:	08007d49 	.word	0x08007d49
 8007b54:	08007d85 	.word	0x08007d85
 8007b58:	08007dbf 	.word	0x08007dbf
 8007b5c:	08007e1d 	.word	0x08007e1d
 8007b60:	08007f23 	.word	0x08007f23
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8227 	beq.w	8007fc0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b78:	20c8      	movs	r0, #200	; 0xc8
 8007b7a:	f004 fa47 	bl	800c00c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f004 f93d 	bl	800bdfe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4619      	mov	r1, r3
 8007bac:	f001 fd94 	bl	80096d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bb0:	e206      	b.n	8007fc0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d107      	bne.n	8007bcc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e025      	b.n	8007c18 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bd6:	d914      	bls.n	8007c02 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007bde:	3301      	adds	r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d903      	bls.n	8007bfa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	220d      	movs	r2, #13
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e00e      	b.n	8007c18 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e00a      	b.n	8007c18 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c08:	f103 020a 	add.w	r2, r3, #10
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c12:	200a      	movs	r0, #10
 8007c14:	f004 f9fa 	bl	800c00c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f001 fd52 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c34:	e1cb      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c46:	2104      	movs	r1, #4
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c4c:	2064      	movs	r0, #100	; 0x64
 8007c4e:	f004 f9dd 	bl	800c00c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f004 f8ac 	bl	800bdb0 <USBH_LL_GetSpeed>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2205      	movs	r2, #5
 8007c66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fc17 	bl	800949e <USBH_AllocPipe>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c78:	2180      	movs	r1, #128	; 0x80
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fc0f 	bl	800949e <USBH_AllocPipe>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7919      	ldrb	r1, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c9c:	b292      	uxth	r2, r2
 8007c9e:	9202      	str	r2, [sp, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9201      	str	r2, [sp, #4]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2280      	movs	r2, #128	; 0x80
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fbc8 	bl	8009440 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7959      	ldrb	r1, [r3, #5]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	9202      	str	r2, [sp, #8]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	9201      	str	r2, [sp, #4]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fbb4 	bl	8009440 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cec:	2200      	movs	r2, #0
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f001 fcf2 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cf4:	e16b      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f96e 	bl	8007fd8 <USBH_HandleEnum>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 815d 	bne.w	8007fc4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d103      	bne.n	8007d24 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2208      	movs	r2, #8
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2207      	movs	r2, #7
 8007d28:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2205      	movs	r2, #5
 8007d2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4619      	mov	r1, r3
 8007d42:	f001 fcc9 	bl	80096d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d46:	e13d      	b.n	8007fc4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 813a 	beq.w	8007fc8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2208      	movs	r2, #8
 8007d64:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f001 fcab 	bl	80096d8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d82:	e121      	b.n	8007fc8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fd00 	bl	8008794 <USBH_SetCfg>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d102      	bne.n	8007da0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2209      	movs	r2, #9
 8007d9e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007db4:	2200      	movs	r2, #0
 8007db6:	4619      	mov	r1, r3
 8007db8:	f001 fc8e 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dbc:	e107      	b.n	8007fce <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d015      	beq.n	8007df8 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007dcc:	2101      	movs	r1, #1
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fd03 	bl	80087da <USBH_SetFeature>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220a      	movs	r2, #10
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e00a      	b.n	8007dfe <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d106      	bne.n	8007dfe <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	220a      	movs	r2, #10
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	220a      	movs	r2, #10
 8007dfc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e12:	2200      	movs	r2, #0
 8007e14:	4619      	mov	r1, r3
 8007e16:	f001 fc5f 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e1a:	e0d8      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d03f      	beq.n	8007ea6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e016      	b.n	8007e62 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e34:	7bfa      	ldrb	r2, [r7, #15]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32de      	adds	r2, #222	; 0xde
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	791a      	ldrb	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d108      	bne.n	8007e5c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e4a:	7bfa      	ldrb	r2, [r7, #15]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32de      	adds	r2, #222	; 0xde
 8007e50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e5a:	e005      	b.n	8007e68 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0e5      	beq.n	8007e34 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2206      	movs	r2, #6
 8007e88:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e90:	2103      	movs	r1, #3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
 8007e96:	e006      	b.n	8007ea6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	220d      	movs	r2, #13
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	220d      	movs	r2, #13
 8007ea4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f001 fc0b 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ec2:	e084      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d017      	beq.n	8007efe <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	220b      	movs	r2, #11
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e00a      	b.n	8007f04 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d106      	bne.n	8007f04 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	220d      	movs	r2, #13
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e002      	b.n	8007f04 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220d      	movs	r2, #13
 8007f02:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2205      	movs	r2, #5
 8007f08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	f001 fbdc 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f20:	e055      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d04f      	beq.n	8007fcc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
      }
      break;
 8007f38:	e048      	b.n	8007fcc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fcec 	bl	8007920 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f76:	2105      	movs	r1, #5
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d107      	bne.n	8007f98 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fda5 	bl	8007ae0 <USBH_Start>
 8007f96:	e002      	b.n	8007f9e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f003 fed3 	bl	800bd44 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f001 fb8f 	bl	80096d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fba:	e008      	b.n	8007fce <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e006      	b.n	8007fce <USBH_Process+0x4ce>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e004      	b.n	8007fce <USBH_Process+0x4ce>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e002      	b.n	8007fce <USBH_Process+0x4ce>
    break;
 8007fc8:	bf00      	nop
 8007fca:	e000      	b.n	8007fce <USBH_Process+0x4ce>
      break;
 8007fcc:	bf00      	nop
  }
  return USBH_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af04      	add	r7, sp, #16
 8007fde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	f200 8208 	bhi.w	8008402 <USBH_HandleEnum+0x42a>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBH_HandleEnum+0x20>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	080080d7 	.word	0x080080d7
 8008000:	08008141 	.word	0x08008141
 8008004:	080081cf 	.word	0x080081cf
 8008008:	08008239 	.word	0x08008239
 800800c:	080082a9 	.word	0x080082a9
 8008010:	08008345 	.word	0x08008345
 8008014:	080083c3 	.word	0x080083c3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008018:	2108      	movs	r1, #8
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 faea 	bl	80085f4 <USBH_Get_DevDesc>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d130      	bne.n	800808c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7919      	ldrb	r1, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800804e:	b292      	uxth	r2, r2
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4603      	mov	r3, r0
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f9ef 	bl	8009440 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7959      	ldrb	r1, [r3, #5]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008076:	b292      	uxth	r2, r2
 8008078:	9202      	str	r2, [sp, #8]
 800807a:	2200      	movs	r2, #0
 800807c:	9201      	str	r2, [sp, #4]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4603      	mov	r3, r0
 8008082:	2200      	movs	r2, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f9db 	bl	8009440 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800808a:	e1bc      	b.n	8008406 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b03      	cmp	r3, #3
 8008090:	f040 81b9 	bne.w	8008406 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800809a:	3301      	adds	r3, #1
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d903      	bls.n	80080b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	220d      	movs	r2, #13
 80080b2:	701a      	strb	r2, [r3, #0]
      break;
 80080b4:	e1a7      	b.n	8008406 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fa0f 	bl	80094e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	791b      	ldrb	r3, [r3, #4]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fa09 	bl	80094e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e197      	b.n	8008406 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080d6:	2112      	movs	r1, #18
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fa8b 	bl	80085f4 <USBH_Get_DevDesc>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080ee:	e18c      	b.n	800840a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	f040 8189 	bne.w	800840a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080fe:	3301      	adds	r3, #1
 8008100:	b2da      	uxtb	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800810e:	2b03      	cmp	r3, #3
 8008110:	d903      	bls.n	800811a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	220d      	movs	r2, #13
 8008116:	701a      	strb	r2, [r3, #0]
      break;
 8008118:	e177      	b.n	800840a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	795b      	ldrb	r3, [r3, #5]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f9dd 	bl	80094e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f9d7 	bl	80094e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]
      break;
 800813e:	e164      	b.n	800840a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008140:	2101      	movs	r1, #1
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fb02 	bl	800874c <USBH_SetAddress>
 8008148:	4603      	mov	r3, r0
 800814a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d132      	bne.n	80081b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008152:	2002      	movs	r0, #2
 8008154:	f003 ff5a 	bl	800c00c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2203      	movs	r2, #3
 8008164:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7919      	ldrb	r1, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800817a:	b292      	uxth	r2, r2
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	9201      	str	r2, [sp, #4]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	4603      	mov	r3, r0
 8008186:	2280      	movs	r2, #128	; 0x80
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f959 	bl	8009440 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7959      	ldrb	r1, [r3, #5]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081a2:	b292      	uxth	r2, r2
 80081a4:	9202      	str	r2, [sp, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	2200      	movs	r2, #0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f945 	bl	8009440 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081b6:	e12a      	b.n	800840e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	f040 8127 	bne.w	800840e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	220d      	movs	r2, #13
 80081c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	705a      	strb	r2, [r3, #1]
      break;
 80081cc:	e11f      	b.n	800840e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081ce:	2109      	movs	r1, #9
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fa37 	bl	8008644 <USBH_Get_CfgDesc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081e6:	e114      	b.n	8008412 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	f040 8111 	bne.w	8008412 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f6:	3301      	adds	r3, #1
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008206:	2b03      	cmp	r3, #3
 8008208:	d903      	bls.n	8008212 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220d      	movs	r2, #13
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e0ff      	b.n	8008412 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	795b      	ldrb	r3, [r3, #5]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f961 	bl	80094e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	791b      	ldrb	r3, [r3, #4]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f95b 	bl	80094e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
      break;
 8008236:	e0ec      	b.n	8008412 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f9ff 	bl	8008644 <USBH_Get_CfgDesc>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2205      	movs	r2, #5
 8008254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008256:	e0de      	b.n	8008416 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b03      	cmp	r3, #3
 800825c:	f040 80db 	bne.w	8008416 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008266:	3301      	adds	r3, #1
 8008268:	b2da      	uxtb	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008276:	2b03      	cmp	r3, #3
 8008278:	d903      	bls.n	8008282 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220d      	movs	r2, #13
 800827e:	701a      	strb	r2, [r3, #0]
      break;
 8008280:	e0c9      	b.n	8008416 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	795b      	ldrb	r3, [r3, #5]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f929 	bl	80094e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	791b      	ldrb	r3, [r3, #4]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f923 	bl	80094e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	e0b6      	b.n	8008416 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d036      	beq.n	8008320 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082be:	23ff      	movs	r3, #255	; 0xff
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9e3 	bl	800868c <USBH_Get_StringDesc>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d111      	bne.n	80082f4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2206      	movs	r2, #6
 80082d4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2205      	movs	r2, #5
 80082da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082ea:	2200      	movs	r2, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	f001 f9f3 	bl	80096d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082f2:	e092      	b.n	800841a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	f040 808f 	bne.w	800841a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2206      	movs	r2, #6
 8008300:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2205      	movs	r2, #5
 8008306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008316:	2200      	movs	r2, #0
 8008318:	4619      	mov	r1, r3
 800831a:	f001 f9dd 	bl	80096d8 <osMessagePut>
      break;
 800831e:	e07c      	b.n	800841a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2206      	movs	r2, #6
 8008324:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2205      	movs	r2, #5
 800832a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800833a:	2200      	movs	r2, #0
 800833c:	4619      	mov	r1, r3
 800833e:	f001 f9cb 	bl	80096d8 <osMessagePut>
      break;
 8008342:	e06a      	b.n	800841a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800834a:	2b00      	cmp	r3, #0
 800834c:	d027      	beq.n	800839e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800835a:	23ff      	movs	r3, #255	; 0xff
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f995 	bl	800868c <USBH_Get_StringDesc>
 8008362:	4603      	mov	r3, r0
 8008364:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d103      	bne.n	8008374 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2207      	movs	r2, #7
 8008370:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008372:	e054      	b.n	800841e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d151      	bne.n	800841e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2207      	movs	r2, #7
 800837e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2205      	movs	r2, #5
 8008384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008394:	2200      	movs	r2, #0
 8008396:	4619      	mov	r1, r3
 8008398:	f001 f99e 	bl	80096d8 <osMessagePut>
      break;
 800839c:	e03f      	b.n	800841e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2207      	movs	r2, #7
 80083a2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2205      	movs	r2, #5
 80083a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083b8:	2200      	movs	r2, #0
 80083ba:	4619      	mov	r1, r3
 80083bc:	f001 f98c 	bl	80096d8 <osMessagePut>
      break;
 80083c0:	e02d      	b.n	800841e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d017      	beq.n	80083fc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083d8:	23ff      	movs	r3, #255	; 0xff
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f956 	bl	800868c <USBH_Get_StringDesc>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083ee:	e018      	b.n	8008422 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d115      	bne.n	8008422 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
      break;
 80083fa:	e012      	b.n	8008422 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008400:	e00f      	b.n	8008422 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008402:	bf00      	nop
 8008404:	e00e      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 8008406:	bf00      	nop
 8008408:	e00c      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 800840a:	bf00      	nop
 800840c:	e00a      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 800840e:	bf00      	nop
 8008410:	e008      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 8008412:	bf00      	nop
 8008414:	e006      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 8008416:	bf00      	nop
 8008418:	e004      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 800841a:	bf00      	nop
 800841c:	e002      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 800841e:	bf00      	nop
 8008420:	e000      	b.n	8008424 <USBH_HandleEnum+0x44c>
      break;
 8008422:	bf00      	nop
  }
  return Status;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop

08008430 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f804 	bl	8008472 <USBH_HandleSof>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b0b      	cmp	r3, #11
 8008482:	d10a      	bne.n	800849a <USBH_HandleSof+0x28>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
  }
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084c6:	2200      	movs	r2, #0
 80084c8:	4619      	mov	r1, r3
 80084ca:	f001 f905 	bl	80096d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084ce:	bf00      	nop
}
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80084e6:	bf00      	nop
}
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008526:	2200      	movs	r2, #0
 8008528:	4619      	mov	r1, r3
 800852a:	f001 f8d5 	bl	80096d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f003 fc0e 	bl	800bd7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	791b      	ldrb	r3, [r3, #4]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 ffbb 	bl	80094e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 ffb5 	bl	80094e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800858a:	2200      	movs	r2, #0
 800858c:	4619      	mov	r1, r3
 800858e:	f001 f8a3 	bl	80096d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80085aa:	f107 030c 	add.w	r3, r7, #12
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 f8d0 	bl	8009758 <osMessageGet>
    if (event.status == osEventMessage)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b10      	cmp	r3, #16
 80085bc:	d1f2      	bne.n	80085a4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff fa9e 	bl	8007b00 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80085c4:	e7ee      	b.n	80085a4 <USBH_Process_OS+0x8>

080085c6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085e2:	2200      	movs	r2, #0
 80085e4:	4619      	mov	r1, r3
 80085e6:	f001 f877 	bl	80096d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	b29b      	uxth	r3, r3
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008612:	2100      	movs	r1, #0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f864 	bl	80086e2 <USBH_GetDescriptor>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 3026 	addw	r0, r3, #806	; 0x326
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	b292      	uxth	r2, r2
 8008634:	4619      	mov	r1, r3
 8008636:	f000 f918 	bl	800886a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af02      	add	r7, sp, #8
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	331c      	adds	r3, #28
 8008654:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008656:	887b      	ldrh	r3, [r7, #2]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008660:	2100      	movs	r1, #0
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f83d 	bl	80086e2 <USBH_GetDescriptor>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d107      	bne.n	8008682 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008672:	887b      	ldrh	r3, [r7, #2]
 8008674:	461a      	mov	r2, r3
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f987 	bl	800898c <USBH_ParseCfgDesc>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	461a      	mov	r2, r3
 8008698:	460b      	mov	r3, r1
 800869a:	72fb      	strb	r3, [r7, #11]
 800869c:	4613      	mov	r3, r2
 800869e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086a8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086b0:	893b      	ldrh	r3, [r7, #8]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	460b      	mov	r3, r1
 80086b6:	2100      	movs	r1, #0
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f812 	bl	80086e2 <USBH_GetDescriptor>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d107      	bne.n	80086d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086ce:	893a      	ldrh	r2, [r7, #8]
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fb24 	bl	8008d20 <USBH_ParseStringDesc>
  }

  return status;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	72fb      	strb	r3, [r7, #11]
 80086f0:	4613      	mov	r3, r2
 80086f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	789b      	ldrb	r3, [r3, #2]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d11c      	bne.n	8008736 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008702:	b2da      	uxtb	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2206      	movs	r2, #6
 800870c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	893a      	ldrh	r2, [r7, #8]
 8008712:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008714:	893b      	ldrh	r3, [r7, #8]
 8008716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800871a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800871e:	d104      	bne.n	800872a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f240 4209 	movw	r2, #1033	; 0x409
 8008726:	829a      	strh	r2, [r3, #20]
 8008728:	e002      	b.n	8008730 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8b3a      	ldrh	r2, [r7, #24]
 8008734:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008736:	8b3b      	ldrh	r3, [r7, #24]
 8008738:	461a      	mov	r2, r3
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fb3d 	bl	8008dbc <USBH_CtlReq>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	789b      	ldrb	r3, [r3, #2]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10f      	bne.n	8008780 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2205      	movs	r2, #5
 800876a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008780:	2200      	movs	r2, #0
 8008782:	2100      	movs	r1, #0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb19 	bl	8008dbc <USBH_CtlReq>
 800878a:	4603      	mov	r3, r0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	789b      	ldrb	r3, [r3, #2]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10e      	bne.n	80087c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2209      	movs	r2, #9
 80087b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	887a      	ldrh	r2, [r7, #2]
 80087b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 faf6 	bl	8008dbc <USBH_CtlReq>
 80087d0:	4603      	mov	r3, r0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	789b      	ldrb	r3, [r3, #2]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d10f      	bne.n	800880e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2203      	movs	r2, #3
 80087f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fad2 	bl	8008dbc <USBH_CtlReq>
 8008818:	4603      	mov	r3, r0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	789b      	ldrb	r3, [r3, #2]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10f      	bne.n	8008856 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2202      	movs	r2, #2
 800883a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 faae 	bl	8008dbc <USBH_CtlReq>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	4613      	mov	r3, r2
 8008876:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	785a      	ldrb	r2, [r3, #1]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	3302      	adds	r3, #2
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3303      	adds	r3, #3
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	b29b      	uxth	r3, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	791a      	ldrb	r2, [r3, #4]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	795a      	ldrb	r2, [r3, #5]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	799a      	ldrb	r2, [r3, #6]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	79da      	ldrb	r2, [r3, #7]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	79db      	ldrb	r3, [r3, #7]
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	dc11      	bgt.n	80088f0 <USBH_ParseDevDesc+0x86>
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	db16      	blt.n	80088fe <USBH_ParseDevDesc+0x94>
 80088d0:	3b08      	subs	r3, #8
 80088d2:	2201      	movs	r2, #1
 80088d4:	fa02 f303 	lsl.w	r3, r2, r3
 80088d8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80088dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bf14      	ite	ne
 80088e4:	2301      	movne	r3, #1
 80088e6:	2300      	moveq	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <USBH_ParseDevDesc+0x8a>
 80088ee:	e006      	b.n	80088fe <USBH_ParseDevDesc+0x94>
 80088f0:	2b40      	cmp	r3, #64	; 0x40
 80088f2:	d104      	bne.n	80088fe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	79da      	ldrb	r2, [r3, #7]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	71da      	strb	r2, [r3, #7]
      break;
 80088fc:	e003      	b.n	8008906 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2240      	movs	r2, #64	; 0x40
 8008902:	71da      	strb	r2, [r3, #7]
      break;
 8008904:	bf00      	nop
  }

  if (length > 8U)
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d939      	bls.n	8008980 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3308      	adds	r3, #8
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	b29a      	uxth	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3309      	adds	r3, #9
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	b29b      	uxth	r3, r3
 8008920:	4313      	orrs	r3, r2
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	330a      	adds	r3, #10
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b29a      	uxth	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	330b      	adds	r3, #11
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	b29b      	uxth	r3, r3
 800893c:	4313      	orrs	r3, r2
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	330c      	adds	r3, #12
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b29a      	uxth	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	330d      	adds	r3, #13
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	4313      	orrs	r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7b9a      	ldrb	r2, [r3, #14]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7bda      	ldrb	r2, [r3, #15]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	7c1a      	ldrb	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7c5a      	ldrb	r2, [r3, #17]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	745a      	strb	r2, [r3, #17]
  }
}
 8008980:	bf00      	nop
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4613      	mov	r3, r2
 8008998:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	781a      	ldrb	r2, [r3, #0]
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785a      	ldrb	r2, [r3, #1]
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3302      	adds	r3, #2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3303      	adds	r3, #3
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e8:	bf28      	it	cs
 80089ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	791a      	ldrb	r2, [r3, #4]
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	795a      	ldrb	r2, [r3, #5]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	799a      	ldrb	r2, [r3, #6]
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	79da      	ldrb	r2, [r3, #7]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	7a1a      	ldrb	r2, [r3, #8]
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b09      	cmp	r3, #9
 8008a22:	d002      	beq.n	8008a2a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	2209      	movs	r2, #9
 8008a28:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	f240 809d 	bls.w	8008b6c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a32:	2309      	movs	r3, #9
 8008a34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a3a:	e081      	b.n	8008b40 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a3c:	f107 0316 	add.w	r3, r7, #22
 8008a40:	4619      	mov	r1, r3
 8008a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a44:	f000 f99f 	bl	8008d86 <USBH_GetNextDesc>
 8008a48:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d176      	bne.n	8008b40 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b09      	cmp	r3, #9
 8008a58:	d002      	beq.n	8008a60 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5c:	2209      	movs	r2, #9
 8008a5e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a64:	221a      	movs	r2, #26
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	6a3a      	ldr	r2, [r7, #32]
 8008a6e:	4413      	add	r3, r2
 8008a70:	3302      	adds	r3, #2
 8008a72:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	69f8      	ldr	r0, [r7, #28]
 8008a78:	f000 f87e 	bl	8008b78 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a86:	e043      	b.n	8008b10 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a88:	f107 0316 	add.w	r3, r7, #22
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a90:	f000 f979 	bl	8008d86 <USBH_GetNextDesc>
 8008a94:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d138      	bne.n	8008b10 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	795b      	ldrb	r3, [r3, #5]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10f      	bne.n	8008ac6 <USBH_ParseCfgDesc+0x13a>
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	799b      	ldrb	r3, [r3, #6]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d10b      	bne.n	8008ac6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	79db      	ldrb	r3, [r3, #7]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10f      	bne.n	8008ad6 <USBH_ParseCfgDesc+0x14a>
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d00b      	beq.n	8008ad6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	2209      	movs	r2, #9
 8008ac2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ac4:	e007      	b.n	8008ad6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b07      	cmp	r3, #7
 8008acc:	d004      	beq.n	8008ad8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e000      	b.n	8008ad8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008adc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	00d2      	lsls	r2, r2, #3
 8008ae4:	211a      	movs	r1, #26
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3308      	adds	r3, #8
 8008aee:	6a3a      	ldr	r2, [r7, #32]
 8008af0:	4413      	add	r3, r2
 8008af2:	3304      	adds	r3, #4
 8008af4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f86b 	bl	8008bd6 <USBH_ParseEPDesc>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d204      	bcs.n	8008b26 <USBH_ParseCfgDesc+0x19a>
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	885a      	ldrh	r2, [r3, #2]
 8008b20:	8afb      	ldrh	r3, [r7, #22]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d8b0      	bhi.n	8008a88 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	791b      	ldrb	r3, [r3, #4]
 8008b2a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d201      	bcs.n	8008b36 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e01c      	b.n	8008b70 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d805      	bhi.n	8008b54 <USBH_ParseCfgDesc+0x1c8>
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	885a      	ldrh	r2, [r3, #2]
 8008b4c:	8afb      	ldrh	r3, [r7, #22]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f63f af74 	bhi.w	8008a3c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	791b      	ldrb	r3, [r3, #4]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	bf28      	it	cs
 8008b5c:	2302      	movcs	r3, #2
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d201      	bcs.n	8008b6c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e001      	b.n	8008b70 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3730      	adds	r7, #48	; 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	785a      	ldrb	r2, [r3, #1]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	789a      	ldrb	r2, [r3, #2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	78da      	ldrb	r2, [r3, #3]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	791a      	ldrb	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	795a      	ldrb	r2, [r3, #5]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	799a      	ldrb	r2, [r3, #6]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	79da      	ldrb	r2, [r3, #7]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	7a1a      	ldrb	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	721a      	strb	r2, [r3, #8]
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b087      	sub	sp, #28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	781a      	ldrb	r2, [r3, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	785a      	ldrb	r2, [r3, #1]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	789a      	ldrb	r2, [r3, #2]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	78da      	ldrb	r2, [r3, #3]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3305      	adds	r3, #5
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	799a      	ldrb	r2, [r3, #6]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	889b      	ldrh	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008c32:	2303      	movs	r3, #3
 8008c34:	75fb      	strb	r3, [r7, #23]
 8008c36:	e033      	b.n	8008ca0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	889b      	ldrh	r3, [r3, #4]
 8008c3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c40:	f023 0307 	bic.w	r3, r3, #7
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	b21a      	sxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b299      	uxth	r1, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3305      	adds	r3, #5
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	430b      	orrs	r3, r1
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d110      	bne.n	8008c92 <USBH_ParseEPDesc+0xbc>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3304      	adds	r3, #4
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b299      	uxth	r1, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3305      	adds	r3, #5
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	430b      	orrs	r3, r1
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	b21b      	sxth	r3, r3
 8008c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c8e:	b21b      	sxth	r3, r3
 8008c90:	e001      	b.n	8008c96 <USBH_ParseEPDesc+0xc0>
 8008c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c96:	4313      	orrs	r3, r2
 8008c98:	b21b      	sxth	r3, r3
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d116      	bne.n	8008cd8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	78db      	ldrb	r3, [r3, #3]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d005      	beq.n	8008cc2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	78db      	ldrb	r3, [r3, #3]
 8008cba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d127      	bne.n	8008d12 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	799b      	ldrb	r3, [r3, #6]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <USBH_ParseEPDesc+0xfc>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	799b      	ldrb	r3, [r3, #6]
 8008cce:	2b10      	cmp	r3, #16
 8008cd0:	d91f      	bls.n	8008d12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	75fb      	strb	r3, [r7, #23]
 8008cd6:	e01c      	b.n	8008d12 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10a      	bne.n	8008cfa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	799b      	ldrb	r3, [r3, #6]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <USBH_ParseEPDesc+0x11e>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	799b      	ldrb	r3, [r3, #6]
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	d90e      	bls.n	8008d12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	75fb      	strb	r3, [r7, #23]
 8008cf8:	e00b      	b.n	8008d12 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	78db      	ldrb	r3, [r3, #3]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d105      	bne.n	8008d12 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	799b      	ldrb	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d120      	bne.n	8008d7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	1e9a      	subs	r2, r3, #2
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bf28      	it	cs
 8008d44:	4613      	movcs	r3, r2
 8008d46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	82fb      	strh	r3, [r7, #22]
 8008d52:	e00b      	b.n	8008d6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d54:	8afb      	ldrh	r3, [r7, #22]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3301      	adds	r3, #1
 8008d64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d66:	8afb      	ldrh	r3, [r7, #22]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	82fb      	strh	r3, [r7, #22]
 8008d6c:	8afa      	ldrh	r2, [r7, #22]
 8008d6e:	8abb      	ldrh	r3, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d3ef      	bcc.n	8008d54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	881a      	ldrh	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dae:	68fb      	ldr	r3, [r7, #12]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	789b      	ldrb	r3, [r3, #2]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d002      	beq.n	8008ddc <USBH_CtlReq+0x20>
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d01d      	beq.n	8008e16 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008dda:	e043      	b.n	8008e64 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2202      	movs	r2, #2
 8008df2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f000 fc62 	bl	80096d8 <osMessagePut>
      break;
 8008e14:	e026      	b.n	8008e64 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f82a 	bl	8008e70 <USBH_HandleControl>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <USBH_CtlReq+0x70>
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d106      	bne.n	8008e3a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	761a      	strb	r2, [r3, #24]
 8008e38:	e005      	b.n	8008e46 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d102      	bne.n	8008e46 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2203      	movs	r2, #3
 8008e4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f000 fc3b 	bl	80096d8 <osMessagePut>
      break;
 8008e62:	bf00      	nop
  }
  return status;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7e1b      	ldrb	r3, [r3, #24]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	2b0a      	cmp	r3, #10
 8008e88:	f200 8229 	bhi.w	80092de <USBH_HandleControl+0x46e>
 8008e8c:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <USBH_HandleControl+0x24>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008ec1 	.word	0x08008ec1
 8008e98:	08008edb 	.word	0x08008edb
 8008e9c:	08008f7d 	.word	0x08008f7d
 8008ea0:	08008fa3 	.word	0x08008fa3
 8008ea4:	0800902f 	.word	0x0800902f
 8008ea8:	08009059 	.word	0x08009059
 8008eac:	0800911b 	.word	0x0800911b
 8008eb0:	0800913d 	.word	0x0800913d
 8008eb4:	080091cf 	.word	0x080091cf
 8008eb8:	080091f5 	.word	0x080091f5
 8008ebc:	08009287 	.word	0x08009287
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f103 0110 	add.w	r1, r3, #16
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	795b      	ldrb	r3, [r3, #5]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fa17 	bl	8009300 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	761a      	strb	r2, [r3, #24]
      break;
 8008ed8:	e20c      	b.n	80092f4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	795b      	ldrb	r3, [r3, #5]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f003 f839 	bl	800bf58 <USBH_LL_GetURBState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d12c      	bne.n	8008f4a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7c1b      	ldrb	r3, [r3, #16]
 8008ef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ef8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8adb      	ldrh	r3, [r3, #22]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f02:	7b7b      	ldrb	r3, [r7, #13]
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d103      	bne.n	8008f10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	761a      	strb	r2, [r3, #24]
 8008f0e:	e00d      	b.n	8008f2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2205      	movs	r2, #5
 8008f14:	761a      	strb	r2, [r3, #24]
 8008f16:	e009      	b.n	8008f2c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008f18:	7b7b      	ldrb	r3, [r7, #13]
 8008f1a:	2b80      	cmp	r3, #128	; 0x80
 8008f1c:	d103      	bne.n	8008f26 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2209      	movs	r2, #9
 8008f22:	761a      	strb	r2, [r3, #24]
 8008f24:	e002      	b.n	8008f2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2207      	movs	r2, #7
 8008f2a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2203      	movs	r2, #3
 8008f30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f40:	2200      	movs	r2, #0
 8008f42:	4619      	mov	r1, r3
 8008f44:	f000 fbc8 	bl	80096d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f48:	e1cb      	b.n	80092e2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d003      	beq.n	8008f58 <USBH_HandleControl+0xe8>
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	f040 81c5 	bne.w	80092e2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	220b      	movs	r2, #11
 8008f5c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f72:	2200      	movs	r2, #0
 8008f74:	4619      	mov	r1, r3
 8008f76:	f000 fbaf 	bl	80096d8 <osMessagePut>
      break;
 8008f7a:	e1b2      	b.n	80092e2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6899      	ldr	r1, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	899a      	ldrh	r2, [r3, #12]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	791b      	ldrb	r3, [r3, #4]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9f2 	bl	800937e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	761a      	strb	r2, [r3, #24]
      break;
 8008fa0:	e1a8      	b.n	80092f4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	791b      	ldrb	r3, [r3, #4]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f002 ffd5 	bl	800bf58 <USBH_LL_GetURBState>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d110      	bne.n	8008fda <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2209      	movs	r2, #9
 8008fbc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f000 fb7f 	bl	80096d8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b05      	cmp	r3, #5
 8008fde:	d110      	bne.n	8009002 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f000 fb6c 	bl	80096d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009000:	e171      	b.n	80092e6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b04      	cmp	r3, #4
 8009006:	f040 816e 	bne.w	80092e6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	220b      	movs	r2, #11
 800900e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2203      	movs	r2, #3
 8009014:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009024:	2200      	movs	r2, #0
 8009026:	4619      	mov	r1, r3
 8009028:	f000 fb56 	bl	80096d8 <osMessagePut>
      break;
 800902c:	e15b      	b.n	80092e6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6899      	ldr	r1, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	899a      	ldrh	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	795b      	ldrb	r3, [r3, #5]
 800903a:	2001      	movs	r0, #1
 800903c:	9000      	str	r0, [sp, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f978 	bl	8009334 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800904a:	b29a      	uxth	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2206      	movs	r2, #6
 8009054:	761a      	strb	r2, [r3, #24]
      break;
 8009056:	e14d      	b.n	80092f4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	795b      	ldrb	r3, [r3, #5]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f002 ff7a 	bl	800bf58 <USBH_LL_GetURBState>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d111      	bne.n	8009092 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2207      	movs	r2, #7
 8009072:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2203      	movs	r2, #3
 8009078:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009088:	2200      	movs	r2, #0
 800908a:	4619      	mov	r1, r3
 800908c:	f000 fb24 	bl	80096d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009090:	e12b      	b.n	80092ea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b05      	cmp	r3, #5
 8009096:	d113      	bne.n	80090c0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	220c      	movs	r2, #12
 800909c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800909e:	2303      	movs	r3, #3
 80090a0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2203      	movs	r2, #3
 80090a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090b6:	2200      	movs	r2, #0
 80090b8:	4619      	mov	r1, r3
 80090ba:	f000 fb0d 	bl	80096d8 <osMessagePut>
      break;
 80090be:	e114      	b.n	80092ea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d111      	bne.n	80090ea <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2205      	movs	r2, #5
 80090ca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2203      	movs	r2, #3
 80090d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090e0:	2200      	movs	r2, #0
 80090e2:	4619      	mov	r1, r3
 80090e4:	f000 faf8 	bl	80096d8 <osMessagePut>
      break;
 80090e8:	e0ff      	b.n	80092ea <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	f040 80fc 	bne.w	80092ea <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220b      	movs	r2, #11
 80090f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090f8:	2302      	movs	r3, #2
 80090fa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2203      	movs	r2, #3
 8009100:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009110:	2200      	movs	r2, #0
 8009112:	4619      	mov	r1, r3
 8009114:	f000 fae0 	bl	80096d8 <osMessagePut>
      break;
 8009118:	e0e7      	b.n	80092ea <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	791b      	ldrb	r3, [r3, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	2100      	movs	r1, #0
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f92b 	bl	800937e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2208      	movs	r2, #8
 8009138:	761a      	strb	r2, [r3, #24]

      break;
 800913a:	e0db      	b.n	80092f4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	791b      	ldrb	r3, [r3, #4]
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f002 ff08 	bl	800bf58 <USBH_LL_GetURBState>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d113      	bne.n	800917a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	220d      	movs	r2, #13
 8009156:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2203      	movs	r2, #3
 8009160:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009170:	2200      	movs	r2, #0
 8009172:	4619      	mov	r1, r3
 8009174:	f000 fab0 	bl	80096d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009178:	e0b9      	b.n	80092ee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b04      	cmp	r3, #4
 800917e:	d111      	bne.n	80091a4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	220b      	movs	r2, #11
 8009184:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2203      	movs	r2, #3
 800918a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800919a:	2200      	movs	r2, #0
 800919c:	4619      	mov	r1, r3
 800919e:	f000 fa9b 	bl	80096d8 <osMessagePut>
      break;
 80091a2:	e0a4      	b.n	80092ee <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	f040 80a1 	bne.w	80092ee <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80091ac:	2303      	movs	r3, #3
 80091ae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2203      	movs	r2, #3
 80091b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091c4:	2200      	movs	r2, #0
 80091c6:	4619      	mov	r1, r3
 80091c8:	f000 fa86 	bl	80096d8 <osMessagePut>
      break;
 80091cc:	e08f      	b.n	80092ee <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	795b      	ldrb	r3, [r3, #5]
 80091d2:	2201      	movs	r2, #1
 80091d4:	9200      	str	r2, [sp, #0]
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8aa 	bl	8009334 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	220a      	movs	r2, #10
 80091f0:	761a      	strb	r2, [r3, #24]
      break;
 80091f2:	e07f      	b.n	80092f4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	795b      	ldrb	r3, [r3, #5]
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f002 feac 	bl	800bf58 <USBH_LL_GetURBState>
 8009200:	4603      	mov	r3, r0
 8009202:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d113      	bne.n	8009232 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	220d      	movs	r2, #13
 8009212:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2203      	movs	r2, #3
 8009218:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009228:	2200      	movs	r2, #0
 800922a:	4619      	mov	r1, r3
 800922c:	f000 fa54 	bl	80096d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009230:	e05f      	b.n	80092f2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d111      	bne.n	800925c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2209      	movs	r2, #9
 800923c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2203      	movs	r2, #3
 8009242:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009252:	2200      	movs	r2, #0
 8009254:	4619      	mov	r1, r3
 8009256:	f000 fa3f 	bl	80096d8 <osMessagePut>
      break;
 800925a:	e04a      	b.n	80092f2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b04      	cmp	r3, #4
 8009260:	d147      	bne.n	80092f2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	220b      	movs	r2, #11
 8009266:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2203      	movs	r2, #3
 800926c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800927c:	2200      	movs	r2, #0
 800927e:	4619      	mov	r1, r3
 8009280:	f000 fa2a 	bl	80096d8 <osMessagePut>
      break;
 8009284:	e035      	b.n	80092f2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7e5b      	ldrb	r3, [r3, #25]
 800928a:	3301      	adds	r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	765a      	strb	r2, [r3, #25]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	7e5b      	ldrb	r3, [r3, #25]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d806      	bhi.n	80092a8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092a6:	e025      	b.n	80092f4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ae:	2106      	movs	r1, #6
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	795b      	ldrb	r3, [r3, #5]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f90d 	bl	80094e0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	791b      	ldrb	r3, [r3, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f907 	bl	80094e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	73fb      	strb	r3, [r7, #15]
      break;
 80092dc:	e00a      	b.n	80092f4 <USBH_HandleControl+0x484>

    default:
      break;
 80092de:	bf00      	nop
 80092e0:	e008      	b.n	80092f4 <USBH_HandleControl+0x484>
      break;
 80092e2:	bf00      	nop
 80092e4:	e006      	b.n	80092f4 <USBH_HandleControl+0x484>
      break;
 80092e6:	bf00      	nop
 80092e8:	e004      	b.n	80092f4 <USBH_HandleControl+0x484>
      break;
 80092ea:	bf00      	nop
 80092ec:	e002      	b.n	80092f4 <USBH_HandleControl+0x484>
      break;
 80092ee:	bf00      	nop
 80092f0:	e000      	b.n	80092f4 <USBH_HandleControl+0x484>
      break;
 80092f2:	bf00      	nop
  }

  return status;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop

08009300 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af04      	add	r7, sp, #16
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800930e:	79f9      	ldrb	r1, [r7, #7]
 8009310:	2300      	movs	r3, #0
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	2308      	movs	r3, #8
 8009316:	9302      	str	r3, [sp, #8]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2300      	movs	r3, #0
 8009322:	2200      	movs	r2, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f002 fde6 	bl	800bef6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af04      	add	r7, sp, #16
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4611      	mov	r1, r2
 8009340:	461a      	mov	r2, r3
 8009342:	460b      	mov	r3, r1
 8009344:	80fb      	strh	r3, [r7, #6]
 8009346:	4613      	mov	r3, r2
 8009348:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009358:	7979      	ldrb	r1, [r7, #5]
 800935a:	7e3b      	ldrb	r3, [r7, #24]
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	88fb      	ldrh	r3, [r7, #6]
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	2301      	movs	r3, #1
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	2300      	movs	r3, #0
 800936c:	2200      	movs	r2, #0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f002 fdc1 	bl	800bef6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b088      	sub	sp, #32
 8009382:	af04      	add	r7, sp, #16
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	4611      	mov	r1, r2
 800938a:	461a      	mov	r2, r3
 800938c:	460b      	mov	r3, r1
 800938e:	80fb      	strh	r3, [r7, #6]
 8009390:	4613      	mov	r3, r2
 8009392:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009394:	7979      	ldrb	r1, [r7, #5]
 8009396:	2300      	movs	r3, #0
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	9302      	str	r3, [sp, #8]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2301      	movs	r3, #1
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	2201      	movs	r2, #1
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f002 fda3 	bl	800bef6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093b0:	2300      	movs	r3, #0

}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b088      	sub	sp, #32
 80093be:	af04      	add	r7, sp, #16
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4611      	mov	r1, r2
 80093c6:	461a      	mov	r2, r3
 80093c8:	460b      	mov	r3, r1
 80093ca:	80fb      	strh	r3, [r7, #6]
 80093cc:	4613      	mov	r3, r2
 80093ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093de:	7979      	ldrb	r1, [r7, #5]
 80093e0:	7e3b      	ldrb	r3, [r7, #24]
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	2301      	movs	r3, #1
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	2302      	movs	r3, #2
 80093f2:	2200      	movs	r2, #0
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f002 fd7e 	bl	800bef6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af04      	add	r7, sp, #16
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4611      	mov	r1, r2
 8009410:	461a      	mov	r2, r3
 8009412:	460b      	mov	r3, r1
 8009414:	80fb      	strh	r3, [r7, #6]
 8009416:	4613      	mov	r3, r2
 8009418:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800941a:	7979      	ldrb	r1, [r7, #5]
 800941c:	2300      	movs	r3, #0
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	9302      	str	r3, [sp, #8]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	2301      	movs	r3, #1
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2302      	movs	r3, #2
 800942e:	2201      	movs	r2, #1
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f002 fd60 	bl	800bef6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af04      	add	r7, sp, #16
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	4608      	mov	r0, r1
 800944a:	4611      	mov	r1, r2
 800944c:	461a      	mov	r2, r3
 800944e:	4603      	mov	r3, r0
 8009450:	70fb      	strb	r3, [r7, #3]
 8009452:	460b      	mov	r3, r1
 8009454:	70bb      	strb	r3, [r7, #2]
 8009456:	4613      	mov	r3, r2
 8009458:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800945a:	7878      	ldrb	r0, [r7, #1]
 800945c:	78ba      	ldrb	r2, [r7, #2]
 800945e:	78f9      	ldrb	r1, [r7, #3]
 8009460:	8b3b      	ldrh	r3, [r7, #24]
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	7d3b      	ldrb	r3, [r7, #20]
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	7c3b      	ldrb	r3, [r7, #16]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4603      	mov	r3, r0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f002 fcf3 	bl	800be5a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f002 fd12 	bl	800beb8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f836 	bl	800951c <USBH_GetFreePipe>
 80094b0:	4603      	mov	r3, r0
 80094b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094b4:	89fb      	ldrh	r3, [r7, #14]
 80094b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00a      	beq.n	80094d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	89fb      	ldrh	r3, [r7, #14]
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	33e0      	adds	r3, #224	; 0xe0
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094d4:	89fb      	ldrh	r3, [r7, #14]
 80094d6:	b2db      	uxtb	r3, r3
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	2b0f      	cmp	r3, #15
 80094f0:	d80d      	bhi.n	800950e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	33e0      	adds	r3, #224	; 0xe0
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	33e0      	adds	r3, #224	; 0xe0
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e00f      	b.n	800954e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	33e0      	adds	r3, #224	; 0xe0
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	b29b      	uxth	r3, r3
 8009546:	e007      	b.n	8009558 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	3301      	adds	r3, #1
 800954c:	73fb      	strb	r3, [r7, #15]
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b0f      	cmp	r3, #15
 8009552:	d9ec      	bls.n	800952e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009554:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009576:	2b84      	cmp	r3, #132	; 0x84
 8009578:	d005      	beq.n	8009586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800957a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	3303      	adds	r3, #3
 8009584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009586:	68fb      	ldr	r3, [r7, #12]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959a:	f3ef 8305 	mrs	r3, IPSR
 800959e:	607b      	str	r3, [r7, #4]
  return(result);
 80095a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bf14      	ite	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	2300      	moveq	r3, #0
 80095aa:	b2db      	uxtb	r3, r3
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80095bc:	f001 f90a 	bl	800a7d4 <vTaskStartScheduler>
  
  return osOK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80095c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c8:	b089      	sub	sp, #36	; 0x24
 80095ca:	af04      	add	r7, sp, #16
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d020      	beq.n	800961a <osThreadCreate+0x54>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01c      	beq.n	800961a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685c      	ldr	r4, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681d      	ldr	r5, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691e      	ldr	r6, [r3, #16]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ffb6 	bl	8009564 <makeFreeRtosPriority>
 80095f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009602:	9202      	str	r2, [sp, #8]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	9100      	str	r1, [sp, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	4632      	mov	r2, r6
 800960c:	4629      	mov	r1, r5
 800960e:	4620      	mov	r0, r4
 8009610:	f000 ff0e 	bl	800a430 <xTaskCreateStatic>
 8009614:	4603      	mov	r3, r0
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e01c      	b.n	8009654 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685c      	ldr	r4, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009626:	b29e      	uxth	r6, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ff98 	bl	8009564 <makeFreeRtosPriority>
 8009634:	4602      	mov	r2, r0
 8009636:	f107 030c 	add.w	r3, r7, #12
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	9200      	str	r2, [sp, #0]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	4632      	mov	r2, r6
 8009642:	4629      	mov	r1, r5
 8009644:	4620      	mov	r0, r4
 8009646:	f000 ff50 	bl	800a4ea <xTaskCreate>
 800964a:	4603      	mov	r3, r0
 800964c:	2b01      	cmp	r3, #1
 800964e:	d001      	beq.n	8009654 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	e000      	b.n	8009656 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009654:	68fb      	ldr	r3, [r7, #12]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800965e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <osDelay+0x16>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	e000      	b.n	8009676 <osDelay+0x18>
 8009674:	2301      	movs	r3, #1
 8009676:	4618      	mov	r0, r3
 8009678:	f001 f878 	bl	800a76c <vTaskDelay>
  
  return osOK;
 800967c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009686:	b590      	push	{r4, r7, lr}
 8009688:	b085      	sub	sp, #20
 800968a:	af02      	add	r7, sp, #8
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d011      	beq.n	80096bc <osMessageCreate+0x36>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00d      	beq.n	80096bc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6859      	ldr	r1, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2400      	movs	r4, #0
 80096b2:	9400      	str	r4, [sp, #0]
 80096b4:	f000 f9e0 	bl	8009a78 <xQueueGenericCreateStatic>
 80096b8:	4603      	mov	r3, r0
 80096ba:	e008      	b.n	80096ce <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	4619      	mov	r1, r3
 80096c8:	f000 fa4e 	bl	8009b68 <xQueueGenericCreate>
 80096cc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd90      	pop	{r4, r7, pc}
	...

080096d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <osMessagePut+0x1e>
    ticks = 1;
 80096f2:	2301      	movs	r3, #1
 80096f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80096f6:	f7ff ff4d 	bl	8009594 <inHandlerMode>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d018      	beq.n	8009732 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009700:	f107 0210 	add.w	r2, r7, #16
 8009704:	f107 0108 	add.w	r1, r7, #8
 8009708:	2300      	movs	r3, #0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fb84 	bl	8009e18 <xQueueGenericSendFromISR>
 8009710:	4603      	mov	r3, r0
 8009712:	2b01      	cmp	r3, #1
 8009714:	d001      	beq.n	800971a <osMessagePut+0x42>
      return osErrorOS;
 8009716:	23ff      	movs	r3, #255	; 0xff
 8009718:	e018      	b.n	800974c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d014      	beq.n	800974a <osMessagePut+0x72>
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <osMessagePut+0x7c>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	e00b      	b.n	800974a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009732:	f107 0108 	add.w	r1, r7, #8
 8009736:	2300      	movs	r3, #0
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fa6e 	bl	8009c1c <xQueueGenericSend>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d001      	beq.n	800974a <osMessagePut+0x72>
      return osErrorOS;
 8009746:	23ff      	movs	r3, #255	; 0xff
 8009748:	e000      	b.n	800974c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009758:	b590      	push	{r4, r7, lr}
 800975a:	b08b      	sub	sp, #44	; 0x2c
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009772:	2380      	movs	r3, #128	; 0x80
 8009774:	617b      	str	r3, [r7, #20]
    return event;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	461c      	mov	r4, r3
 800977a:	f107 0314 	add.w	r3, r7, #20
 800977e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009786:	e054      	b.n	8009832 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009796:	d103      	bne.n	80097a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009798:	f04f 33ff 	mov.w	r3, #4294967295
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e009      	b.n	80097b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <osMessageGet+0x5c>
      ticks = 1;
 80097b0:	2301      	movs	r3, #1
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80097b4:	f7ff feee 	bl	8009594 <inHandlerMode>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01c      	beq.n	80097f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80097be:	f107 0220 	add.w	r2, r7, #32
 80097c2:	f107 0314 	add.w	r3, r7, #20
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	68b8      	ldr	r0, [r7, #8]
 80097cc:	f000 fca0 	bl	800a110 <xQueueReceiveFromISR>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d102      	bne.n	80097dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80097d6:	2310      	movs	r3, #16
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e001      	b.n	80097e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01d      	beq.n	8009822 <osMessageGet+0xca>
 80097e6:	4b15      	ldr	r3, [pc, #84]	; (800983c <osMessageGet+0xe4>)
 80097e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	e014      	b.n	8009822 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80097f8:	f107 0314 	add.w	r3, r7, #20
 80097fc:	3304      	adds	r3, #4
 80097fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009800:	4619      	mov	r1, r3
 8009802:	68b8      	ldr	r0, [r7, #8]
 8009804:	f000 fba4 	bl	8009f50 <xQueueReceive>
 8009808:	4603      	mov	r3, r0
 800980a:	2b01      	cmp	r3, #1
 800980c:	d102      	bne.n	8009814 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800980e:	2310      	movs	r3, #16
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	e006      	b.n	8009822 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <osMessageGet+0xc6>
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <osMessageGet+0xc8>
 800981e:	2340      	movs	r3, #64	; 0x40
 8009820:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	461c      	mov	r4, r3
 8009826:	f107 0314 	add.w	r3, r7, #20
 800982a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800982e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	372c      	adds	r7, #44	; 0x2c
 8009836:	46bd      	mov	sp, r7
 8009838:	bd90      	pop	{r4, r7, pc}
 800983a:	bf00      	nop
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f103 0208 	add.w	r2, r3, #8
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f04f 32ff 	mov.w	r2, #4294967295
 8009858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f103 0208 	add.w	r2, r3, #8
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f103 0208 	add.w	r2, r3, #8
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	601a      	str	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d103      	bne.n	8009902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e00c      	b.n	800991c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3308      	adds	r3, #8
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e002      	b.n	8009910 <vListInsert+0x2e>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	429a      	cmp	r2, r3
 800991a:	d2f6      	bcs.n	800990a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6892      	ldr	r2, [r2, #8]
 800996a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6852      	ldr	r2, [r2, #4]
 8009974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d103      	bne.n	8009988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	1e5a      	subs	r2, r3, #1
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099d2:	f001 fd57 	bl	800b484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099e2:	fb01 f303 	mul.w	r3, r1, r3
 80099e6:	441a      	add	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a02:	3b01      	subs	r3, #1
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	22ff      	movs	r2, #255	; 0xff
 8009a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	22ff      	movs	r2, #255	; 0xff
 8009a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d114      	bne.n	8009a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01a      	beq.n	8009a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3310      	adds	r3, #16
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 f933 	bl	800aca0 <xTaskRemoveFromEventList>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d012      	beq.n	8009a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a40:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <xQueueGenericReset+0xcc>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	e009      	b.n	8009a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3310      	adds	r3, #16
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fef2 	bl	8009840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3324      	adds	r3, #36	; 0x24
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff feed 	bl	8009840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a66:	f001 fd3d 	bl	800b4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a6a:	2301      	movs	r3, #1
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08e      	sub	sp, #56	; 0x38
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <xQueueGenericCreateStatic+0x52>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <xQueueGenericCreateStatic+0x56>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <xQueueGenericCreateStatic+0x58>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	623b      	str	r3, [r7, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <xQueueGenericCreateStatic+0x7e>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <xQueueGenericCreateStatic+0x82>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e000      	b.n	8009afc <xQueueGenericCreateStatic+0x84>
 8009afa:	2300      	movs	r3, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	61fb      	str	r3, [r7, #28]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b16:	2348      	movs	r3, #72	; 0x48
 8009b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b48      	cmp	r3, #72	; 0x48
 8009b1e:	d00a      	beq.n	8009b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	61bb      	str	r3, [r7, #24]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	4613      	mov	r3, r2
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f83f 	bl	8009bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3730      	adds	r7, #48	; 0x30
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	613b      	str	r3, [r7, #16]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
 8009b9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3348      	adds	r3, #72	; 0x48
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 fd91 	bl	800b6c8 <pvPortMalloc>
 8009ba6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d011      	beq.n	8009bd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	3348      	adds	r3, #72	; 0x48
 8009bb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f805 	bl	8009bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d103      	bne.n	8009bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	e002      	b.n	8009bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	69b8      	ldr	r0, [r7, #24]
 8009c0e:	f7ff fecb 	bl	80099a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08e      	sub	sp, #56	; 0x38
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <xQueueGenericSend+0x32>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c4a:	bf00      	nop
 8009c4c:	e7fe      	b.n	8009c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <xQueueGenericSend+0x40>
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <xQueueGenericSend+0x44>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <xQueueGenericSend+0x46>
 8009c60:	2300      	movs	r3, #0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <xQueueGenericSend+0x60>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c78:	bf00      	nop
 8009c7a:	e7fe      	b.n	8009c7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d103      	bne.n	8009c8a <xQueueGenericSend+0x6e>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <xQueueGenericSend+0x72>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e000      	b.n	8009c90 <xQueueGenericSend+0x74>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueGenericSend+0x8e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	623b      	str	r3, [r7, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009caa:	f001 f9b7 	bl	800b01c <xTaskGetSchedulerState>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <xQueueGenericSend+0x9e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <xQueueGenericSend+0xa2>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <xQueueGenericSend+0xa4>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xQueueGenericSend+0xbe>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	61fb      	str	r3, [r7, #28]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cda:	f001 fbd3 	bl	800b484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d302      	bcc.n	8009cf0 <xQueueGenericSend+0xd4>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d129      	bne.n	8009d44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cf6:	f000 fa8b 	bl	800a210 <prvCopyDataToQueue>
 8009cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d010      	beq.n	8009d26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	3324      	adds	r3, #36	; 0x24
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 ffc9 	bl	800aca0 <xTaskRemoveFromEventList>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d013      	beq.n	8009d3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d14:	4b3f      	ldr	r3, [pc, #252]	; (8009e14 <xQueueGenericSend+0x1f8>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	e00a      	b.n	8009d3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d007      	beq.n	8009d3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d2c:	4b39      	ldr	r3, [pc, #228]	; (8009e14 <xQueueGenericSend+0x1f8>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d3c:	f001 fbd2 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e063      	b.n	8009e0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d103      	bne.n	8009d52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d4a:	f001 fbcb 	bl	800b4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e05c      	b.n	8009e0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d58:	f107 0314 	add.w	r3, r7, #20
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 f801 	bl	800ad64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d62:	2301      	movs	r3, #1
 8009d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d66:	f001 fbbd 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d6a:	f000 fd93 	bl	800a894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d6e:	f001 fb89 	bl	800b484 <vPortEnterCritical>
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d78:	b25b      	sxtb	r3, r3
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7e:	d103      	bne.n	8009d88 <xQueueGenericSend+0x16c>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d8e:	b25b      	sxtb	r3, r3
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d94:	d103      	bne.n	8009d9e <xQueueGenericSend+0x182>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d9e:	f001 fba1 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009da2:	1d3a      	adds	r2, r7, #4
 8009da4:	f107 0314 	add.w	r3, r7, #20
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fff0 	bl	800ad90 <xTaskCheckForTimeOut>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d124      	bne.n	8009e00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db8:	f000 fb22 	bl	800a400 <prvIsQueueFull>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d018      	beq.n	8009df4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	3310      	adds	r3, #16
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 ff44 	bl	800ac58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd2:	f000 faad 	bl	800a330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009dd6:	f000 fd6b 	bl	800a8b0 <xTaskResumeAll>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f47f af7c 	bne.w	8009cda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <xQueueGenericSend+0x1f8>)
 8009de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	e772      	b.n	8009cda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df6:	f000 fa9b 	bl	800a330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dfa:	f000 fd59 	bl	800a8b0 <xTaskResumeAll>
 8009dfe:	e76c      	b.n	8009cda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e02:	f000 fa95 	bl	800a330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e06:	f000 fd53 	bl	800a8b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3738      	adds	r7, #56	; 0x38
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	e000ed04 	.word	0xe000ed04

08009e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b090      	sub	sp, #64	; 0x40
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <xQueueGenericSendFromISR+0x3c>
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <xQueueGenericSendFromISR+0x40>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e000      	b.n	8009e5a <xQueueGenericSendFromISR+0x42>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d103      	bne.n	8009e82 <xQueueGenericSendFromISR+0x6a>
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d101      	bne.n	8009e86 <xQueueGenericSendFromISR+0x6e>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <xQueueGenericSendFromISR+0x70>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	623b      	str	r3, [r7, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ea2:	f001 fbd1 	bl	800b648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	61fa      	str	r2, [r7, #28]
 8009ebc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ec0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d302      	bcc.n	8009ed4 <xQueueGenericSendFromISR+0xbc>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d12f      	bne.n	8009f34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eea:	f000 f991 	bl	800a210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009eee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef6:	d112      	bne.n	8009f1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d016      	beq.n	8009f2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	3324      	adds	r3, #36	; 0x24
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fecb 	bl	800aca0 <xTaskRemoveFromEventList>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00e      	beq.n	8009f2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e007      	b.n	8009f2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f22:	3301      	adds	r3, #1
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	b25a      	sxtb	r2, r3
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f32:	e001      	b.n	8009f38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f34:	2300      	movs	r3, #0
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3740      	adds	r7, #64	; 0x40
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08c      	sub	sp, #48	; 0x30
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <xQueueReceive+0x30>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	623b      	str	r3, [r7, #32]
}
 8009f7c:	bf00      	nop
 8009f7e:	e7fe      	b.n	8009f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <xQueueReceive+0x3e>
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <xQueueReceive+0x42>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueReceive+0x44>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueReceive+0x5e>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	61fb      	str	r3, [r7, #28]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fae:	f001 f835 	bl	800b01c <xTaskGetSchedulerState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <xQueueReceive+0x6e>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <xQueueReceive+0x72>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueReceive+0x74>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueReceive+0x8e>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61bb      	str	r3, [r7, #24]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fde:	f001 fa51 	bl	800b484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01f      	beq.n	800a02e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff2:	f000 f977 	bl	800a2e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	1e5a      	subs	r2, r3, #1
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00f      	beq.n	800a026 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	3310      	adds	r3, #16
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fe48 	bl	800aca0 <xTaskRemoveFromEventList>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a016:	4b3d      	ldr	r3, [pc, #244]	; (800a10c <xQueueReceive+0x1bc>)
 800a018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a026:	f001 fa5d 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e069      	b.n	800a102 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a034:	f001 fa56 	bl	800b4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a038:	2300      	movs	r3, #0
 800a03a:	e062      	b.n	800a102 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a042:	f107 0310 	add.w	r3, r7, #16
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fe8c 	bl	800ad64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a050:	f001 fa48 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a054:	f000 fc1e 	bl	800a894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a058:	f001 fa14 	bl	800b484 <vPortEnterCritical>
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a062:	b25b      	sxtb	r3, r3
 800a064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a068:	d103      	bne.n	800a072 <xQueueReceive+0x122>
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a078:	b25b      	sxtb	r3, r3
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d103      	bne.n	800a088 <xQueueReceive+0x138>
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a088:	f001 fa2c 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a08c:	1d3a      	adds	r2, r7, #4
 800a08e:	f107 0310 	add.w	r3, r7, #16
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fe7b 	bl	800ad90 <xTaskCheckForTimeOut>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d123      	bne.n	800a0e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a2:	f000 f997 	bl	800a3d4 <prvIsQueueEmpty>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d017      	beq.n	800a0dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	3324      	adds	r3, #36	; 0x24
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 fdcf 	bl	800ac58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0bc:	f000 f938 	bl	800a330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0c0:	f000 fbf6 	bl	800a8b0 <xTaskResumeAll>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d189      	bne.n	8009fde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <xQueueReceive+0x1bc>)
 800a0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	e780      	b.n	8009fde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0de:	f000 f927 	bl	800a330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0e2:	f000 fbe5 	bl	800a8b0 <xTaskResumeAll>
 800a0e6:	e77a      	b.n	8009fde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ea:	f000 f921 	bl	800a330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0ee:	f000 fbdf 	bl	800a8b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f4:	f000 f96e 	bl	800a3d4 <prvIsQueueEmpty>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f43f af6f 	beq.w	8009fde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a102:	4618      	mov	r0, r3
 800a104:	3730      	adds	r7, #48	; 0x30
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08e      	sub	sp, #56	; 0x38
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	623b      	str	r3, [r7, #32]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <xQueueReceiveFromISR+0x3a>
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <xQueueReceiveFromISR+0x3e>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <xQueueReceiveFromISR+0x40>
 800a14e:	2300      	movs	r3, #0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10a      	bne.n	800a16a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	61fb      	str	r3, [r7, #28]
}
 800a166:	bf00      	nop
 800a168:	e7fe      	b.n	800a168 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a16a:	f001 fa6d 	bl	800b648 <vPortValidateInterruptPriority>
	__asm volatile
 800a16e:	f3ef 8211 	mrs	r2, BASEPRI
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61ba      	str	r2, [r7, #24]
 800a184:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a186:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	2b00      	cmp	r3, #0
 800a194:	d02f      	beq.n	800a1f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a4:	f000 f89e 	bl	800a2e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	1e5a      	subs	r2, r3, #1
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d112      	bne.n	800a1e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d016      	beq.n	800a1f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	3310      	adds	r3, #16
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fd6a 	bl	800aca0 <xTaskRemoveFromEventList>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00e      	beq.n	800a1f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00b      	beq.n	800a1f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e007      	b.n	800a1f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	b25a      	sxtb	r2, r3
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f4:	e001      	b.n	800a1fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f383 8811 	msr	BASEPRI, r3
}
 800a204:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3738      	adds	r7, #56	; 0x38
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10d      	bne.n	800a24a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d14d      	bne.n	800a2d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 ff0c 	bl	800b058 <xTaskPriorityDisinherit>
 800a240:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	609a      	str	r2, [r3, #8]
 800a248:	e043      	b.n	800a2d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d119      	bne.n	800a284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6858      	ldr	r0, [r3, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	461a      	mov	r2, r3
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	f001 ff64 	bl	800c128 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	429a      	cmp	r2, r3
 800a278:	d32b      	bcc.n	800a2d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	e026      	b.n	800a2d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68d8      	ldr	r0, [r3, #12]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28c:	461a      	mov	r2, r3
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	f001 ff4a 	bl	800c128 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68da      	ldr	r2, [r3, #12]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	425b      	negs	r3, r3
 800a29e:	441a      	add	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d207      	bcs.n	800a2c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	441a      	add	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d105      	bne.n	800a2d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a2da:	697b      	ldr	r3, [r7, #20]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d018      	beq.n	800a328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	441a      	add	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d303      	bcc.n	800a318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68d9      	ldr	r1, [r3, #12]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	461a      	mov	r2, r3
 800a322:	6838      	ldr	r0, [r7, #0]
 800a324:	f001 ff00 	bl	800c128 <memcpy>
	}
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a338:	f001 f8a4 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a344:	e011      	b.n	800a36a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d012      	beq.n	800a374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3324      	adds	r3, #36	; 0x24
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fca4 	bl	800aca0 <xTaskRemoveFromEventList>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a35e:	f000 fd79 	bl	800ae54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	3b01      	subs	r3, #1
 800a366:	b2db      	uxtb	r3, r3
 800a368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dce9      	bgt.n	800a346 <prvUnlockQueue+0x16>
 800a372:	e000      	b.n	800a376 <prvUnlockQueue+0x46>
					break;
 800a374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	22ff      	movs	r2, #255	; 0xff
 800a37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a37e:	f001 f8b1 	bl	800b4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a382:	f001 f87f 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a38c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a38e:	e011      	b.n	800a3b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d012      	beq.n	800a3be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3310      	adds	r3, #16
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 fc7f 	bl	800aca0 <xTaskRemoveFromEventList>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3a8:	f000 fd54 	bl	800ae54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dce9      	bgt.n	800a390 <prvUnlockQueue+0x60>
 800a3bc:	e000      	b.n	800a3c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	22ff      	movs	r2, #255	; 0xff
 800a3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a3c8:	f001 f88c 	bl	800b4e4 <vPortExitCritical>
}
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3dc:	f001 f852 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	e001      	b.n	800a3f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3f2:	f001 f877 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a408:	f001 f83c 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a414:	429a      	cmp	r2, r3
 800a416:	d102      	bne.n	800a41e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a418:	2301      	movs	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e001      	b.n	800a422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a422:	f001 f85f 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800a426:	68fb      	ldr	r3, [r7, #12]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08e      	sub	sp, #56	; 0x38
 800a434:	af04      	add	r7, sp, #16
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	623b      	str	r3, [r7, #32]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xTaskCreateStatic+0x46>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	61fb      	str	r3, [r7, #28]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a476:	2358      	movs	r3, #88	; 0x58
 800a478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b58      	cmp	r3, #88	; 0x58
 800a47e:	d00a      	beq.n	800a496 <xTaskCreateStatic+0x66>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	61bb      	str	r3, [r7, #24]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a496:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01e      	beq.n	800a4dc <xTaskCreateStatic+0xac>
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01b      	beq.n	800a4dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	9302      	str	r3, [sp, #8]
 800a4be:	f107 0314 	add.w	r3, r7, #20
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 f850 	bl	800a574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4d6:	f000 f8df 	bl	800a698 <prvAddNewTaskToReadyList>
 800a4da:	e001      	b.n	800a4e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4e0:	697b      	ldr	r3, [r7, #20]
	}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3728      	adds	r7, #40	; 0x28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b08c      	sub	sp, #48	; 0x30
 800a4ee:	af04      	add	r7, sp, #16
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	603b      	str	r3, [r7, #0]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4fa:	88fb      	ldrh	r3, [r7, #6]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 f8e2 	bl	800b6c8 <pvPortMalloc>
 800a504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00e      	beq.n	800a52a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a50c:	2058      	movs	r0, #88	; 0x58
 800a50e:	f001 f8db 	bl	800b6c8 <pvPortMalloc>
 800a512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
 800a520:	e005      	b.n	800a52e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a522:	6978      	ldr	r0, [r7, #20]
 800a524:	f001 f9a0 	bl	800b868 <vPortFree>
 800a528:	e001      	b.n	800a52e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d017      	beq.n	800a564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a53c:	88fa      	ldrh	r2, [r7, #6]
 800a53e:	2300      	movs	r3, #0
 800a540:	9303      	str	r3, [sp, #12]
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	9302      	str	r3, [sp, #8]
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	68b9      	ldr	r1, [r7, #8]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 f80e 	bl	800a574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a558:	69f8      	ldr	r0, [r7, #28]
 800a55a:	f000 f89d 	bl	800a698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a55e:	2301      	movs	r3, #1
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	e002      	b.n	800a56a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a564:	f04f 33ff 	mov.w	r3, #4294967295
 800a568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a56a:	69bb      	ldr	r3, [r7, #24]
	}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3720      	adds	r7, #32
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	461a      	mov	r2, r3
 800a58c:	21a5      	movs	r1, #165	; 0xa5
 800a58e:	f001 fdd9 	bl	800c144 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a59c:	3b01      	subs	r3, #1
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	617b      	str	r3, [r7, #20]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01f      	beq.n	800a612 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	61fb      	str	r3, [r7, #28]
 800a5d6:	e012      	b.n	800a5fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	7819      	ldrb	r1, [r3, #0]
 800a5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3334      	adds	r3, #52	; 0x34
 800a5e8:	460a      	mov	r2, r1
 800a5ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d006      	beq.n	800a606 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	2b0f      	cmp	r3, #15
 800a602:	d9e9      	bls.n	800a5d8 <prvInitialiseNewTask+0x64>
 800a604:	e000      	b.n	800a608 <prvInitialiseNewTask+0x94>
			{
				break;
 800a606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a610:	e003      	b.n	800a61a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	2b06      	cmp	r3, #6
 800a61e:	d901      	bls.n	800a624 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a620:	2306      	movs	r3, #6
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a628:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a62e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	2200      	movs	r2, #0
 800a634:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	3304      	adds	r3, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7ff f920 	bl	8009880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	3318      	adds	r3, #24
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff f91b 	bl	8009880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	f1c3 0207 	rsb	r2, r3, #7
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	2200      	movs	r2, #0
 800a664:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2200      	movs	r2, #0
 800a66a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f000 fdd9 	bl	800b230 <pxPortInitialiseStack>
 800a67e:	4602      	mov	r2, r0
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a690:	bf00      	nop
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6a0:	f000 fef0 	bl	800b484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6a4:	4b2a      	ldr	r3, [pc, #168]	; (800a750 <prvAddNewTaskToReadyList+0xb8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	4a29      	ldr	r2, [pc, #164]	; (800a750 <prvAddNewTaskToReadyList+0xb8>)
 800a6ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6ae:	4b29      	ldr	r3, [pc, #164]	; (800a754 <prvAddNewTaskToReadyList+0xbc>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6b6:	4a27      	ldr	r2, [pc, #156]	; (800a754 <prvAddNewTaskToReadyList+0xbc>)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6bc:	4b24      	ldr	r3, [pc, #144]	; (800a750 <prvAddNewTaskToReadyList+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d110      	bne.n	800a6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6c4:	f000 fbec 	bl	800aea0 <prvInitialiseTaskLists>
 800a6c8:	e00d      	b.n	800a6e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ca:	4b23      	ldr	r3, [pc, #140]	; (800a758 <prvAddNewTaskToReadyList+0xc0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d109      	bne.n	800a6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6d2:	4b20      	ldr	r3, [pc, #128]	; (800a754 <prvAddNewTaskToReadyList+0xbc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d802      	bhi.n	800a6e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6e0:	4a1c      	ldr	r2, [pc, #112]	; (800a754 <prvAddNewTaskToReadyList+0xbc>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6e6:	4b1d      	ldr	r3, [pc, #116]	; (800a75c <prvAddNewTaskToReadyList+0xc4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	4a1b      	ldr	r2, [pc, #108]	; (800a75c <prvAddNewTaskToReadyList+0xc4>)
 800a6ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	409a      	lsls	r2, r3
 800a6f8:	4b19      	ldr	r3, [pc, #100]	; (800a760 <prvAddNewTaskToReadyList+0xc8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	4a18      	ldr	r2, [pc, #96]	; (800a760 <prvAddNewTaskToReadyList+0xc8>)
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4a15      	ldr	r2, [pc, #84]	; (800a764 <prvAddNewTaskToReadyList+0xcc>)
 800a710:	441a      	add	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3304      	adds	r3, #4
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f7ff f8be 	bl	800989a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a71e:	f000 fee1 	bl	800b4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <prvAddNewTaskToReadyList+0xc0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00e      	beq.n	800a748 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a72a:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <prvAddNewTaskToReadyList+0xbc>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	429a      	cmp	r2, r3
 800a736:	d207      	bcs.n	800a748 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a738:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <prvAddNewTaskToReadyList+0xd0>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	200006bc 	.word	0x200006bc
 800a754:	200005bc 	.word	0x200005bc
 800a758:	200006c8 	.word	0x200006c8
 800a75c:	200006d8 	.word	0x200006d8
 800a760:	200006c4 	.word	0x200006c4
 800a764:	200005c0 	.word	0x200005c0
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d017      	beq.n	800a7ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <vTaskDelay+0x60>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00a      	beq.n	800a79c <vTaskDelay+0x30>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60bb      	str	r3, [r7, #8]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a79c:	f000 f87a 	bl	800a894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fcde 	bl	800b164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7a8:	f000 f882 	bl	800a8b0 <xTaskResumeAll>
 800a7ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d107      	bne.n	800a7c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <vTaskDelay+0x64>)
 800a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	200006e4 	.word	0x200006e4
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7e2:	463a      	mov	r2, r7
 800a7e4:	1d39      	adds	r1, r7, #4
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7f5 fe9c 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	9202      	str	r2, [sp, #8]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	460a      	mov	r2, r1
 800a802:	491e      	ldr	r1, [pc, #120]	; (800a87c <vTaskStartScheduler+0xa8>)
 800a804:	481e      	ldr	r0, [pc, #120]	; (800a880 <vTaskStartScheduler+0xac>)
 800a806:	f7ff fe13 	bl	800a430 <xTaskCreateStatic>
 800a80a:	4603      	mov	r3, r0
 800a80c:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <vTaskStartScheduler+0xb0>)
 800a80e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a810:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <vTaskStartScheduler+0xb0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a818:	2301      	movs	r3, #1
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e001      	b.n	800a822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d116      	bne.n	800a856 <vTaskStartScheduler+0x82>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	613b      	str	r3, [r7, #16]
}
 800a83a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a83c:	4b12      	ldr	r3, [pc, #72]	; (800a888 <vTaskStartScheduler+0xb4>)
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295
 800a842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a844:	4b11      	ldr	r3, [pc, #68]	; (800a88c <vTaskStartScheduler+0xb8>)
 800a846:	2201      	movs	r2, #1
 800a848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a84a:	4b11      	ldr	r3, [pc, #68]	; (800a890 <vTaskStartScheduler+0xbc>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a850:	f000 fd76 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a854:	e00e      	b.n	800a874 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d10a      	bne.n	800a874 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	60fb      	str	r3, [r7, #12]
}
 800a870:	bf00      	nop
 800a872:	e7fe      	b.n	800a872 <vTaskStartScheduler+0x9e>
}
 800a874:	bf00      	nop
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	0800c3cc 	.word	0x0800c3cc
 800a880:	0800ae6d 	.word	0x0800ae6d
 800a884:	200006e0 	.word	0x200006e0
 800a888:	200006dc 	.word	0x200006dc
 800a88c:	200006c8 	.word	0x200006c8
 800a890:	200006c0 	.word	0x200006c0

0800a894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <vTaskSuspendAll+0x18>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	4a03      	ldr	r2, [pc, #12]	; (800a8ac <vTaskSuspendAll+0x18>)
 800a8a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8a2:	bf00      	nop
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	200006e4 	.word	0x200006e4

0800a8b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8be:	4b41      	ldr	r3, [pc, #260]	; (800a9c4 <xTaskResumeAll+0x114>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <xTaskResumeAll+0x2c>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	603b      	str	r3, [r7, #0]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8dc:	f000 fdd2 	bl	800b484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8e0:	4b38      	ldr	r3, [pc, #224]	; (800a9c4 <xTaskResumeAll+0x114>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	4a37      	ldr	r2, [pc, #220]	; (800a9c4 <xTaskResumeAll+0x114>)
 800a8e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ea:	4b36      	ldr	r3, [pc, #216]	; (800a9c4 <xTaskResumeAll+0x114>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d161      	bne.n	800a9b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8f2:	4b35      	ldr	r3, [pc, #212]	; (800a9c8 <xTaskResumeAll+0x118>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d05d      	beq.n	800a9b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8fa:	e02e      	b.n	800a95a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8fc:	4b33      	ldr	r3, [pc, #204]	; (800a9cc <xTaskResumeAll+0x11c>)
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	3318      	adds	r3, #24
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff f823 	bl	8009954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f81e 	bl	8009954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91c:	2201      	movs	r2, #1
 800a91e:	409a      	lsls	r2, r3
 800a920:	4b2b      	ldr	r3, [pc, #172]	; (800a9d0 <xTaskResumeAll+0x120>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4313      	orrs	r3, r2
 800a926:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <xTaskResumeAll+0x120>)
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4a27      	ldr	r2, [pc, #156]	; (800a9d4 <xTaskResumeAll+0x124>)
 800a938:	441a      	add	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7fe ffaa 	bl	800989a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94a:	4b23      	ldr	r3, [pc, #140]	; (800a9d8 <xTaskResumeAll+0x128>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	429a      	cmp	r2, r3
 800a952:	d302      	bcc.n	800a95a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a954:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <xTaskResumeAll+0x12c>)
 800a956:	2201      	movs	r2, #1
 800a958:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a95a:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <xTaskResumeAll+0x11c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1cc      	bne.n	800a8fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a968:	f000 fb38 	bl	800afdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a96c:	4b1c      	ldr	r3, [pc, #112]	; (800a9e0 <xTaskResumeAll+0x130>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d010      	beq.n	800a99a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a978:	f000 f836 	bl	800a9e8 <xTaskIncrementTick>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a982:	4b16      	ldr	r3, [pc, #88]	; (800a9dc <xTaskResumeAll+0x12c>)
 800a984:	2201      	movs	r2, #1
 800a986:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1f1      	bne.n	800a978 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a994:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <xTaskResumeAll+0x130>)
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a99a:	4b10      	ldr	r3, [pc, #64]	; (800a9dc <xTaskResumeAll+0x12c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <xTaskResumeAll+0x134>)
 800a9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9b6:	f000 fd95 	bl	800b4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	200006e4 	.word	0x200006e4
 800a9c8:	200006bc 	.word	0x200006bc
 800a9cc:	2000067c 	.word	0x2000067c
 800a9d0:	200006c4 	.word	0x200006c4
 800a9d4:	200005c0 	.word	0x200005c0
 800a9d8:	200005bc 	.word	0x200005bc
 800a9dc:	200006d0 	.word	0x200006d0
 800a9e0:	200006cc 	.word	0x200006cc
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f2:	4b4e      	ldr	r3, [pc, #312]	; (800ab2c <xTaskIncrementTick+0x144>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f040 808e 	bne.w	800ab18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9fc:	4b4c      	ldr	r3, [pc, #304]	; (800ab30 <xTaskIncrementTick+0x148>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3301      	adds	r3, #1
 800aa02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa04:	4a4a      	ldr	r2, [pc, #296]	; (800ab30 <xTaskIncrementTick+0x148>)
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d120      	bne.n	800aa52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa10:	4b48      	ldr	r3, [pc, #288]	; (800ab34 <xTaskIncrementTick+0x14c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	603b      	str	r3, [r7, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <xTaskIncrementTick+0x46>
 800aa30:	4b40      	ldr	r3, [pc, #256]	; (800ab34 <xTaskIncrementTick+0x14c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <xTaskIncrementTick+0x150>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a3e      	ldr	r2, [pc, #248]	; (800ab34 <xTaskIncrementTick+0x14c>)
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	4a3e      	ldr	r2, [pc, #248]	; (800ab38 <xTaskIncrementTick+0x150>)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	4b3d      	ldr	r3, [pc, #244]	; (800ab3c <xTaskIncrementTick+0x154>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a3c      	ldr	r2, [pc, #240]	; (800ab3c <xTaskIncrementTick+0x154>)
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	f000 fac5 	bl	800afdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa52:	4b3b      	ldr	r3, [pc, #236]	; (800ab40 <xTaskIncrementTick+0x158>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d348      	bcc.n	800aaee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa5c:	4b35      	ldr	r3, [pc, #212]	; (800ab34 <xTaskIncrementTick+0x14c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa66:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <xTaskIncrementTick+0x158>)
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6c:	601a      	str	r2, [r3, #0]
					break;
 800aa6e:	e03e      	b.n	800aaee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa70:	4b30      	ldr	r3, [pc, #192]	; (800ab34 <xTaskIncrementTick+0x14c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d203      	bcs.n	800aa90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa88:	4a2d      	ldr	r2, [pc, #180]	; (800ab40 <xTaskIncrementTick+0x158>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa8e:	e02e      	b.n	800aaee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe ff5d 	bl	8009954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	3318      	adds	r3, #24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe ff54 	bl	8009954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab0:	2201      	movs	r2, #1
 800aab2:	409a      	lsls	r2, r3
 800aab4:	4b23      	ldr	r3, [pc, #140]	; (800ab44 <xTaskIncrementTick+0x15c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	4a22      	ldr	r2, [pc, #136]	; (800ab44 <xTaskIncrementTick+0x15c>)
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4a1f      	ldr	r2, [pc, #124]	; (800ab48 <xTaskIncrementTick+0x160>)
 800aacc:	441a      	add	r2, r3
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f7fe fee0 	bl	800989a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <xTaskIncrementTick+0x164>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d3b9      	bcc.n	800aa5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aae8:	2301      	movs	r3, #1
 800aaea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaec:	e7b6      	b.n	800aa5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aaee:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <xTaskIncrementTick+0x164>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf4:	4914      	ldr	r1, [pc, #80]	; (800ab48 <xTaskIncrementTick+0x160>)
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	440b      	add	r3, r1
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d901      	bls.n	800ab0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ab06:	2301      	movs	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab0a:	4b11      	ldr	r3, [pc, #68]	; (800ab50 <xTaskIncrementTick+0x168>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ab12:	2301      	movs	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	e004      	b.n	800ab22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <xTaskIncrementTick+0x16c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	4a0d      	ldr	r2, [pc, #52]	; (800ab54 <xTaskIncrementTick+0x16c>)
 800ab20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab22:	697b      	ldr	r3, [r7, #20]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	200006e4 	.word	0x200006e4
 800ab30:	200006c0 	.word	0x200006c0
 800ab34:	20000674 	.word	0x20000674
 800ab38:	20000678 	.word	0x20000678
 800ab3c:	200006d4 	.word	0x200006d4
 800ab40:	200006dc 	.word	0x200006dc
 800ab44:	200006c4 	.word	0x200006c4
 800ab48:	200005c0 	.word	0x200005c0
 800ab4c:	200005bc 	.word	0x200005bc
 800ab50:	200006d0 	.word	0x200006d0
 800ab54:	200006cc 	.word	0x200006cc

0800ab58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab5e:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <vTaskSwitchContext+0xec>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab66:	4b38      	ldr	r3, [pc, #224]	; (800ac48 <vTaskSwitchContext+0xf0>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab6c:	e066      	b.n	800ac3c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800ab6e:	4b36      	ldr	r3, [pc, #216]	; (800ac48 <vTaskSwitchContext+0xf0>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ab74:	4b35      	ldr	r3, [pc, #212]	; (800ac4c <vTaskSwitchContext+0xf4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d111      	bne.n	800abb0 <vTaskSwitchContext+0x58>
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d10b      	bne.n	800abb0 <vTaskSwitchContext+0x58>
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d105      	bne.n	800abb0 <vTaskSwitchContext+0x58>
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	330c      	adds	r3, #12
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	429a      	cmp	r2, r3
 800abae:	d008      	beq.n	800abc2 <vTaskSwitchContext+0x6a>
 800abb0:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <vTaskSwitchContext+0xf4>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	4b25      	ldr	r3, [pc, #148]	; (800ac4c <vTaskSwitchContext+0xf4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3334      	adds	r3, #52	; 0x34
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7f5 fca0 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <vTaskSwitchContext+0xf8>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	fab3 f383 	clz	r3, r3
 800abce:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	f1c3 031f 	rsb	r3, r3, #31
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	491e      	ldr	r1, [pc, #120]	; (800ac54 <vTaskSwitchContext+0xfc>)
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <vTaskSwitchContext+0xaa>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	607b      	str	r3, [r7, #4]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <vTaskSwitchContext+0xa8>
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4a11      	ldr	r2, [pc, #68]	; (800ac54 <vTaskSwitchContext+0xfc>)
 800ac0e:	4413      	add	r3, r2
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	3308      	adds	r3, #8
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d104      	bne.n	800ac32 <vTaskSwitchContext+0xda>
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	605a      	str	r2, [r3, #4]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	4a04      	ldr	r2, [pc, #16]	; (800ac4c <vTaskSwitchContext+0xf4>)
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	200006e4 	.word	0x200006e4
 800ac48:	200006d0 	.word	0x200006d0
 800ac4c:	200005bc 	.word	0x200005bc
 800ac50:	200006c4 	.word	0x200006c4
 800ac54:	200005c0 	.word	0x200005c0

0800ac58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60fb      	str	r3, [r7, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <vTaskPlaceOnEventList+0x44>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3318      	adds	r3, #24
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fe fe2b 	bl	80098e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	6838      	ldr	r0, [r7, #0]
 800ac90:	f000 fa68 	bl	800b164 <prvAddCurrentTaskToDelayedList>
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	200005bc 	.word	0x200005bc

0800aca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10a      	bne.n	800accc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	60fb      	str	r3, [r7, #12]
}
 800acc8:	bf00      	nop
 800acca:	e7fe      	b.n	800acca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3318      	adds	r3, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fe3f 	bl	8009954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acd6:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <xTaskRemoveFromEventList+0xac>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d11c      	bne.n	800ad18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fe36 	bl	8009954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	2201      	movs	r2, #1
 800acee:	409a      	lsls	r2, r3
 800acf0:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <xTaskRemoveFromEventList+0xb0>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <xTaskRemoveFromEventList+0xb0>)
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4a13      	ldr	r2, [pc, #76]	; (800ad54 <xTaskRemoveFromEventList+0xb4>)
 800ad08:	441a      	add	r2, r3
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fe fdc2 	bl	800989a <vListInsertEnd>
 800ad16:	e005      	b.n	800ad24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	3318      	adds	r3, #24
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	480e      	ldr	r0, [pc, #56]	; (800ad58 <xTaskRemoveFromEventList+0xb8>)
 800ad20:	f7fe fdbb 	bl	800989a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad28:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <xTaskRemoveFromEventList+0xbc>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d905      	bls.n	800ad3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad32:	2301      	movs	r3, #1
 800ad34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad36:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <xTaskRemoveFromEventList+0xc0>)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	e001      	b.n	800ad42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad42:	697b      	ldr	r3, [r7, #20]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	200006e4 	.word	0x200006e4
 800ad50:	200006c4 	.word	0x200006c4
 800ad54:	200005c0 	.word	0x200005c0
 800ad58:	2000067c 	.word	0x2000067c
 800ad5c:	200005bc 	.word	0x200005bc
 800ad60:	200006d0 	.word	0x200006d0

0800ad64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <vTaskInternalSetTimeOutState+0x24>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad74:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <vTaskInternalSetTimeOutState+0x28>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	605a      	str	r2, [r3, #4]
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	200006d4 	.word	0x200006d4
 800ad8c:	200006c0 	.word	0x200006c0

0800ad90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	613b      	str	r3, [r7, #16]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	60fb      	str	r3, [r7, #12]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800add2:	f000 fb57 	bl	800b484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800add6:	4b1d      	ldr	r3, [pc, #116]	; (800ae4c <xTaskCheckForTimeOut+0xbc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adee:	d102      	bne.n	800adf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	e023      	b.n	800ae3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b15      	ldr	r3, [pc, #84]	; (800ae50 <xTaskCheckForTimeOut+0xc0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d007      	beq.n	800ae12 <xTaskCheckForTimeOut+0x82>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d302      	bcc.n	800ae12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	61fb      	str	r3, [r7, #28]
 800ae10:	e015      	b.n	800ae3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d20b      	bcs.n	800ae34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	1ad2      	subs	r2, r2, r3
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff ff9b 	bl	800ad64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	e004      	b.n	800ae3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae3e:	f000 fb51 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800ae42:	69fb      	ldr	r3, [r7, #28]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3720      	adds	r7, #32
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200006c0 	.word	0x200006c0
 800ae50:	200006d4 	.word	0x200006d4

0800ae54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae58:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <vTaskMissedYield+0x14>)
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	601a      	str	r2, [r3, #0]
}
 800ae5e:	bf00      	nop
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	200006d0 	.word	0x200006d0

0800ae6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae74:	f000 f854 	bl	800af20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae78:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <prvIdleTask+0x2c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d907      	bls.n	800ae90 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ae80:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <prvIdleTask+0x30>)
 800ae82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ae90:	f7f5 fb30 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ae94:	e7ee      	b.n	800ae74 <prvIdleTask+0x8>
 800ae96:	bf00      	nop
 800ae98:	200005c0 	.word	0x200005c0
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e00c      	b.n	800aec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4a12      	ldr	r2, [pc, #72]	; (800af00 <prvInitialiseTaskLists+0x60>)
 800aeb8:	4413      	add	r3, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fcc0 	bl	8009840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b06      	cmp	r3, #6
 800aeca:	d9ef      	bls.n	800aeac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aecc:	480d      	ldr	r0, [pc, #52]	; (800af04 <prvInitialiseTaskLists+0x64>)
 800aece:	f7fe fcb7 	bl	8009840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aed2:	480d      	ldr	r0, [pc, #52]	; (800af08 <prvInitialiseTaskLists+0x68>)
 800aed4:	f7fe fcb4 	bl	8009840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aed8:	480c      	ldr	r0, [pc, #48]	; (800af0c <prvInitialiseTaskLists+0x6c>)
 800aeda:	f7fe fcb1 	bl	8009840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aede:	480c      	ldr	r0, [pc, #48]	; (800af10 <prvInitialiseTaskLists+0x70>)
 800aee0:	f7fe fcae 	bl	8009840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aee4:	480b      	ldr	r0, [pc, #44]	; (800af14 <prvInitialiseTaskLists+0x74>)
 800aee6:	f7fe fcab 	bl	8009840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeea:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <prvInitialiseTaskLists+0x78>)
 800aeec:	4a05      	ldr	r2, [pc, #20]	; (800af04 <prvInitialiseTaskLists+0x64>)
 800aeee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <prvInitialiseTaskLists+0x7c>)
 800aef2:	4a05      	ldr	r2, [pc, #20]	; (800af08 <prvInitialiseTaskLists+0x68>)
 800aef4:	601a      	str	r2, [r3, #0]
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200005c0 	.word	0x200005c0
 800af04:	2000064c 	.word	0x2000064c
 800af08:	20000660 	.word	0x20000660
 800af0c:	2000067c 	.word	0x2000067c
 800af10:	20000690 	.word	0x20000690
 800af14:	200006a8 	.word	0x200006a8
 800af18:	20000674 	.word	0x20000674
 800af1c:	20000678 	.word	0x20000678

0800af20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af26:	e019      	b.n	800af5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af28:	f000 faac 	bl	800b484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2c:	4b10      	ldr	r3, [pc, #64]	; (800af70 <prvCheckTasksWaitingTermination+0x50>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fd0b 	bl	8009954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af3e:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3b01      	subs	r3, #1
 800af44:	4a0b      	ldr	r2, [pc, #44]	; (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4a0a      	ldr	r2, [pc, #40]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af52:	f000 fac7 	bl	800b4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f810 	bl	800af7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e1      	bne.n	800af28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20000690 	.word	0x20000690
 800af74:	200006bc 	.word	0x200006bc
 800af78:	200006a4 	.word	0x200006a4

0800af7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d108      	bne.n	800afa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fc68 	bl	800b868 <vPortFree>
				vPortFree( pxTCB );
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fc65 	bl	800b868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af9e:	e018      	b.n	800afd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d103      	bne.n	800afb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc5c 	bl	800b868 <vPortFree>
	}
 800afb0:	e00f      	b.n	800afd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d00a      	beq.n	800afd2 <prvDeleteTCB+0x56>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <prvDeleteTCB+0x54>
	}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afe2:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <prvResetNextTaskUnblockTime+0x38>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d104      	bne.n	800aff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <prvResetNextTaskUnblockTime+0x3c>)
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aff4:	e008      	b.n	800b008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff6:	4b07      	ldr	r3, [pc, #28]	; (800b014 <prvResetNextTaskUnblockTime+0x38>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4a04      	ldr	r2, [pc, #16]	; (800b018 <prvResetNextTaskUnblockTime+0x3c>)
 800b006:	6013      	str	r3, [r2, #0]
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	20000674 	.word	0x20000674
 800b018:	200006dc 	.word	0x200006dc

0800b01c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b022:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <xTaskGetSchedulerState+0x34>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b02a:	2301      	movs	r3, #1
 800b02c:	607b      	str	r3, [r7, #4]
 800b02e:	e008      	b.n	800b042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b030:	4b08      	ldr	r3, [pc, #32]	; (800b054 <xTaskGetSchedulerState+0x38>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b038:	2302      	movs	r3, #2
 800b03a:	607b      	str	r3, [r7, #4]
 800b03c:	e001      	b.n	800b042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b042:	687b      	ldr	r3, [r7, #4]
	}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	200006c8 	.word	0x200006c8
 800b054:	200006e4 	.word	0x200006e4

0800b058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d06e      	beq.n	800b14c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b06e:	4b3a      	ldr	r3, [pc, #232]	; (800b158 <xTaskPriorityDisinherit+0x100>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	429a      	cmp	r2, r3
 800b076:	d00a      	beq.n	800b08e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	60bb      	str	r3, [r7, #8]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0b0:	1e5a      	subs	r2, r3, #1
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d044      	beq.n	800b14c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d140      	bne.n	800b14c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe fc40 	bl	8009954 <uxListRemove>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d115      	bne.n	800b106 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0de:	491f      	ldr	r1, [pc, #124]	; (800b15c <xTaskPriorityDisinherit+0x104>)
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <xTaskPriorityDisinherit+0xae>
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	43da      	mvns	r2, r3
 800b0fc:	4b18      	ldr	r3, [pc, #96]	; (800b160 <xTaskPriorityDisinherit+0x108>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4013      	ands	r3, r2
 800b102:	4a17      	ldr	r2, [pc, #92]	; (800b160 <xTaskPriorityDisinherit+0x108>)
 800b104:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	f1c3 0207 	rsb	r2, r3, #7
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	2201      	movs	r2, #1
 800b120:	409a      	lsls	r2, r3
 800b122:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <xTaskPriorityDisinherit+0x108>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4313      	orrs	r3, r2
 800b128:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <xTaskPriorityDisinherit+0x108>)
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4a08      	ldr	r2, [pc, #32]	; (800b15c <xTaskPriorityDisinherit+0x104>)
 800b13a:	441a      	add	r2, r3
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	3304      	adds	r3, #4
 800b140:	4619      	mov	r1, r3
 800b142:	4610      	mov	r0, r2
 800b144:	f7fe fba9 	bl	800989a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b148:	2301      	movs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b14c:	697b      	ldr	r3, [r7, #20]
	}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200005bc 	.word	0x200005bc
 800b15c:	200005c0 	.word	0x200005c0
 800b160:	200006c4 	.word	0x200006c4

0800b164 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b16e:	4b29      	ldr	r3, [pc, #164]	; (800b214 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b174:	4b28      	ldr	r3, [pc, #160]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3304      	adds	r3, #4
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fbea 	bl	8009954 <uxListRemove>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10b      	bne.n	800b19e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b186:	4b24      	ldr	r3, [pc, #144]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	2201      	movs	r2, #1
 800b18e:	fa02 f303 	lsl.w	r3, r2, r3
 800b192:	43da      	mvns	r2, r3
 800b194:	4b21      	ldr	r3, [pc, #132]	; (800b21c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4013      	ands	r3, r2
 800b19a:	4a20      	ldr	r2, [pc, #128]	; (800b21c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b19c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d10a      	bne.n	800b1bc <prvAddCurrentTaskToDelayedList+0x58>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ac:	4b1a      	ldr	r3, [pc, #104]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	481a      	ldr	r0, [pc, #104]	; (800b220 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b1b6:	f7fe fb70 	bl	800989a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1ba:	e026      	b.n	800b20a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1c4:	4b14      	ldr	r3, [pc, #80]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d209      	bcs.n	800b1e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d4:	4b13      	ldr	r3, [pc, #76]	; (800b224 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fe fb7e 	bl	80098e2 <vListInsert>
}
 800b1e6:	e010      	b.n	800b20a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1e8:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7fe fb74 	bl	80098e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	429a      	cmp	r2, r3
 800b202:	d202      	bcs.n	800b20a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b204:	4a09      	ldr	r2, [pc, #36]	; (800b22c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6013      	str	r3, [r2, #0]
}
 800b20a:	bf00      	nop
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200006c0 	.word	0x200006c0
 800b218:	200005bc 	.word	0x200005bc
 800b21c:	200006c4 	.word	0x200006c4
 800b220:	200006a8 	.word	0x200006a8
 800b224:	20000678 	.word	0x20000678
 800b228:	20000674 	.word	0x20000674
 800b22c:	200006dc 	.word	0x200006dc

0800b230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	3b04      	subs	r3, #4
 800b240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3b04      	subs	r3, #4
 800b24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f023 0201 	bic.w	r2, r3, #1
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b04      	subs	r3, #4
 800b25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b260:	4a0c      	ldr	r2, [pc, #48]	; (800b294 <pxPortInitialiseStack+0x64>)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3b14      	subs	r3, #20
 800b26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3b04      	subs	r3, #4
 800b276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f06f 0202 	mvn.w	r2, #2
 800b27e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3b20      	subs	r3, #32
 800b284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b286:	68fb      	ldr	r3, [r7, #12]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	0800b299 	.word	0x0800b299

0800b298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <prvTaskExitError+0x54>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2aa:	d00a      	beq.n	800b2c2 <prvTaskExitError+0x2a>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <prvTaskExitError+0x28>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2d6:	bf00      	nop
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0fc      	beq.n	800b2d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	2000002c 	.word	0x2000002c

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	200005bc 	.word	0x200005bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	; (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b346:	4b46      	ldr	r3, [pc, #280]	; (800b460 <xPortStartScheduler+0x120>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a46      	ldr	r2, [pc, #280]	; (800b464 <xPortStartScheduler+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10a      	bne.n	800b366 <xPortStartScheduler+0x26>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b366:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <xPortStartScheduler+0x120>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a3f      	ldr	r2, [pc, #252]	; (800b468 <xPortStartScheduler+0x128>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10a      	bne.n	800b386 <xPortStartScheduler+0x46>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b386:	4b39      	ldr	r3, [pc, #228]	; (800b46c <xPortStartScheduler+0x12c>)
 800b388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <xPortStartScheduler+0x130>)
 800b3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3ae:	4b31      	ldr	r3, [pc, #196]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b4:	e009      	b.n	800b3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	; (800b474 <xPortStartScheduler+0x134>)
 800b3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b80      	cmp	r3, #128	; 0x80
 800b3d4:	d0ef      	beq.n	800b3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <xPortStartScheduler+0x134>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f1c3 0307 	rsb	r3, r3, #7
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d00a      	beq.n	800b3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60bb      	str	r3, [r7, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <xPortStartScheduler+0x134>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <xPortStartScheduler+0x134>)
 800b400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b402:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <xPortStartScheduler+0x134>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b40a:	4a1a      	ldr	r2, [pc, #104]	; (800b474 <xPortStartScheduler+0x134>)
 800b40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <xPortStartScheduler+0x138>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a17      	ldr	r2, [pc, #92]	; (800b478 <xPortStartScheduler+0x138>)
 800b41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <xPortStartScheduler+0x138>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <xPortStartScheduler+0x138>)
 800b428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b42e:	f000 f8dd 	bl	800b5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <xPortStartScheduler+0x13c>)
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b438:	f000 f8fc 	bl	800b634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <xPortStartScheduler+0x140>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0f      	ldr	r2, [pc, #60]	; (800b480 <xPortStartScheduler+0x140>)
 800b442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b448:	f7ff ff66 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b44c:	f7ff fb84 	bl	800ab58 <vTaskSwitchContext>
	prvTaskExitError();
 800b450:	f7ff ff22 	bl	800b298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	e000ed00 	.word	0xe000ed00
 800b464:	410fc271 	.word	0x410fc271
 800b468:	410fc270 	.word	0x410fc270
 800b46c:	e000e400 	.word	0xe000e400
 800b470:	200006e8 	.word	0x200006e8
 800b474:	200006ec 	.word	0x200006ec
 800b478:	e000ed20 	.word	0xe000ed20
 800b47c:	2000002c 	.word	0x2000002c
 800b480:	e000ef34 	.word	0xe000ef34

0800b484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	607b      	str	r3, [r7, #4]
}
 800b49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d10f      	bne.n	800b4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <vPortEnterCritical+0x5c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	603b      	str	r3, [r7, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vPortEnterCritical+0x4a>
	}
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	2000002c 	.word	0x2000002c
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ea:	4b12      	ldr	r3, [pc, #72]	; (800b534 <vPortExitCritical+0x50>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <vPortExitCritical+0x24>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortExitCritical+0x50>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vPortExitCritical+0x50>)
 800b510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <vPortExitCritical+0x50>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d105      	bne.n	800b526 <vPortExitCritical+0x42>
 800b51a:	2300      	movs	r3, #0
 800b51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f383 8811 	msr	BASEPRI, r3
}
 800b524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	2000002c 	.word	0x2000002c
	...

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7ff faf2 	bl	800ab58 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	200005bc 	.word	0x200005bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c2:	f7ff fa11 	bl	800a9e8 <xTaskIncrementTick>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <SysTick_Handler+0x40>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <vPortSetupTimerInterrupt+0x38>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <vPortSetupTimerInterrupt+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <vPortSetupTimerInterrupt+0x40>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	099b      	lsrs	r3, r3, #6
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <vPortSetupTimerInterrupt+0x44>)
 800b60a:	3b01      	subs	r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60e:	4b04      	ldr	r3, [pc, #16]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	e000e010 	.word	0xe000e010
 800b624:	e000e018 	.word	0xe000e018
 800b628:	20000000 	.word	0x20000000
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	e000e014 	.word	0xe000e014

0800b634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b644 <vPortEnableVFP+0x10>
 800b638:	6801      	ldr	r1, [r0, #0]
 800b63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b63e:	6001      	str	r1, [r0, #0]
 800b640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b642:	bf00      	nop
 800b644:	e000ed88 	.word	0xe000ed88

0800b648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64e:	f3ef 8305 	mrs	r3, IPSR
 800b652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b0f      	cmp	r3, #15
 800b658:	d914      	bls.n	800b684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <vPortValidateInterruptPriority+0x70>)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <vPortValidateInterruptPriority+0x74>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d20a      	bcs.n	800b684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b684:	4b0e      	ldr	r3, [pc, #56]	; (800b6c0 <vPortValidateInterruptPriority+0x78>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <vPortValidateInterruptPriority+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d90a      	bls.n	800b6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	603b      	str	r3, [r7, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <vPortValidateInterruptPriority+0x60>
	}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	e000e3f0 	.word	0xe000e3f0
 800b6bc:	200006e8 	.word	0x200006e8
 800b6c0:	e000ed0c 	.word	0xe000ed0c
 800b6c4:	200006ec 	.word	0x200006ec

0800b6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6d4:	f7ff f8de 	bl	800a894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6d8:	4b5d      	ldr	r3, [pc, #372]	; (800b850 <pvPortMalloc+0x188>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e0:	f000 f924 	bl	800b92c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6e4:	4b5b      	ldr	r3, [pc, #364]	; (800b854 <pvPortMalloc+0x18c>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 8093 	bne.w	800b818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01d      	beq.n	800b734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d014      	beq.n	800b734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f023 0307 	bic.w	r3, r3, #7
 800b710:	3308      	adds	r3, #8
 800b712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <pvPortMalloc+0x6c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	617b      	str	r3, [r7, #20]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d06e      	beq.n	800b818 <pvPortMalloc+0x150>
 800b73a:	4b47      	ldr	r3, [pc, #284]	; (800b858 <pvPortMalloc+0x190>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d869      	bhi.n	800b818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b744:	4b45      	ldr	r3, [pc, #276]	; (800b85c <pvPortMalloc+0x194>)
 800b746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b748:	4b44      	ldr	r3, [pc, #272]	; (800b85c <pvPortMalloc+0x194>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b74e:	e004      	b.n	800b75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <pvPortMalloc+0xa4>
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f1      	bne.n	800b750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b76c:	4b38      	ldr	r3, [pc, #224]	; (800b850 <pvPortMalloc+0x188>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b772:	429a      	cmp	r2, r3
 800b774:	d050      	beq.n	800b818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2208      	movs	r2, #8
 800b77c:	4413      	add	r3, r2
 800b77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	2308      	movs	r3, #8
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d91f      	bls.n	800b7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	613b      	str	r3, [r7, #16]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7d2:	69b8      	ldr	r0, [r7, #24]
 800b7d4:	f000 f90c 	bl	800b9f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d8:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <pvPortMalloc+0x190>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1d      	ldr	r2, [pc, #116]	; (800b858 <pvPortMalloc+0x190>)
 800b7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7e6:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <pvPortMalloc+0x190>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <pvPortMalloc+0x198>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d203      	bcs.n	800b7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7f2:	4b19      	ldr	r3, [pc, #100]	; (800b858 <pvPortMalloc+0x190>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1a      	ldr	r2, [pc, #104]	; (800b860 <pvPortMalloc+0x198>)
 800b7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	4b15      	ldr	r3, [pc, #84]	; (800b854 <pvPortMalloc+0x18c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	431a      	orrs	r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b80e:	4b15      	ldr	r3, [pc, #84]	; (800b864 <pvPortMalloc+0x19c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	4a13      	ldr	r2, [pc, #76]	; (800b864 <pvPortMalloc+0x19c>)
 800b816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b818:	f7ff f84a 	bl	800a8b0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b822:	f7f4 fe79 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	f003 0307 	and.w	r3, r3, #7
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <pvPortMalloc+0x17e>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	60fb      	str	r3, [r7, #12]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <pvPortMalloc+0x17c>
	return pvReturn;
 800b846:	69fb      	ldr	r3, [r7, #28]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3728      	adds	r7, #40	; 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200086f8 	.word	0x200086f8
 800b854:	2000870c 	.word	0x2000870c
 800b858:	200086fc 	.word	0x200086fc
 800b85c:	200086f0 	.word	0x200086f0
 800b860:	20008700 	.word	0x20008700
 800b864:	20008704 	.word	0x20008704

0800b868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d04d      	beq.n	800b916 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b87a:	2308      	movs	r3, #8
 800b87c:	425b      	negs	r3, r3
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4413      	add	r3, r2
 800b882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b24      	ldr	r3, [pc, #144]	; (800b920 <vPortFree+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <vPortFree+0x44>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00a      	beq.n	800b8ca <vPortFree+0x62>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60bb      	str	r3, [r7, #8]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	4b14      	ldr	r3, [pc, #80]	; (800b920 <vPortFree+0xb8>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01e      	beq.n	800b916 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11a      	bne.n	800b916 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <vPortFree+0xb8>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	43db      	mvns	r3, r3
 800b8ea:	401a      	ands	r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8f0:	f7fe ffd0 	bl	800a894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <vPortFree+0xbc>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4a09      	ldr	r2, [pc, #36]	; (800b924 <vPortFree+0xbc>)
 800b900:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b902:	6938      	ldr	r0, [r7, #16]
 800b904:	f000 f874 	bl	800b9f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b908:	4b07      	ldr	r3, [pc, #28]	; (800b928 <vPortFree+0xc0>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	4a06      	ldr	r2, [pc, #24]	; (800b928 <vPortFree+0xc0>)
 800b910:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b912:	f7fe ffcd 	bl	800a8b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b916:	bf00      	nop
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2000870c 	.word	0x2000870c
 800b924:	200086fc 	.word	0x200086fc
 800b928:	20008708 	.word	0x20008708

0800b92c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b938:	4b27      	ldr	r3, [pc, #156]	; (800b9d8 <prvHeapInit+0xac>)
 800b93a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00c      	beq.n	800b960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3307      	adds	r3, #7
 800b94a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0307 	bic.w	r3, r3, #7
 800b952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	4a1f      	ldr	r2, [pc, #124]	; (800b9d8 <prvHeapInit+0xac>)
 800b95c:	4413      	add	r3, r2
 800b95e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b964:	4a1d      	ldr	r2, [pc, #116]	; (800b9dc <prvHeapInit+0xb0>)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b96a:	4b1c      	ldr	r3, [pc, #112]	; (800b9dc <prvHeapInit+0xb0>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	4413      	add	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b978:	2208      	movs	r2, #8
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	1a9b      	subs	r3, r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0307 	bic.w	r3, r3, #7
 800b986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4a15      	ldr	r2, [pc, #84]	; (800b9e0 <prvHeapInit+0xb4>)
 800b98c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b98e:	4b14      	ldr	r3, [pc, #80]	; (800b9e0 <prvHeapInit+0xb4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b996:	4b12      	ldr	r3, [pc, #72]	; (800b9e0 <prvHeapInit+0xb4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	1ad2      	subs	r2, r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <prvHeapInit+0xb4>)
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4a0a      	ldr	r2, [pc, #40]	; (800b9e4 <prvHeapInit+0xb8>)
 800b9ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	4a09      	ldr	r2, [pc, #36]	; (800b9e8 <prvHeapInit+0xbc>)
 800b9c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9c4:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <prvHeapInit+0xc0>)
 800b9c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9ca:	601a      	str	r2, [r3, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	200006f0 	.word	0x200006f0
 800b9dc:	200086f0 	.word	0x200086f0
 800b9e0:	200086f8 	.word	0x200086f8
 800b9e4:	20008700 	.word	0x20008700
 800b9e8:	200086fc 	.word	0x200086fc
 800b9ec:	2000870c 	.word	0x2000870c

0800b9f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9f8:	4b28      	ldr	r3, [pc, #160]	; (800ba9c <prvInsertBlockIntoFreeList+0xac>)
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	e002      	b.n	800ba04 <prvInsertBlockIntoFreeList+0x14>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d8f7      	bhi.n	800b9fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	4413      	add	r3, r2
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d108      	bne.n	800ba32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	441a      	add	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	441a      	add	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d118      	bne.n	800ba78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d00d      	beq.n	800ba6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	441a      	add	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	e008      	b.n	800ba80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba6e:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	e003      	b.n	800ba80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d002      	beq.n	800ba8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	200086f0 	.word	0x200086f0
 800baa0:	200086f8 	.word	0x200086f8

0800baa4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800baa8:	2200      	movs	r2, #0
 800baaa:	490e      	ldr	r1, [pc, #56]	; (800bae4 <MX_USB_HOST_Init+0x40>)
 800baac:	480e      	ldr	r0, [pc, #56]	; (800bae8 <MX_USB_HOST_Init+0x44>)
 800baae:	f7fb fed5 	bl	800785c <USBH_Init>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bab8:	f7f5 f91e 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800babc:	490b      	ldr	r1, [pc, #44]	; (800baec <MX_USB_HOST_Init+0x48>)
 800babe:	480a      	ldr	r0, [pc, #40]	; (800bae8 <MX_USB_HOST_Init+0x44>)
 800bac0:	f7fb ff82 	bl	80079c8 <USBH_RegisterClass>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800baca:	f7f5 f915 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800bace:	4806      	ldr	r0, [pc, #24]	; (800bae8 <MX_USB_HOST_Init+0x44>)
 800bad0:	f7fc f806 	bl	8007ae0 <USBH_Start>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bada:	f7f5 f90d 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bade:	bf00      	nop
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	0800baf1 	.word	0x0800baf1
 800bae8:	20008710 	.word	0x20008710
 800baec:	2000000c 	.word	0x2000000c

0800baf0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d819      	bhi.n	800bb38 <USBH_UserProcess+0x48>
 800bb04:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <USBH_UserProcess+0x1c>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	0800bb29 	.word	0x0800bb29
 800bb14:	0800bb39 	.word	0x0800bb39
 800bb18:	0800bb31 	.word	0x0800bb31
 800bb1c:	0800bb21 	.word	0x0800bb21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <USBH_UserProcess+0x58>)
 800bb22:	2203      	movs	r2, #3
 800bb24:	701a      	strb	r2, [r3, #0]
  break;
 800bb26:	e008      	b.n	800bb3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bb28:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <USBH_UserProcess+0x58>)
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]
  break;
 800bb2e:	e004      	b.n	800bb3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <USBH_UserProcess+0x58>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	701a      	strb	r2, [r3, #0]
  break;
 800bb36:	e000      	b.n	800bb3a <USBH_UserProcess+0x4a>

  default:
  break;
 800bb38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20008af4 	.word	0x20008af4

0800bb4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08a      	sub	sp, #40	; 0x28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb54:	f107 0314 	add.w	r3, r7, #20
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	605a      	str	r2, [r3, #4]
 800bb5e:	609a      	str	r2, [r3, #8]
 800bb60:	60da      	str	r2, [r3, #12]
 800bb62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a24      	ldr	r2, [pc, #144]	; (800bbfc <HAL_HCD_MspInit+0xb0>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d141      	bne.n	800bbf2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb6e:	2300      	movs	r3, #0
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	4b23      	ldr	r3, [pc, #140]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	4a22      	ldr	r2, [pc, #136]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bb78:	f043 0302 	orr.w	r3, r3, #2
 800bb7c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb7e:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	f003 0302 	and.w	r3, r3, #2
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bb8a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bb8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb90:	2302      	movs	r3, #2
 800bb92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bb9c:	230c      	movs	r3, #12
 800bb9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bba0:	f107 0314 	add.w	r3, r7, #20
 800bba4:	4619      	mov	r1, r3
 800bba6:	4817      	ldr	r0, [pc, #92]	; (800bc04 <HAL_HCD_MspInit+0xb8>)
 800bba8:	f7f6 f864 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bbac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4810      	ldr	r0, [pc, #64]	; (800bc04 <HAL_HCD_MspInit+0xb8>)
 800bbc2:	f7f6 f857 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbce:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bbd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbd4:	6313      	str	r3, [r2, #48]	; 0x30
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <HAL_HCD_MspInit+0xb4>)
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2105      	movs	r1, #5
 800bbe6:	204d      	movs	r0, #77	; 0x4d
 800bbe8:	f7f5 fe12 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bbec:	204d      	movs	r0, #77	; 0x4d
 800bbee:	f7f5 fe2b 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	3728      	adds	r7, #40	; 0x28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	40040000 	.word	0x40040000
 800bc00:	40023800 	.word	0x40023800
 800bc04:	40020400 	.word	0x40020400

0800bc08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fc fc19 	bl	800844e <USBH_LL_IncTimer>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fc fc5d 	bl	80084f2 <USBH_LL_Connect>
}
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fc fc72 	bl	8008538 <USBH_LL_Disconnect>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	460b      	mov	r3, r1
 800bc66:	70fb      	strb	r3, [r7, #3]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fc fca7 	bl	80085c6 <USBH_LL_NotifyURBChange>
#endif
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fc fc07 	bl	80084a2 <USBH_LL_PortEnabled>
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fc fc13 	bl	80084d6 <USBH_LL_PortDisabled>
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d132      	bne.n	800bd30 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800bcca:	4a1c      	ldr	r2, [pc, #112]	; (800bd3c <USBH_LL_Init+0x84>)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a19      	ldr	r2, [pc, #100]	; (800bd3c <USBH_LL_Init+0x84>)
 800bcd6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bcda:	4b18      	ldr	r3, [pc, #96]	; (800bd3c <USBH_LL_Init+0x84>)
 800bcdc:	4a18      	ldr	r2, [pc, #96]	; (800bd40 <USBH_LL_Init+0x88>)
 800bcde:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800bce0:	4b16      	ldr	r3, [pc, #88]	; (800bd3c <USBH_LL_Init+0x84>)
 800bce2:	220c      	movs	r2, #12
 800bce4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800bce6:	4b15      	ldr	r3, [pc, #84]	; (800bd3c <USBH_LL_Init+0x84>)
 800bce8:	2201      	movs	r2, #1
 800bcea:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bcec:	4b13      	ldr	r3, [pc, #76]	; (800bd3c <USBH_LL_Init+0x84>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bcf2:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <USBH_LL_Init+0x84>)
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bcf8:	4b10      	ldr	r3, [pc, #64]	; (800bd3c <USBH_LL_Init+0x84>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <USBH_LL_Init+0x84>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bd04:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <USBH_LL_Init+0x84>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <USBH_LL_Init+0x84>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800bd10:	480a      	ldr	r0, [pc, #40]	; (800bd3c <USBH_LL_Init+0x84>)
 800bd12:	f7f6 f974 	bl	8001ffe <HAL_HCD_Init>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800bd1c:	f7f4 ffec 	bl	8000cf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800bd20:	4806      	ldr	r0, [pc, #24]	; (800bd3c <USBH_LL_Init+0x84>)
 800bd22:	f7f6 fd58 	bl	80027d6 <HAL_HCD_GetCurrentFrame>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fc fb80 	bl	8008430 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20008af8 	.word	0x20008af8
 800bd40:	40040000 	.word	0x40040000

0800bd44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f6 fcc5 	bl	80026ea <HAL_HCD_Start>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 f95c 	bl	800c024 <USBH_Get_USB_Status>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f6 fccd 	bl	8002730 <HAL_HCD_Stop>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 f941 	bl	800c024 <USBH_Get_USB_Status>
 800bda2:	4603      	mov	r3, r0
 800bda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f6 fd15 	bl	80027f2 <HAL_HCD_GetCurrentSpeed>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d00c      	beq.n	800bde8 <USBH_LL_GetSpeed+0x38>
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d80d      	bhi.n	800bdee <USBH_LL_GetSpeed+0x3e>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d002      	beq.n	800bddc <USBH_LL_GetSpeed+0x2c>
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d003      	beq.n	800bde2 <USBH_LL_GetSpeed+0x32>
 800bdda:	e008      	b.n	800bdee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
    break;
 800bde0:	e008      	b.n	800bdf4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bde2:	2301      	movs	r3, #1
 800bde4:	73fb      	strb	r3, [r7, #15]
    break;
 800bde6:	e005      	b.n	800bdf4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bde8:	2302      	movs	r3, #2
 800bdea:	73fb      	strb	r3, [r7, #15]
    break;
 800bdec:	e002      	b.n	800bdf4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf2:	bf00      	nop
  }
  return  speed;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be14:	4618      	mov	r0, r3
 800be16:	f7f6 fca8 	bl	800276a <HAL_HCD_ResetPort>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f8ff 	bl	800c024 <USBH_Get_USB_Status>
 800be26:	4603      	mov	r3, r0
 800be28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be46:	78fa      	ldrb	r2, [r7, #3]
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f6 fcaf 	bl	80027ae <HAL_HCD_HC_GetXferCount>
 800be50:	4603      	mov	r3, r0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be5a:	b590      	push	{r4, r7, lr}
 800be5c:	b089      	sub	sp, #36	; 0x24
 800be5e:	af04      	add	r7, sp, #16
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	4608      	mov	r0, r1
 800be64:	4611      	mov	r1, r2
 800be66:	461a      	mov	r2, r3
 800be68:	4603      	mov	r3, r0
 800be6a:	70fb      	strb	r3, [r7, #3]
 800be6c:	460b      	mov	r3, r1
 800be6e:	70bb      	strb	r3, [r7, #2]
 800be70:	4613      	mov	r3, r2
 800be72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800be82:	787c      	ldrb	r4, [r7, #1]
 800be84:	78ba      	ldrb	r2, [r7, #2]
 800be86:	78f9      	ldrb	r1, [r7, #3]
 800be88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be8a:	9302      	str	r3, [sp, #8]
 800be8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	4623      	mov	r3, r4
 800be9a:	f7f6 f912 	bl	80020c2 <HAL_HCD_HC_Init>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f000 f8bd 	bl	800c024 <USBH_Get_USB_Status>
 800beaa:	4603      	mov	r3, r0
 800beac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beae:	7bbb      	ldrb	r3, [r7, #14]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd90      	pop	{r4, r7, pc}

0800beb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bed2:	78fa      	ldrb	r2, [r7, #3]
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f6 f982 	bl	80021e0 <HAL_HCD_HC_Halt>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 f89e 	bl	800c024 <USBH_Get_USB_Status>
 800bee8:	4603      	mov	r3, r0
 800beea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beec:	7bbb      	ldrb	r3, [r7, #14]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bef6:	b590      	push	{r4, r7, lr}
 800bef8:	b089      	sub	sp, #36	; 0x24
 800befa:	af04      	add	r7, sp, #16
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	4608      	mov	r0, r1
 800bf00:	4611      	mov	r1, r2
 800bf02:	461a      	mov	r2, r3
 800bf04:	4603      	mov	r3, r0
 800bf06:	70fb      	strb	r3, [r7, #3]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70bb      	strb	r3, [r7, #2]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf1e:	787c      	ldrb	r4, [r7, #1]
 800bf20:	78ba      	ldrb	r2, [r7, #2]
 800bf22:	78f9      	ldrb	r1, [r7, #3]
 800bf24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf2c:	9302      	str	r3, [sp, #8]
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	4623      	mov	r3, r4
 800bf3a:	f7f6 f975 	bl	8002228 <HAL_HCD_HC_SubmitRequest>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 f86d 	bl	800c024 <USBH_Get_USB_Status>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd90      	pop	{r4, r7, pc}

0800bf58 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f6 fc09 	bl	8002786 <HAL_HCD_HC_GetURBState>
 800bf74:	4603      	mov	r3, r0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d103      	bne.n	800bf9c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f870 	bl	800c07c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bf9c:	20c8      	movs	r0, #200	; 0xc8
 800bf9e:	f7f5 fb5b 	bl	8001658 <HAL_Delay>
  return USBH_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfc2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bfc4:	78fb      	ldrb	r3, [r7, #3]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	212c      	movs	r1, #44	; 0x2c
 800bfca:	fb01 f303 	mul.w	r3, r1, r3
 800bfce:	4413      	add	r3, r2
 800bfd0:	333b      	adds	r3, #59	; 0x3b
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bfd8:	78fb      	ldrb	r3, [r7, #3]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	212c      	movs	r1, #44	; 0x2c
 800bfde:	fb01 f303 	mul.w	r3, r1, r3
 800bfe2:	4413      	add	r3, r2
 800bfe4:	3354      	adds	r3, #84	; 0x54
 800bfe6:	78ba      	ldrb	r2, [r7, #2]
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e008      	b.n	800bffe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bfec:	78fb      	ldrb	r3, [r7, #3]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	212c      	movs	r1, #44	; 0x2c
 800bff2:	fb01 f303 	mul.w	r3, r1, r3
 800bff6:	4413      	add	r3, r2
 800bff8:	3355      	adds	r3, #85	; 0x55
 800bffa:	78ba      	ldrb	r2, [r7, #2]
 800bffc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7f5 fb1f 	bl	8001658 <HAL_Delay>
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	2b03      	cmp	r3, #3
 800c036:	d817      	bhi.n	800c068 <USBH_Get_USB_Status+0x44>
 800c038:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <USBH_Get_USB_Status+0x1c>)
 800c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03e:	bf00      	nop
 800c040:	0800c051 	.word	0x0800c051
 800c044:	0800c057 	.word	0x0800c057
 800c048:	0800c05d 	.word	0x0800c05d
 800c04c:	0800c063 	.word	0x0800c063
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
    break;
 800c054:	e00b      	b.n	800c06e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c056:	2302      	movs	r3, #2
 800c058:	73fb      	strb	r3, [r7, #15]
    break;
 800c05a:	e008      	b.n	800c06e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c05c:	2301      	movs	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]
    break;
 800c060:	e005      	b.n	800c06e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c062:	2302      	movs	r3, #2
 800c064:	73fb      	strb	r3, [r7, #15]
    break;
 800c066:	e002      	b.n	800c06e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c068:	2302      	movs	r3, #2
 800c06a:	73fb      	strb	r3, [r7, #15]
    break;
 800c06c:	bf00      	nop
  }
  return usb_status;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	4603      	mov	r3, r0
 800c084:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d102      	bne.n	800c096 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c090:	2301      	movs	r3, #1
 800c092:	73fb      	strb	r3, [r7, #15]
 800c094:	e001      	b.n	800c09a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	461a      	mov	r2, r3
 800c09e:	2110      	movs	r1, #16
 800c0a0:	4803      	ldr	r0, [pc, #12]	; (800c0b0 <MX_DriverVbusHS+0x34>)
 800c0a2:	f7f5 ff93 	bl	8001fcc <HAL_GPIO_WritePin>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	40020800 	.word	0x40020800

0800c0b4 <__errno>:
 800c0b4:	4b01      	ldr	r3, [pc, #4]	; (800c0bc <__errno+0x8>)
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000030 	.word	0x20000030

0800c0c0 <__libc_init_array>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4d0d      	ldr	r5, [pc, #52]	; (800c0f8 <__libc_init_array+0x38>)
 800c0c4:	4c0d      	ldr	r4, [pc, #52]	; (800c0fc <__libc_init_array+0x3c>)
 800c0c6:	1b64      	subs	r4, r4, r5
 800c0c8:	10a4      	asrs	r4, r4, #2
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	42a6      	cmp	r6, r4
 800c0ce:	d109      	bne.n	800c0e4 <__libc_init_array+0x24>
 800c0d0:	4d0b      	ldr	r5, [pc, #44]	; (800c100 <__libc_init_array+0x40>)
 800c0d2:	4c0c      	ldr	r4, [pc, #48]	; (800c104 <__libc_init_array+0x44>)
 800c0d4:	f000 f93c 	bl	800c350 <_init>
 800c0d8:	1b64      	subs	r4, r4, r5
 800c0da:	10a4      	asrs	r4, r4, #2
 800c0dc:	2600      	movs	r6, #0
 800c0de:	42a6      	cmp	r6, r4
 800c0e0:	d105      	bne.n	800c0ee <__libc_init_array+0x2e>
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e8:	4798      	blx	r3
 800c0ea:	3601      	adds	r6, #1
 800c0ec:	e7ee      	b.n	800c0cc <__libc_init_array+0xc>
 800c0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f2:	4798      	blx	r3
 800c0f4:	3601      	adds	r6, #1
 800c0f6:	e7f2      	b.n	800c0de <__libc_init_array+0x1e>
 800c0f8:	0800c3f4 	.word	0x0800c3f4
 800c0fc:	0800c3f4 	.word	0x0800c3f4
 800c100:	0800c3f4 	.word	0x0800c3f4
 800c104:	0800c3f8 	.word	0x0800c3f8

0800c108 <malloc>:
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <malloc+0xc>)
 800c10a:	4601      	mov	r1, r0
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f000 b88d 	b.w	800c22c <_malloc_r>
 800c112:	bf00      	nop
 800c114:	20000030 	.word	0x20000030

0800c118 <free>:
 800c118:	4b02      	ldr	r3, [pc, #8]	; (800c124 <free+0xc>)
 800c11a:	4601      	mov	r1, r0
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	f000 b819 	b.w	800c154 <_free_r>
 800c122:	bf00      	nop
 800c124:	20000030 	.word	0x20000030

0800c128 <memcpy>:
 800c128:	440a      	add	r2, r1
 800c12a:	4291      	cmp	r1, r2
 800c12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c130:	d100      	bne.n	800c134 <memcpy+0xc>
 800c132:	4770      	bx	lr
 800c134:	b510      	push	{r4, lr}
 800c136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c13e:	4291      	cmp	r1, r2
 800c140:	d1f9      	bne.n	800c136 <memcpy+0xe>
 800c142:	bd10      	pop	{r4, pc}

0800c144 <memset>:
 800c144:	4402      	add	r2, r0
 800c146:	4603      	mov	r3, r0
 800c148:	4293      	cmp	r3, r2
 800c14a:	d100      	bne.n	800c14e <memset+0xa>
 800c14c:	4770      	bx	lr
 800c14e:	f803 1b01 	strb.w	r1, [r3], #1
 800c152:	e7f9      	b.n	800c148 <memset+0x4>

0800c154 <_free_r>:
 800c154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c156:	2900      	cmp	r1, #0
 800c158:	d044      	beq.n	800c1e4 <_free_r+0x90>
 800c15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c15e:	9001      	str	r0, [sp, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f1a1 0404 	sub.w	r4, r1, #4
 800c166:	bfb8      	it	lt
 800c168:	18e4      	addlt	r4, r4, r3
 800c16a:	f000 f8e3 	bl	800c334 <__malloc_lock>
 800c16e:	4a1e      	ldr	r2, [pc, #120]	; (800c1e8 <_free_r+0x94>)
 800c170:	9801      	ldr	r0, [sp, #4]
 800c172:	6813      	ldr	r3, [r2, #0]
 800c174:	b933      	cbnz	r3, 800c184 <_free_r+0x30>
 800c176:	6063      	str	r3, [r4, #4]
 800c178:	6014      	str	r4, [r2, #0]
 800c17a:	b003      	add	sp, #12
 800c17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c180:	f000 b8de 	b.w	800c340 <__malloc_unlock>
 800c184:	42a3      	cmp	r3, r4
 800c186:	d908      	bls.n	800c19a <_free_r+0x46>
 800c188:	6825      	ldr	r5, [r4, #0]
 800c18a:	1961      	adds	r1, r4, r5
 800c18c:	428b      	cmp	r3, r1
 800c18e:	bf01      	itttt	eq
 800c190:	6819      	ldreq	r1, [r3, #0]
 800c192:	685b      	ldreq	r3, [r3, #4]
 800c194:	1949      	addeq	r1, r1, r5
 800c196:	6021      	streq	r1, [r4, #0]
 800c198:	e7ed      	b.n	800c176 <_free_r+0x22>
 800c19a:	461a      	mov	r2, r3
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	b10b      	cbz	r3, 800c1a4 <_free_r+0x50>
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	d9fa      	bls.n	800c19a <_free_r+0x46>
 800c1a4:	6811      	ldr	r1, [r2, #0]
 800c1a6:	1855      	adds	r5, r2, r1
 800c1a8:	42a5      	cmp	r5, r4
 800c1aa:	d10b      	bne.n	800c1c4 <_free_r+0x70>
 800c1ac:	6824      	ldr	r4, [r4, #0]
 800c1ae:	4421      	add	r1, r4
 800c1b0:	1854      	adds	r4, r2, r1
 800c1b2:	42a3      	cmp	r3, r4
 800c1b4:	6011      	str	r1, [r2, #0]
 800c1b6:	d1e0      	bne.n	800c17a <_free_r+0x26>
 800c1b8:	681c      	ldr	r4, [r3, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	6053      	str	r3, [r2, #4]
 800c1be:	4421      	add	r1, r4
 800c1c0:	6011      	str	r1, [r2, #0]
 800c1c2:	e7da      	b.n	800c17a <_free_r+0x26>
 800c1c4:	d902      	bls.n	800c1cc <_free_r+0x78>
 800c1c6:	230c      	movs	r3, #12
 800c1c8:	6003      	str	r3, [r0, #0]
 800c1ca:	e7d6      	b.n	800c17a <_free_r+0x26>
 800c1cc:	6825      	ldr	r5, [r4, #0]
 800c1ce:	1961      	adds	r1, r4, r5
 800c1d0:	428b      	cmp	r3, r1
 800c1d2:	bf04      	itt	eq
 800c1d4:	6819      	ldreq	r1, [r3, #0]
 800c1d6:	685b      	ldreq	r3, [r3, #4]
 800c1d8:	6063      	str	r3, [r4, #4]
 800c1da:	bf04      	itt	eq
 800c1dc:	1949      	addeq	r1, r1, r5
 800c1de:	6021      	streq	r1, [r4, #0]
 800c1e0:	6054      	str	r4, [r2, #4]
 800c1e2:	e7ca      	b.n	800c17a <_free_r+0x26>
 800c1e4:	b003      	add	sp, #12
 800c1e6:	bd30      	pop	{r4, r5, pc}
 800c1e8:	20008dfc 	.word	0x20008dfc

0800c1ec <sbrk_aligned>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	4e0e      	ldr	r6, [pc, #56]	; (800c228 <sbrk_aligned+0x3c>)
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	6831      	ldr	r1, [r6, #0]
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	b911      	cbnz	r1, 800c1fe <sbrk_aligned+0x12>
 800c1f8:	f000 f88c 	bl	800c314 <_sbrk_r>
 800c1fc:	6030      	str	r0, [r6, #0]
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f000 f887 	bl	800c314 <_sbrk_r>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d00a      	beq.n	800c220 <sbrk_aligned+0x34>
 800c20a:	1cc4      	adds	r4, r0, #3
 800c20c:	f024 0403 	bic.w	r4, r4, #3
 800c210:	42a0      	cmp	r0, r4
 800c212:	d007      	beq.n	800c224 <sbrk_aligned+0x38>
 800c214:	1a21      	subs	r1, r4, r0
 800c216:	4628      	mov	r0, r5
 800c218:	f000 f87c 	bl	800c314 <_sbrk_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d101      	bne.n	800c224 <sbrk_aligned+0x38>
 800c220:	f04f 34ff 	mov.w	r4, #4294967295
 800c224:	4620      	mov	r0, r4
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	20008e00 	.word	0x20008e00

0800c22c <_malloc_r>:
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	1ccd      	adds	r5, r1, #3
 800c232:	f025 0503 	bic.w	r5, r5, #3
 800c236:	3508      	adds	r5, #8
 800c238:	2d0c      	cmp	r5, #12
 800c23a:	bf38      	it	cc
 800c23c:	250c      	movcc	r5, #12
 800c23e:	2d00      	cmp	r5, #0
 800c240:	4607      	mov	r7, r0
 800c242:	db01      	blt.n	800c248 <_malloc_r+0x1c>
 800c244:	42a9      	cmp	r1, r5
 800c246:	d905      	bls.n	800c254 <_malloc_r+0x28>
 800c248:	230c      	movs	r3, #12
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	2600      	movs	r6, #0
 800c24e:	4630      	mov	r0, r6
 800c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c254:	4e2e      	ldr	r6, [pc, #184]	; (800c310 <_malloc_r+0xe4>)
 800c256:	f000 f86d 	bl	800c334 <__malloc_lock>
 800c25a:	6833      	ldr	r3, [r6, #0]
 800c25c:	461c      	mov	r4, r3
 800c25e:	bb34      	cbnz	r4, 800c2ae <_malloc_r+0x82>
 800c260:	4629      	mov	r1, r5
 800c262:	4638      	mov	r0, r7
 800c264:	f7ff ffc2 	bl	800c1ec <sbrk_aligned>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	4604      	mov	r4, r0
 800c26c:	d14d      	bne.n	800c30a <_malloc_r+0xde>
 800c26e:	6834      	ldr	r4, [r6, #0]
 800c270:	4626      	mov	r6, r4
 800c272:	2e00      	cmp	r6, #0
 800c274:	d140      	bne.n	800c2f8 <_malloc_r+0xcc>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	4631      	mov	r1, r6
 800c27a:	4638      	mov	r0, r7
 800c27c:	eb04 0803 	add.w	r8, r4, r3
 800c280:	f000 f848 	bl	800c314 <_sbrk_r>
 800c284:	4580      	cmp	r8, r0
 800c286:	d13a      	bne.n	800c2fe <_malloc_r+0xd2>
 800c288:	6821      	ldr	r1, [r4, #0]
 800c28a:	3503      	adds	r5, #3
 800c28c:	1a6d      	subs	r5, r5, r1
 800c28e:	f025 0503 	bic.w	r5, r5, #3
 800c292:	3508      	adds	r5, #8
 800c294:	2d0c      	cmp	r5, #12
 800c296:	bf38      	it	cc
 800c298:	250c      	movcc	r5, #12
 800c29a:	4629      	mov	r1, r5
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff ffa5 	bl	800c1ec <sbrk_aligned>
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	d02b      	beq.n	800c2fe <_malloc_r+0xd2>
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	442b      	add	r3, r5
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	e00e      	b.n	800c2cc <_malloc_r+0xa0>
 800c2ae:	6822      	ldr	r2, [r4, #0]
 800c2b0:	1b52      	subs	r2, r2, r5
 800c2b2:	d41e      	bmi.n	800c2f2 <_malloc_r+0xc6>
 800c2b4:	2a0b      	cmp	r2, #11
 800c2b6:	d916      	bls.n	800c2e6 <_malloc_r+0xba>
 800c2b8:	1961      	adds	r1, r4, r5
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	6025      	str	r5, [r4, #0]
 800c2be:	bf18      	it	ne
 800c2c0:	6059      	strne	r1, [r3, #4]
 800c2c2:	6863      	ldr	r3, [r4, #4]
 800c2c4:	bf08      	it	eq
 800c2c6:	6031      	streq	r1, [r6, #0]
 800c2c8:	5162      	str	r2, [r4, r5]
 800c2ca:	604b      	str	r3, [r1, #4]
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	f104 060b 	add.w	r6, r4, #11
 800c2d2:	f000 f835 	bl	800c340 <__malloc_unlock>
 800c2d6:	f026 0607 	bic.w	r6, r6, #7
 800c2da:	1d23      	adds	r3, r4, #4
 800c2dc:	1af2      	subs	r2, r6, r3
 800c2de:	d0b6      	beq.n	800c24e <_malloc_r+0x22>
 800c2e0:	1b9b      	subs	r3, r3, r6
 800c2e2:	50a3      	str	r3, [r4, r2]
 800c2e4:	e7b3      	b.n	800c24e <_malloc_r+0x22>
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	bf0c      	ite	eq
 800c2ec:	6032      	streq	r2, [r6, #0]
 800c2ee:	605a      	strne	r2, [r3, #4]
 800c2f0:	e7ec      	b.n	800c2cc <_malloc_r+0xa0>
 800c2f2:	4623      	mov	r3, r4
 800c2f4:	6864      	ldr	r4, [r4, #4]
 800c2f6:	e7b2      	b.n	800c25e <_malloc_r+0x32>
 800c2f8:	4634      	mov	r4, r6
 800c2fa:	6876      	ldr	r6, [r6, #4]
 800c2fc:	e7b9      	b.n	800c272 <_malloc_r+0x46>
 800c2fe:	230c      	movs	r3, #12
 800c300:	603b      	str	r3, [r7, #0]
 800c302:	4638      	mov	r0, r7
 800c304:	f000 f81c 	bl	800c340 <__malloc_unlock>
 800c308:	e7a1      	b.n	800c24e <_malloc_r+0x22>
 800c30a:	6025      	str	r5, [r4, #0]
 800c30c:	e7de      	b.n	800c2cc <_malloc_r+0xa0>
 800c30e:	bf00      	nop
 800c310:	20008dfc 	.word	0x20008dfc

0800c314 <_sbrk_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d06      	ldr	r5, [pc, #24]	; (800c330 <_sbrk_r+0x1c>)
 800c318:	2300      	movs	r3, #0
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f5 f8e6 	bl	80014f0 <_sbrk>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_sbrk_r+0x1a>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_sbrk_r+0x1a>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20008e04 	.word	0x20008e04

0800c334 <__malloc_lock>:
 800c334:	4801      	ldr	r0, [pc, #4]	; (800c33c <__malloc_lock+0x8>)
 800c336:	f000 b809 	b.w	800c34c <__retarget_lock_acquire_recursive>
 800c33a:	bf00      	nop
 800c33c:	20008e08 	.word	0x20008e08

0800c340 <__malloc_unlock>:
 800c340:	4801      	ldr	r0, [pc, #4]	; (800c348 <__malloc_unlock+0x8>)
 800c342:	f000 b804 	b.w	800c34e <__retarget_lock_release_recursive>
 800c346:	bf00      	nop
 800c348:	20008e08 	.word	0x20008e08

0800c34c <__retarget_lock_acquire_recursive>:
 800c34c:	4770      	bx	lr

0800c34e <__retarget_lock_release_recursive>:
 800c34e:	4770      	bx	lr

0800c350 <_init>:
 800c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c352:	bf00      	nop
 800c354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c356:	bc08      	pop	{r3}
 800c358:	469e      	mov	lr, r3
 800c35a:	4770      	bx	lr

0800c35c <_fini>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr
